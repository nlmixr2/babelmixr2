[{"path":"https://nlmixr2.github.io/babelmixr2/articles/PopED.html","id":"introduction-using-babelmixr2-with-poped","dir":"Articles","previous_headings":"","what":"Introduction – using babelmixr2 with PopED","title":"PopED","text":"babelmixr2 now introduces new method takes rxode2/nlmixr2 models converts PopED database help optimal design. PopED vignette comparing ODE solvers (speeds), section : take model described adapt two different rxode2 model functions, solved ode cases (done nlmixr() call creates PopED database) compare examples pharmacometric solvers PopED vignette (mrgsolve, original rxode2 PKPDsim)","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/articles/PopED.html","id":"babelmixr2-ode-solution","dir":"Articles","previous_headings":"","what":"babelmixr2 ODE solution","title":"PopED","text":"first step design using babelmixr2 tell babelmixr2 design optimized. bit different done PopED directly. using et() function create event table like typical rxode2 simulation, used specify study design:","code":"library(babelmixr2) library(PopED)  e <- et(amt=1, ii=24, until=250) %>%   et(list(c(0, 10),           c(0, 10),           c(0, 10),           c(240, 248),           c(240, 248))) %>%   dplyr::mutate(time =c(0, 1,2,8,240,245))  print(e) #> ── EventTable with 6 records ── #> 1 dosing records (see $get.dosing(); add with add.dosing or et) #> 5 observation times (see $get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with $expand(); or etExpand() #> ── First part of : ── #> # A tibble: 6 × 7 #>     low  time  high   amt    ii  addl evid          #>   <dbl> <dbl> <dbl> <dbl> <dbl> <int> <evid>        #> 1    NA     0    NA     1    24    10 1:Dose (Add)  #> 2     0     1    10    NA    NA    NA 0:Observation #> 3     0     2    10    NA    NA    NA 0:Observation #> 4     0     8    10    NA    NA    NA 0:Observation #> 5   240   240   248    NA    NA    NA 0:Observation #> 6   240   245   248    NA    NA    NA 0:Observation"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/PopED.html","id":"popedbabelmixr2-event-table-description","dir":"Articles","previous_headings":"babelmixr2 ODE solution","what":"PopED/babelmixr2 event table description","title":"PopED","text":"note time design times PopED designs, can include dosing; observations considered time-points. become xt parameter PopED database (excluding doses). also build structure rxode2 event table simulations. simulations sampling windows cause random times generated inside sampling windows. reason, last line code fixes times want multiple endpoint design. Therefore, dataset low becomes minxt high becomes maxxt. chose build already know nlmixr2 used require extra coding. things may include PopED model data frame : dvid gives integer model endpoint measured (like rxode2 integer). becomes model_switch PopED dataset. G_xt PopED grouping variable; put PopED database G_xt id becomes ID design (can use covariate pool different designs different regimens optimal design).","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/articles/PopED.html","id":"getting-poped-functions-from-nlmixr2rxode2-ui-function","dir":"Articles","previous_headings":"babelmixr2 ODE solution","what":"Getting PopED functions from nlmixr2/rxode2 ui function","title":"PopED","text":"design setup, need specify model. easy specify model using nlmixr2/rxode2 function/ui : Note creating PopED database model design event table, many PopED database components generated . things hidden, things can access directly model even compiled ui. Much options optimal design can specified popedControl() function. can help understand babelmixr2 , show added:","code":"# model f <- function() {   ini({     tKA <- 0.25     tCL <- 3.75     tV <- 72.8     Favail <- fix(0.9)     eta.ka ~ 0.09     eta.cl ~ 0.25 ^ 2     eta.v ~ 0.09     prop.sd <- sqrt(0.04)     add.sd <- sqrt(0.0025)   })   model({     ka <- tKA * exp(eta.ka)     v <- tV * exp(eta.v)     cl <- tCL * exp(eta.cl)     d/dt(depot) <- -ka * depot     d/dt(central) <- ka * depot - cl / v * central     cp <- central / v     f(depot) <- DOSE * Favail     cp ~ add(add.sd) + prop(prop.sd)   }) }  f <- f() # compile/check nlmixr2/rxode2 model   # Create a PopED database for `nlmixr2`: poped_db_ode_babelmixr2 <- nlmixr(f, e, \"poped\",                                   popedControl(a=list(c(DOSE=20),                                                       c(DOSE=40)),                                                maxa=c(DOSE=200),                                                mina=c(DOSE=0))) #> ℹ groupsize should be specified; but for now assuming 20 #> ℹ assuming group size m=2 #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #>  #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/PopED.html","id":"popeds-ff_fun-from-babelmixr2","dir":"Articles","previous_headings":"babelmixr2 ODE solution > Getting PopED functions from nlmixr2/rxode2 ui function","what":"PopED’s ff_fun from babelmixr2","title":"PopED","text":"function run generate predictions: things note function: model changes based number time-points requested. case 5 since 5 design points design . babelmixr2 specific functions : babelmixr2::popedMultipleEndpointParam, indexes time input model_input make sure input matches requested (many PopED functions use match.time bit similar). .popedRxRunSetup/.popedRxRunFullSetupMe runs rxode2 setup including loading data model memory (bit different depending number time points using) .popedSolveIdME/.popedSolveIdME2 solves rxode2 model uses indexes give solve used model.","code":"# The ff_fun can be retrieved from the ui with f$popedFfFun f$popedFfFun #> function (model_switch, xt, p, poped.db)  #> { #>     .xt <- drop(xt) #>     .id <- p[1] #>     .u <- .xt #>     .lu <- length(.u) #>     .totn <- length(.xt) #>     if (.lu <= 5L) { #>         poped.db <- .popedRxRunSetup(poped.db) #>         .p <- babelmixr2::popedMultipleEndpointParam(p, .u, model_switch,  #>             5L, poped.db$babelmixr2$optTime) #>         .ret <- try(.popedSolveIdME(.p, .u, .xt, model_switch,  #>             1L, .id - 1, .totn), silent = TRUE) #>     } #>     else if (.lu > 5L) { #>         .p <- p[-1] #>         poped.db <- .popedRxRunFullSetupMe(poped.db, .xt, model_switch) #>         .ret <- try(.popedSolveIdME2(.p, .u, .xt, model_switch,  #>             1L, .id - 1, .totn), silent = TRUE) #>     } #>     return(list(f = matrix(.ret$rx_pred_, ncol = 1), poped.db = poped.db)) #> } #> <environment: 0x55f4b43b7388>"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/PopED.html","id":"rxode2-models-generated-from-babelmixr2","dir":"Articles","previous_headings":"babelmixr2 ODE solution > Getting PopED functions from nlmixr2/rxode2 ui function","what":"rxode2 models generated from babelmixr2","title":"PopED","text":"describing , can also see 2 rxode2 models generated PopED database. can see inside PopED database well. first model uses model times solve arbitrary times based design: can also see model used solving scenarios number time points greater design specification: can also see models identical exception requesting modeled times. can see base/core rxode2 model form UI :","code":"summary(poped_db_ode_babelmixr2$babelmixr2$modelMT) #> rxode2 3.0.4.9000 model named rx_4a856dba468525f205787e87eb57be6d model (✔ ready).  #> DLL: /tmp/RtmpBrfbBa/rxode2/rx_4a856dba468525f205787e87eb57be6d__.rxd/rx_4a856dba468525f205787e87eb57be6d_.so #> NULL #>  #> Calculated Variables: #> [1] \"rx_pred_\" \"rx_r_\"    #> ── rxode2 Model Syntax ── #> rxode2({ #>     param(rx__tKA, rx__tCL, rx__tV, rx__eta.ka, rx__eta.v, rx__eta.cl,  #>         DOSE, rxXt_1, rxXt_2, rxXt_3, rxXt_4, rxXt_5) #>     ka ~ rx__tKA * exp(rx__eta.ka) #>     v ~ rx__tV * exp(rx__eta.v) #>     cl ~ rx__tCL * exp(rx__eta.cl) #>     d/dt(depot) = -ka * depot #>     d/dt(central) = ka * depot - cl/v * central #>     cp ~ central/v #>     f(depot) = DOSE * 0.9 #>     rx_yj_ ~ 2 #>     rx_lambda_ ~ 1 #>     rx_low_ ~ 0 #>     rx_hi_ ~ 1 #>     rx_pred_f_ ~ cp #>     rx_pred_ = rx_pred_f_ #>     rx_r_ = (0.05)^2 + (rx_pred_f_)^2 * (0.2)^2 #>     mtime(rxXt_1_v) ~ rxXt_1 #>     mtime(rxXt_2_v) ~ rxXt_2 #>     mtime(rxXt_3_v) ~ rxXt_3 #>     mtime(rxXt_4_v) ~ rxXt_4 #>     mtime(rxXt_5_v) ~ rxXt_5 #> }) summary(poped_db_ode_babelmixr2$babelmixr2$modelF) #> rxode2 3.0.4.9000 model named rx_a626a2f66c099660260e63bc3c231517 model (✔ ready).  #> DLL: /tmp/RtmpBrfbBa/rxode2/rx_a626a2f66c099660260e63bc3c231517__.rxd/rx_a626a2f66c099660260e63bc3c231517_.so #> NULL #>  #> Calculated Variables: #> [1] \"rx_pred_\" \"rx_r_\"    #> ── rxode2 Model Syntax ── #> rxode2({ #>     param(rx__tKA, rx__tCL, rx__tV, rx__eta.ka, rx__eta.v, rx__eta.cl,  #>         DOSE) #>     ka ~ rx__tKA * exp(rx__eta.ka) #>     v ~ rx__tV * exp(rx__eta.v) #>     cl ~ rx__tCL * exp(rx__eta.cl) #>     d/dt(depot) = -ka * depot #>     d/dt(central) = ka * depot - cl/v * central #>     cp ~ central/v #>     f(depot) = DOSE * 0.9 #>     rx_yj_ ~ 2 #>     rx_lambda_ ~ 1 #>     rx_low_ ~ 0 #>     rx_hi_ ~ 1 #>     rx_pred_f_ ~ cp #>     rx_pred_ = rx_pred_f_ #>     rx_r_ = (0.05)^2 + (rx_pred_f_)^2 * (0.2)^2 #> }) f$popedRxmodelBase #> [[1]] #> ka ~ rx__tKA * exp(rx__eta.ka) #>  #> [[2]] #> v ~ rx__tV * exp(rx__eta.v) #>  #> [[3]] #> cl ~ rx__tCL * exp(rx__eta.cl) #>  #> [[4]] #> d/dt(depot) <- -ka * depot #>  #> [[5]] #> d/dt(central) <- ka * depot - cl/v * central #>  #> [[6]] #> cp ~ central/v #>  #> [[7]] #> f(depot) <- DOSE * rx__Favail #>  #> [[8]] #> rx_yj_ ~ 2 #>  #> [[9]] #> rx_lambda_ ~ 1 #>  #> [[10]] #> rx_low_ ~ 0 #>  #> [[11]] #> rx_hi_ ~ 1 #>  #> [[12]] #> rx_pred_f_ ~ cp #>  #> [[13]] #> rx_pred_ <- rx_pred_f_ #>  #> [[14]] #> rx_r_ <- (0.05)^2 + (rx_pred_f_)^2 * (0.2)^2"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/PopED.html","id":"popeds-fg_fun","dir":"Articles","previous_headings":"babelmixr2 ODE solution > Getting PopED functions from nlmixr2/rxode2 ui function","what":"PopED’s fg_fun","title":"PopED","text":"babelmixr2 also generates PopEDs fg_fun, translates covariates parameters parameters required ff_fun used solving rxode2 model.","code":"# You can see the PopED fg_fun from the model UI with # f$popedFgFun: f$popedFgFun #> function (rxPopedX, rxPopedA, bpop, b, rxPopedBocc)  #> { #>     rxPopedDn <- dimnames(rxPopedA) #>     rxPopedA <- as.vector(rxPopedA) #>     if (length(rxPopedDn[[1]]) == length(rxPopedA)) { #>         names(rxPopedA) <- rxPopedDn[[1]] #>     } #>     else if (length(rxPopedDn[[2]]) == length(rxPopedA)) { #>         names(rxPopedA) <- rxPopedDn[[2]] #>     } #>     ID <- setNames(rxPopedA[1], NULL) #>     DOSE <- setNames(rxPopedA[\"DOSE\"], NULL) #>     tKA <- bpop[1] #>     tCL <- bpop[2] #>     tV <- bpop[3] #>     Favail <- bpop[4] #>     eta.ka <- b[1] #>     eta.v <- b[3] #>     eta.cl <- b[2] #>     rx__tKA <- tKA #>     rx__tCL <- tCL #>     rx__tV <- tV #>     rx__Favail <- Favail #>     rx__eta.ka <- eta.ka #>     rx__eta.v <- eta.v #>     rx__eta.cl <- eta.cl #>     c(ID = ID, rx__tKA = setNames(rx__tKA, NULL), rx__tCL = setNames(rx__tCL,  #>         NULL), rx__tV = setNames(rx__tV, NULL), rx__Favail = setNames(rx__Favail,  #>         NULL), rx__eta.ka = setNames(rx__eta.ka, NULL), rx__eta.v = setNames(rx__eta.v,  #>         NULL), rx__eta.cl = setNames(rx__eta.cl, NULL), DOSE = setNames(DOSE,  #>         NULL)) #> } #> <environment: 0x55f4b2b15820>"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/PopED.html","id":"popeds-error-function-ferror_fun","dir":"Articles","previous_headings":"babelmixr2 ODE solution > Getting PopED functions from nlmixr2/rxode2 ui function","what":"PopED’s error function fError_fun","title":"PopED","text":"can see babelmixr2 generated error function well : One really important note keep mind PopED works variances instead standard deviations (key difference nlmixr2 PopED). means exported model babelmixr2 operates variances instead standard deviations care must taken using values misinterpret two. export also tries flag make easier remember.","code":"f$popedFErrorFun #> function (model_switch, xt, parameters, epsi, poped.db)  #> { #>     rxReturnArgs <- do.call(poped.db$model$ff_pointer, list(model_switch,  #>         xt, parameters, poped.db)) #>     rxF <- rxReturnArgs[[1]] #>     rxPoped.db <- rxReturnArgs[[2]] #>     rxErr1 <- rxF * (1 + epsi[, 1]) + epsi[, 2] #>     return(list(y = rxErr1, poped.db = rxPoped.db)) #> } #> <environment: 0x55f4afc2d640>"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/PopED.html","id":"other-parameters-generated-by-poped","dir":"Articles","previous_headings":"babelmixr2 ODE solution > Getting PopED functions from nlmixr2/rxode2 ui function","what":"Other parameters generated by PopED","title":"PopED","text":"rest parameters generated conjunction popedControl().","code":"f$popedBpop # PopED bpop #>    tKA    tCL     tV Favail  #>   0.25   3.75  72.80   0.90 f$popedNotfixedBpop # PopED notfixed_bpop #> [1] 1 1 1 0 f$popedD # PopED d #> eta.ka eta.cl  eta.v  #> 0.0900 0.0625 0.0900 f$popedNotfixedD # PopED notfixed_d #> NULL f$popedCovd # PopED covd #> NULL f$popedNotfixedCovd # PopED notfixed_covd #> NULL f$popedSigma # PopED sigma (variance is exported, not SD) #> prop.var  add.var  #>   0.0400   0.0025 f$popedNotfixedSigma # PopED notfixed_sigma #> prop.var  add.var  #>        1        1"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/PopED.html","id":"linear-compartment-models-in-babelmixr2","dir":"Articles","previous_headings":"","what":"linear compartment models in babelmixr2","title":"PopED","text":"can also specify models using linCmt() solutions :","code":"f2 <- function() {   ini({     tV <- 72.8     tKA <- 0.25     tCL <- 3.75     Favail <- fix(0.9)     eta.ka ~ 0.09     eta.cl ~ 0.25 ^ 2     eta.v ~ 0.09     prop.sd <- sqrt(0.04)     add.sd <- fix(sqrt(5e-6))   })   model({     ka <- tKA * exp(eta.ka)     v <- tV * exp(eta.v)     cl <- tCL * exp(eta.cl)     cp <- linCmt()     f(depot) <- DOSE     cp ~ add(add.sd) + prop(prop.sd)   }) }  poped_db_analytic_babelmixr2 <- nlmixr(f, e,                                        popedControl(a=list(c(DOSE=20),                                                            c(DOSE=40)),                                                     maxa=c(DOSE=200),                                                     mina=c(DOSE=0))) #> ℹ infer estimation `poped` from control #> ℹ groupsize should be specified; but for now assuming 20 #> ℹ assuming group size m=2"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/PopED.html","id":"comparing-method-to-the-speed-of-other-methods","dir":"Articles","previous_headings":"","what":"Comparing method to the speed of other methods","title":"PopED","text":"Note babelmixr2 ode solution fastest ode solver comparison. Among things, model loaded memory need setup time. (benchmarks, mrgsolve, PKPDsim implementations PopED’s website included). Also , speed tools reasonable. opinion, benefit babelmixr2 interface PopED simplicity using nlmixr2 / rxode2 functional models fits directly PopED without relying conversions. interface bit different traditional PopED interface, requires design data-set well popedControl() setup PopED database run PopED tasks. traditionally nlmixr2 takes dataset, “estimation” method controls change estimation method options. babelmixr2 adopts paradigm model, data, control applied PopED. allow easy translation systems. easier translation, hopefully optimal design clinical trials easier achieve.","code":"library(ggplot2) library(microbenchmark)  compare <- microbenchmark(   evaluate_design(poped_db_analytic),   evaluate_design(poped_db_analytic_babelmixr2),   evaluate_design(poped_db_ode_babelmixr2),   evaluate_design(poped_db_ode_mrg),   evaluate_design(poped_db_ode_pkpdsim),   evaluate_design(poped_db_ode_rx),   times = 100L)   autoplot(compare) + theme_bw()"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/PopED.html","id":"key-notes-to-keep-in-mind","dir":"Articles","previous_headings":"","what":"Key notes to keep in mind","title":"PopED","text":"babelmixr2 loads models memory needs keep track model loaded. help need use babel.poped.database place create.poped.database modifying babelmixr2 generated PopED databases. isn’t done, chance model loaded expected loaded model may either crash R possibly give incorrect results. babelmixr2 translates error components variances instead standard deviations nlmixr2/rxode2 model covariances omega specification, identified D[#,#] PopED output. see numbers refer helpful see name translations $popedD. Depending options, babelmixr2 may literally fix model components, means indexes may different expect. best way get correct index use babelmixr2 function babelBpopIdx() useful using PopED babelmixr2 uses model times creating PopED databases; therefore models modeling times used translation babelmixr2 yet support inter-occasion variability models.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/articles/PopED.html","id":"where-to-find-more-examples","dir":"Articles","previous_headings":"Key notes to keep in mind","what":"Where to find more examples","title":"PopED","text":"examples PopED converted work babelmixr2 available package GitHub","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/articles/new-estimation.html","id":"create-a-nlmixr2est-method","dir":"Articles","previous_headings":"","what":"Create a nlmixr2Est() method","title":"Creating a New Estimation Method","text":"method input environment nlmixr2est UI object (see ?nlmixr2Est). output fit object.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/articles/new-estimation.html","id":"create-a-control-method","dir":"Articles","previous_headings":"","what":"Create a control method","title":"Creating a New Estimation Method","text":"control method gives access controls required estimation.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/articles/running-monlix.html","id":"step-0-what-do-you-need-to-do-to-have-nlmixr2-run-monolix-from-a-nlmixr2-model","dir":"Articles","previous_headings":"","what":"Step 0: What do you need to do to have nlmixr2 run Monolix from a nlmixr2 model","title":"Running Monolix","text":"use Monolix nlmixr2, need change data nlmixr2 dataset. babelmixr2 heavy lifting . need setup run Monolix. setup lixoftConnectors package Monolix, setup needed. Instead run Monolix command line grid processing (example) can figure command run Monolix (often useful use full command path set options, ie options(\"babelmixr2.monolix\"=\"monolix\") use monolixControl(runCommand=\"monolix\"). needed, prefer options() method since need set . also function prefer (cover using function ).","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/articles/running-monlix.html","id":"step-1-run-a-nlmixr2-in-monolix","dir":"Articles","previous_headings":"","what":"Step 1: Run a nlmixr2 in Monolix","title":"Running Monolix","text":"Lets take classic warfarin example. model use nlmixr2 vignettes : monolix run, can run nlmixr2 model using Monolix new estimation method: fit issues informational tidbit - monolix parameter history needs exported charts, please export charts automatically generated well lixoftConnectors package generated recent version Monolix. don’t information important parameter history plots imported see plots. Just like NONMEM translation, monolixControl() modelName helps control output directory Monolix (specified babelmixr2 tries guess based model name based input). Printing nlmixr2 fit see: particular interest comparison Monolix predictions nlmixr predictions. case, believe also imply models predicting thing. Note model predictions close NONMEM Monolix use lsoda ODE solver. Hence small deviation expected, still gives validated Monolix model.","code":"pk.turnover.emax3 <- function() {   ini({     tktr <- log(1)     tka <- log(1)     tcl <- log(0.1)     tv <- log(10)     ##     eta.ktr ~ 1     eta.ka ~ 1     eta.cl ~ 2     eta.v ~ 1     prop.err <- 0.1     pkadd.err <- 0.1     ##     temax <- logit(0.8)     tec50 <- log(0.5)     tkout <- log(0.05)     te0 <- log(100)     ##     eta.emax ~ .5     eta.ec50  ~ .5     eta.kout ~ .5     eta.e0 ~ .5     ##     pdadd.err <- 10   })   model({     ktr <- exp(tktr + eta.ktr)     ka <- exp(tka + eta.ka)     cl <- exp(tcl + eta.cl)     v <- exp(tv + eta.v)     emax = expit(temax+eta.emax)     ec50 =  exp(tec50 + eta.ec50)     kout = exp(tkout + eta.kout)     e0 = exp(te0 + eta.e0)     ##     DCP = center/v     PD=1-emax*DCP/(ec50+DCP)     ##     effect(0) = e0     kin = e0*kout     ##     d/dt(depot) = -ktr * depot     d/dt(gut) =  ktr * depot -ka * gut     d/dt(center) =  ka * gut - cl / v * center     d/dt(effect) = kin*PD -kout*effect     ##     cp = center / v     cp ~ prop(prop.err) + add(pkadd.err)     effect ~ add(pdadd.err) | pca   }) } fit <- nlmixr(pk.turnover.emax3, nlmixr2data::warfarin, \"monolix\",                               monolixControl(modelName=\"pk.turnover.emax3\")) #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ℹ assuming monolix is running because 'pk.turnover.emax3-monolix.txt' is present #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → finding duplicate expressions in EBE model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → optimizing duplicate expressions in EBE model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → compiling EBE model... #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 27560 #> ℹ monolix parameter history needs exported charts, please export charts fit #> ── nlmixr² monolix ver 2021R1 ── #>  #>              OBJF      AIC      BIC Log-likelihood Condition#(Cov) #> monolix  1522.704 2448.398 2527.819      -1205.199        2203.836 #>          Condition#(Cor) #> monolix         2.697324 #>  #> ── Time (sec fit$time): ── #>  #>          setup table compress  other #> elapsed 0.0028 0.135    0.006 4.3712 #>  #> ── Population Parameters (fit$parFixed or fit$parFixedDf): ── #>  #>              Est.     SE     %RSE Back-transformed(95%CI) BSV(CV% or SD) #> tktr        0.218  0.179       82      1.24 (0.876, 1.77)           84.0 #> tka       0.00533  0.117 2.19e+03        1.01 (0.8, 1.26)           48.6 #> tcl         -2.01 0.0518     2.58    0.135 (0.122, 0.149)           28.5 #> tv           2.04 0.0438     2.14       7.73 (7.09, 8.42)           22.6 #> prop.err   0.0986                                  0.0986                #> pkadd.err   0.533                                   0.533                #> temax        4.46  0.527     11.8    0.989 (0.969, 0.996)          0.380 #> tec50      0.0786 0.0889      113      1.08 (0.909, 1.29)           47.8 #> tkout       -2.94 0.0261    0.888  0.053 (0.0503, 0.0558)           7.87 #> te0          4.57 0.0114    0.249       96.7 (94.5, 98.9)           5.08 #> pdadd.err    3.79                                    3.79                #>           Shrink(SD)% #> tktr           47.9%  #> tka            48.9%  #> tcl            1.25%  #> tv             6.09%  #> prop.err              #> pkadd.err             #> temax          91.9%  #> tec50          6.29%  #> tkout          36.6%  #> te0            19.9%  #> pdadd.err             #>   #>   Covariance Type (fit$covMethod): MonolixLin #>   No correlations in between subject variability (BSV) matrix #>   Full BSV covariance (fit$omega) or correlation (fit$omegaR; diagonals=SDs)  #>   Distribution stats (mean/skewness/kurtosis/p-value) available in fit$shrink  #>   Censoring (fit$censInformation): No censoring #>   Minimization message (fit$message):   #>     IPRED relative difference compared to Monolix IPRED: 0.09%; 95% percentile: (0.01%,0.49%); rtol=0.000941 #>     PRED relative difference compared to Monolix PRED: 0.04%; 95% percentile: (0%,0.2%); rtol=0.000428 #>     IPRED absolute difference compared to Monolix IPRED: atol=0.00911; 95% percentile: (0.000493, 0.0928) #>     PRED absolute difference compared to Monolix PRED: atol=0.000428; 95% percentile: (3.14e-07, 0.203) #>     monolix model: 'pk.turnover.emax3-monolix.mlxtran'  #>  #> ── Fit Data (object fit is a modified tibble): ── #> # A tibble: 483 × 35 #>   ID     TIME CMT      DV  PRED   RES IPRED   IRES  IWRES eta.ktr eta.ka eta.cl #>   <fct> <dbl> <fct> <dbl> <dbl> <dbl> <dbl>  <dbl>  <dbl>   <dbl>  <dbl>  <dbl> #> 1 1       0.5 cp      0    1.40 -1.40 0.500 -0.500 -0.934  -0.638 -0.447  0.689 #> 2 1       1   cp      1.9  3.94 -2.04 1.62   0.284  0.511  -0.638 -0.447  0.689 #> 3 1       2   cp      3.3  8.30 -5.00 4.29  -0.987 -1.45   -0.638 -0.447  0.689 #> # ℹ 480 more rows #> # ℹ 23 more variables: eta.v <dbl>, eta.emax <dbl>, eta.ec50 <dbl>, #> #   eta.kout <dbl>, eta.e0 <dbl>, cp <dbl>, depot <dbl>, gut <dbl>, #> #   center <dbl>, effect <dbl>, ktr <dbl>, ka <dbl>, cl <dbl>, v <dbl>, #> #   emax <dbl>, ec50 <dbl>, kout <dbl>, e0 <dbl>, DCP <dbl>, PD <dbl>, #> #   kin <dbl>, tad <dbl>, dosenum <dbl>"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/running-monlix.html","id":"optional-step-2-add-conditional-weighted-residualsfocei-objf-to-monolix","dir":"Articles","previous_headings":"","what":"Optional Step 2: Add conditional weighted residuals/focei objf to Monolix","title":"Running Monolix","text":"case NONMEM, gives things available Monolix, like adding conditional weighted residuals: add nlmixr’s CWRES well adding nlmixr2 FOCEi objective function now objective function compared based assumptions, compare performance Monolix NONMEM based objective function. fair, objective function values must always used caution. model performs predicts data far valuable.","code":"fit <- addCwres(fit) #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → calculate jacobian #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → calculate sensitivities #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → calculate ∂(f)/∂(η) #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → calculate ∂(R²)/∂(η) #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → finding duplicate expressions in inner model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → optimizing duplicate expressions in inner model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → finding duplicate expressions in EBE model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → optimizing duplicate expressions in EBE model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → compiling inner model... #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> → finding duplicate expressions in FD model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → optimizing duplicate expressions in FD model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → compiling EBE model... #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> → compiling events FD model... #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> → Calculating residuals/tables #> ✔ done"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/running-monlix.html","id":"optional-step-3-use-nlmixr2-for-vpc-reporting-etc-","dir":"Articles","previous_headings":"","what":"Optional Step 3: Use nlmixr2 for vpc, reporting, etc.","title":"Running Monolix","text":"Also since nlmixr2 object easy perform VPC :","code":"v1s <- vpcPlot(fit, show=list(obs_dv=TRUE), scales=\"free_y\") +   ylab(\"Warfarin Cp [mg/L] or PCA\") +   xlab(\"Time [h]\") #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’  v2s <- vpcPlot(fit, show=list(obs_dv=TRUE), pred_corr = TRUE, scales=\"free_y\") +   ylab(\"Prediction Corrected Warfarin Cp [mg/L] or PCA\") +   xlab(\"Time [h]\")  v1s v2s"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/running-monlix.html","id":"notes-about-monolix-data-translation","dir":"Articles","previous_headings":"","what":"Notes about Monolix data translation","title":"Running Monolix","text":"input dataset expected compatible rxode2 nlmixr2. dataset converted Monolix format: combination CMT Dose type creates unique ADM variable. ADM definition saved monolix model file babelmixr2 creates macro describing compartment, ie compartment(cmt=#, amount=stateName) babelmixr2 also creates macro type dosing: Bolus/infusion uses depot() adds modeled lag time (Tlag) bioavailability (p) specified Modeled rate uses depot() Tk0=amtDose/rate. babelmixr2 also adds modeled lag time (Tlag) bioavailability (p) specified Modeled duration uses depot() Tk0=dur, also add adds modeled lag time (Tlag) bioavailability (p) specified Turning compartment uses empty macro","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/articles/running-nonmem.html","id":"step-0-what-do-you-need-to-do-to-have-nlmixr2-run-nonmem-from-a-nlmixr2-model","dir":"Articles","previous_headings":"","what":"Step 0: What do you need to do to have nlmixr2 run NONMEM from a nlmixr2 model","title":"Running NONMEM with nlmixr2","text":"use NONMEM nlmixr, need change data nlmixr2 dataset. babelmixr2 heavy lifting . need setup run NONMEM. many cases easy; simply figure command run NONMEM (often useful use full command path). can set options(\"babelmixr2.nonmem\"=\"nmfe743\") use nonmemControl(runCommand=\"nmfe743\"). prefer options() method since need set . also function prefer (cover using function ).","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/articles/running-nonmem.html","id":"step-1-run-a-nlmixr2-in-nonmem","dir":"Articles","previous_headings":"","what":"Step 1: Run a nlmixr2 in NONMEM","title":"Running NONMEM with nlmixr2","text":"Lets take classic warfarin example start comparison. model use nlmixr2 vignettes : Now can run nlmixr2 model using NONMEM simply can run directly: way run ordinary nlmixr2 model, simply new estimation method \"nonmem\" new controller (nonmemControl()) setup options estimation. options nonmemControl() modelName helps control output directory NONMEM (specified babelmixr2 tries guess based model name based input). try , see NONMEM fails rounding errors. standard approach changing sigdig, sigl, tol etc, get successful NONMEM model convergence, course supported. babelmixr2 can .","code":"library(babelmixr2) pk.turnover.emax3 <- function() {   ini({     tktr <- log(1)     tka <- log(1)     tcl <- log(0.1)     tv <- log(10)     ##     eta.ktr ~ 1     eta.ka ~ 1     eta.cl ~ 2     eta.v ~ 1     prop.err <- 0.1     pkadd.err <- 0.1     ##     temax <- logit(0.8)     tec50 <- log(0.5)     tkout <- log(0.05)     te0 <- log(100)     ##     eta.emax ~ .5     eta.ec50  ~ .5     eta.kout ~ .5     eta.e0 ~ .5     ##     pdadd.err <- 10   })   model({     ktr <- exp(tktr + eta.ktr)     ka <- exp(tka + eta.ka)     cl <- exp(tcl + eta.cl)     v <- exp(tv + eta.v)     emax = expit(temax+eta.emax)     ec50 =  exp(tec50 + eta.ec50)     kout = exp(tkout + eta.kout)     e0 = exp(te0 + eta.e0)     ##     DCP = center/v     PD=1-emax*DCP/(ec50+DCP)     ##     effect(0) = e0     kin = e0*kout     ##     d/dt(depot) = -ktr * depot     d/dt(gut) =  ktr * depot -ka * gut     d/dt(center) =  ka * gut - cl / v * center     d/dt(effect) = kin*PD -kout*effect     ##     cp = center / v     cp ~ prop(prop.err) + add(pkadd.err)     effect ~ add(pdadd.err) | pca   }) } try(nlmixr(pk.turnover.emax3, nlmixr2data::warfarin, \"nonmem\",            nonmemControl(readRounding=FALSE, modelName=\"pk.turnover.emax3\")),     silent=TRUE) #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #>  #>  #>  WARNINGS AND ERRORS (IF ANY) FOR PROBLEM    1 #>  #>  (WARNING  2) NM-TRAN INFERS THAT THE DATA ARE POPULATION. #>  #>  #> 0MINIMIZATION TERMINATED #>  DUE TO ROUNDING ERRORS (ERROR=134) #>  NO. OF FUNCTION EVALUATIONS USED:     1088 #>  NO. OF SIG. DIGITS UNREPORTABLE #> 0PARAMETER ESTIMATE IS NEAR ITS BOUNDARY #>  #> nonmem model: 'pk.turnover.emax3-nonmem/pk.turnover.emax3.nmctl' #> → terminated with rounding errors, can force nlmixr2/rxode2 to read with nonmemControl(readRounding=TRUE) #> Error : nonmem minimization not successful"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/running-nonmem.html","id":"optional-step-2-recover-a-failed-nonmem-run","dir":"Articles","previous_headings":"","what":"Optional Step 2: Recover a failed NONMEM run","title":"Running NONMEM with nlmixr2","text":"One approaches ignore rounding errors occurred read nlmixr2 anyway: may see work happening expected need already completed model. reading NONMEM model, babelmixr2 grabs: NONMEM’s objective function value NONMEM’s covariance (available) NONMEM’s optimization history NONMEM’s final parameter estimates (including ETAs) NONMEM’s PRED IPRED values (validation purposes) used solve ODEs came nlmixr2 optimization procedure. means can compare IPRED PRED values nlmixr2/rxode2 know immediately model validates. similar procedure Kyle Baron advocates validating NONMEM model mrgsolve model (see https://mrgsolve.org/blog/posts/2022-05-validate-translation/ https://mrgsolve.org/blog/posts/2023-update-validation.html), advantage method need simply write one model get validated roxde2/nlmixr2 model. case can see validation print fit object: shows preds ipreds match NONMEM nlmixr2 quite well.","code":"# Can still load the model to get information (possibly pipe) and create a new model f <- nlmixr(pk.turnover.emax3, nlmixr2data::warfarin, \"nonmem\",             nonmemControl(readRounding=TRUE, modelName=\"pk.turnover.emax3\")) #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → finding duplicate expressions in EBE model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → optimizing duplicate expressions in EBE model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → compiling EBE model... #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> rxode2 3.0.4.9000 using 2 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 27560 #> → compress parHistData in nlmixr2 object, save 5536 print(f) #> ── nlmixr² nonmem ver 7.4.3 ── #>  #>                 OBJF      AIC      BIC Log-likelihood Condition#(Cov) #> nonmem focei 1326.91 2252.605 2332.025      -1107.302              NA #>              Condition#(Cor) #> nonmem focei              NA #>  #> ── Time (sec $time): ── #>  #>            setup table compress NONMEM #> elapsed 0.031919 0.092    0.011 320.27 #>  #> ── Population Parameters ($parFixed or $parFixedDf): ── #>  #>                Est. Back-transformed BSV(CV% or SD) Shrink(SD)% #> tktr       6.24e-07                1           86.5      59.8%  #> tka       -3.01e-06                1           86.5      59.8%  #> tcl              -2            0.135           28.6      1.34%  #> tv             2.05             7.78           22.8      6.44%  #> prop.err     0.0986           0.0986                            #> pkadd.err     0.512            0.512                            #> temax          6.42            0.998        0.00707      100.%  #> tec50         0.141             1.15           45.0      6.06%  #> tkout         -2.95           0.0522           9.16      32.4%  #> te0            4.57             96.6           5.24      18.1%  #> pdadd.err      3.72             3.72                            #>   #>   No correlations in between subject variability (BSV) matrix #>   Full BSV covariance ($omega) or correlation ($omegaR; diagonals=SDs)  #>   Distribution stats (mean/skewness/kurtosis/p-value) available in $shrink  #>   Information about run found ($runInfo): #>    • NONMEM terminated due to rounding errors, but reading into nlmixr2/rxode2 anyway  #>   Censoring ($censInformation): No censoring #>   Minimization message ($message):   #>      #>  #>  WARNINGS AND ERRORS (IF ANY) FOR PROBLEM    1 #>  #>  (WARNING  2) NM-TRAN INFERS THAT THE DATA ARE POPULATION. #>  #>      #> 0MINIMIZATION TERMINATED #>  DUE TO ROUNDING ERRORS (ERROR=134) #>  NO. OF FUNCTION EVALUATIONS USED:     1088 #>  NO. OF SIG. DIGITS UNREPORTABLE #> 0PARAMETER ESTIMATE IS NEAR ITS BOUNDARY #>  #>     IPRED relative difference compared to Nonmem IPRED: 0%; 95% percentile: (0%,0%); rtol=6.36e-06 #>     PRED relative difference compared to Nonmem PRED: 0%; 95% percentile: (0%,0%); rtol=6.08e-06 #>     IPRED absolute difference compared to Nonmem IPRED: 95% percentile: (2.53e-06, 0.000502); atol=7.15e-05 #>     PRED absolute difference compared to Nonmem PRED: 95% percentile: (3.79e-07,0.00321); atol=6.08e-06 #>     there are solving errors during optimization (see '$prderr') #>     nonmem model: 'pk.turnover.emax3-nonmem/pk.turnover.emax3.nmctl'  #>  #> ── Fit Data (object is a modified tibble): ── #> # A tibble: 483 × 35 #>   ID     TIME CMT      DV  PRED   RES IPRED   IRES  IWRES eta.ktr eta.ka eta.cl #>   <fct> <dbl> <fct> <dbl> <dbl> <dbl> <dbl>  <dbl>  <dbl>   <dbl>  <dbl>  <dbl> #> 1 1       0.5 cp      0    1.16 -1.16 0.444 -0.444 -0.864  -0.506 -0.506  0.699 #> 2 1       1   cp      1.9  3.37 -1.47 1.45   0.446  0.840  -0.506 -0.506  0.699 #> 3 1       2   cp      3.3  7.51 -4.21 3.96  -0.660 -1.03   -0.506 -0.506  0.699 #> # ℹ 480 more rows #> # ℹ 23 more variables: eta.v <dbl>, eta.emax <dbl>, eta.ec50 <dbl>, #> #   eta.kout <dbl>, eta.e0 <dbl>, cp <dbl>, depot <dbl>, gut <dbl>, #> #   center <dbl>, effect <dbl>, ktr <dbl>, ka <dbl>, cl <dbl>, v <dbl>, #> #   emax <dbl>, ec50 <dbl>, kout <dbl>, e0 <dbl>, DCP <dbl>, PD <dbl>, #> #   kin <dbl>, tad <dbl>, dosenum <dbl>"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/running-nonmem.html","id":"optional-step-3-use-nlmixr2-to-help-understand-why-nonmem-failed","dir":"Articles","previous_headings":"","what":"Optional Step 3: Use nlmixr2 to help understand why NONMEM failed","title":"Running NONMEM with nlmixr2","text":"Since nlmixr2 fit, can interesting things fit couldn’t NONMEM even another translator. example, wanted add covariance step can getVarCov(): nlmixr2 generous constitutes covariance step. r,s covariance matrix “” successful covariance step focei, system fall back methods necessary. covariance matrix r,s, regarded caution, can still give us clues things working NONMEM. examining fit, can see shrinkage high temax, tktr tka, dropped, making things likely converge NONMEM.","code":"getVarCov(f) #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → calculate jacobian #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → calculate sensitivities #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → calculate ∂(f)/∂(η) #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → finding duplicate expressions in inner model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → optimizing duplicate expressions in inner model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → finding duplicate expressions in EBE model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → optimizing duplicate expressions in EBE model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → compiling inner model... #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> → finding duplicate expressions in FD model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → optimizing duplicate expressions in FD model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → compiling EBE model... #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> → compiling events FD model... #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> calculating covariance matrix #> [====|====|====|====|====|====|====|====|====|====] 0:00:06 #> Warning in foceiFitCpp_(.ret): using R matrix to calculate covariance, can #> check sandwich or S matrix with $covRS and $covS #> Warning in foceiFitCpp_(.ret): gradient problems with covariance; see #> $scaleInfo #> → compress origData in nlmixr2 object, save 27560 #> Updated original fit object f #>                tktr           tka           tcl           tv         temax #> tktr   1.821078e-02 -1.512272e-02 -2.550343e-05 3.216116e-04  0.0015410335 #> tka   -1.512272e-02  1.815814e-02 -1.992622e-05 3.175474e-04  0.0010345827 #> tcl   -2.550343e-05 -1.992622e-05  2.477225e-04 1.181659e-05 -0.0008009162 #> tv     3.216116e-04  3.175474e-04  1.181659e-05 3.184497e-04  0.0010914727 #> temax  1.541033e-03  1.034583e-03 -8.009162e-04 1.091473e-03  7.5815740647 #> tec50  1.410716e-04  1.273505e-04 -3.578298e-04 1.229707e-04  0.0483191718 #> tkout  1.023011e-04  1.011022e-04 -9.757882e-05 1.188260e-04 -0.0189641465 #> te0    1.310259e-05  1.399880e-05 -9.833068e-06 1.232683e-05 -0.0004365713 #>               tec50         tkout           te0 #> tktr   0.0001410716  1.023011e-04  1.310259e-05 #> tka    0.0001273505  1.011022e-04  1.399880e-05 #> tcl   -0.0003578298 -9.757882e-05 -9.833068e-06 #> tv     0.0001229707  1.188260e-04  1.232683e-05 #> temax  0.0483191718 -1.896415e-02 -4.365713e-04 #> tec50  0.0018345990  1.544065e-04 -1.357629e-04 #> tkout  0.0001544065  6.320302e-04  5.220487e-05 #> te0   -0.0001357629  5.220487e-05  8.843897e-05"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/running-nonmem.html","id":"optional-step-4-use-model-piping-to-get-a-successful-nonmem-run","dir":"Articles","previous_headings":"","what":"Optional Step 4: Use model piping to get a successful NONMEM run","title":"Running NONMEM with nlmixr2","text":"use model piping remove parameters, new run start last model’s best estimates (saving bunch model development time). case, specify output directory pk.turnover.emax4 control get following: can see NONMEM run now successful validates rxode2 model : One thing emphasize: unlike translators, know immediately translation model validate. Hence can start process confidence - know immediately something wrong. related converting NONMEM nlmixr2 fit. Since nlmixr2 object easy perform VPC (true NONMEM models):","code":"f2 <- f %>% model(ktr <- exp(tktr)) %>%   model(ka <- exp(tka)) %>%   model(emax = expit(temax)) %>%   nlmixr(data=nlmixr2data::warfarin, est=\"nonmem\",          control=nonmemControl(readRounding=FALSE,                                modelName=\"pk.turnover.emax4\")) #> ! remove between subject variability `eta.ktr` #> ! remove between subject variability `eta.ka` #> ! remove between subject variability `eta.emax` #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → finding duplicate expressions in EBE model... #> [====|====|====|====|====|====|====|====|====|==== #> ====|====] 0:00:00 #> → optimizing duplicate expressions in EBE model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → compiling EBE model... #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 27560 #> → compress parHistData in nlmixr2 object, save 8800 f2 #> ── nlmixr² nonmem ver 7.4.3 ── #>  #>                  OBJF      AIC      BIC Log-likelihood Condition#(Cov) #> nonmem focei 1418.923 2338.618 2405.498      -1153.309    1.852796e+16 #>              Condition#(Cor) #> nonmem focei        18934770 #>  #> ── Time (sec f2$time): ── #>  #>            setup table compress NONMEM #> elapsed 0.003127 0.101    0.009 505.59 #>  #> ── Population Parameters (f2$parFixed or f2$parFixedDf): ── #>  #>                Est.       SE     %RSE     Back-transformed(95%CI) BSV(CV%) #> tktr       6.24e-07 9.05e-05 1.45e+04                    1 (1, 1)          #> tka       -3.57e-06 0.000153 4.29e+03                    1 (1, 1)          #> tcl           -1.99   0.0639      3.2         0.136 (0.12, 0.154)     27.6 #> tv             2.05     2.66      130      7.76 (0.042, 1.44e+03)     23.6 #> prop.err      0.161                                         0.161          #> pkadd.err     0.571                                         0.571          #> temax          9.98     4.96     49.7                1 (0.565, 1)          #> tec50         0.131     1.61 1.23e+03         1.14 (0.0489, 26.6)     43.6 #> tkout         -2.96     28.3      954 0.0517 (4.63e-26, 5.77e+22)     8.63 #> te0            4.57    0.411        9            96.7 (43.2, 217)     5.19 #> pdadd.err      3.59                                          3.59          #>           Shrink(SD)% #> tktr                  #> tka                   #> tcl            3.19%  #> tv             10.7%  #> prop.err              #> pkadd.err             #> temax                 #> tec50          7.12%  #> tkout          33.8%  #> te0            17.2%  #> pdadd.err             #>   #>   Covariance Type (f2$covMethod): nonmem.r,s #>   No correlations in between subject variability (BSV) matrix #>   Full BSV covariance (f2$omega) or correlation (f2$omegaR; diagonals=SDs)  #>   Distribution stats (mean/skewness/kurtosis/p-value) available in f2$shrink  #>   Censoring (f2$censInformation): No censoring #>   Minimization message (f2$message):   #>      #>  #>  WARNINGS AND ERRORS (IF ANY) FOR PROBLEM    1 #>  #>  (WARNING  2) NM-TRAN INFERS THAT THE DATA ARE POPULATION. #>  #>      #> 0MINIMIZATION SUCCESSFUL #>  HOWEVER, PROBLEMS OCCURRED WITH THE MINIMIZATION. #>  REGARD THE RESULTS OF THE ESTIMATION STEP CAREFULLY, AND ACCEPT THEM ONLY #>  AFTER CHECKING THAT THE COVARIANCE STEP PRODUCES REASONABLE OUTPUT. #>  NO. OF FUNCTION EVALUATIONS USED:     2391 #>  NO. OF SIG. DIGITS IN FINAL EST.:  4.1 #>  #>     IPRED relative difference compared to Nonmem IPRED: 0%; 95% percentile: (0%,0%); rtol=6.85e-06 #>     PRED relative difference compared to Nonmem PRED: 0%; 95% percentile: (0%,0%); rtol=6.45e-06 #>     IPRED absolute difference compared to Nonmem IPRED: 95% percentile: (2.89e-06, 0.000506); atol=7.19e-05 #>     PRED absolute difference compared to Nonmem PRED: 95% percentile: (5.14e-07,0.00318); atol=6.45e-06 #>     nonmem model: 'pk.turnover.emax4-nonmem/pk.turnover.emax4.nmctl'  #>  #> ── Fit Data (object f2 is a modified tibble): ── #> # A tibble: 483 × 32 #>   ID     TIME CMT      DV  PRED   RES IPRED   IRES IWRES eta.cl eta.v eta.ec50 #>   <fct> <dbl> <fct> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl> <dbl>    <dbl> #> 1 1       0.5 cp      0    1.16 -1.16 0.920 -0.920 -1.56  0.689 0.228    0.160 #> 2 1       1   cp      1.9  3.38 -1.48 2.68  -0.780 -1.09  0.689 0.228    0.160 #> 3 1       2   cp      3.3  7.53 -4.23 5.94  -2.64  -2.36  0.689 0.228    0.160 #> # ℹ 480 more rows #> # ℹ 20 more variables: eta.kout <dbl>, eta.e0 <dbl>, cp <dbl>, depot <dbl>, #> #   gut <dbl>, center <dbl>, effect <dbl>, ktr <dbl>, ka <dbl>, cl <dbl>, #> #   v <dbl>, emax <dbl>, ec50 <dbl>, kout <dbl>, e0 <dbl>, DCP <dbl>, PD <dbl>, #> #   kin <dbl>, tad <dbl>, dosenum <dbl> v1s <- vpcPlot(f2, show=list(obs_dv=TRUE), scales=\"free_y\") +   ylab(\"Warfarin Cp [mg/L] or PCA\") +   xlab(\"Time [h]\") #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’  v2s <- vpcPlot(f2, show=list(obs_dv=TRUE), pred_corr = TRUE, scales=\"free_y\") +   ylab(\"Prediction Corrected Warfarin Cp [mg/L] or PCA\") +   xlab(\"Time [h]\")   library()  v1s v2s"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/running-pknca.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Obtain initial estimates and unit conversions with PKNCA","text":"Initial estimates compartmental population PK model can obtained using babelmixr2 \"pknca\" estimation method. Also, central compartment scaling factor can auto-generated based units dosing, concentration measurement, desired volume distribution units, time. need perform NCA analysis hand; \"pknca\" estimation method perform NCA analysis using PKNCA package automatically. methods used converting NCA calculations parameter estimates described help nlmixr2Est.pknca().","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/articles/running-pknca.html","id":"initial-example","dir":"Articles","previous_headings":"","what":"Initial example","title":"Obtain initial estimates and unit conversions with PKNCA","text":"Initial model setup nlmixr2 model. must load babelmixr2 library nlmixr() function recognizes est = \"pknca\". use PKNCA get initial estimates, use est = \"pknca\" instead one nlmixr2 estimation methods. unit conversions, provide units control = pkncaControl() argument. Unit conversions supported units can automatically converted; mass/volume can converted mass/volume ratio, mass molar molar mass single mass--molar conversion factor. Now, prepared model updated initial estimates NCA results embedded. can see new model PKNCA estimates looking prepared$ui (model interpreted rxode2) prepared$nca (PKNCAresults object). Note new model, fixed effect initial estimates changed original values. residual error -subject variability unchanged. updated model, can perform estimation new model object, model created nlmixr2:","code":"library(babelmixr2) #> Loading required package: nlmixr2 #> Loading required package: nlmixr2data one.compartment <- function() {   ini({     tka <- log(1.57); label(\"Ka (1/hr)\")     tcl <- log(2.72); label(\"Cl (L/hr)\")     tv <- log(31.5); label(\"V (L)\")     eta.ka ~ 0.6     eta.cl ~ 0.3     eta.v ~ 0.1     add.sd <- 0.7; label(\"additive residual error (mg/L)\")   })   # and a model block with the error specification and model specification   model({     ka <- exp(tka + eta.ka)     cl <- exp(tcl + eta.cl)     vc <- exp(tv + eta.v)     d/dt(depot) <- -ka * depot     d/dt(center) <- ka * depot - cl / vc * center     cp <- center / vc     cp ~ add(add.sd)   }) } prepared <-   nlmixr2(     one.compartment,     data = theo_sd,     est = \"pknca\",     control = pkncaControl(concu = \"ng/mL\", doseu = \"mg\", timeu = \"hr\", volumeu = \"L\")   ) #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> Loading required namespace: testthat #> ℹ change initial estimate (0.89314878960486) and upper/lower bound (-3.50655789731998 to 3.72508541597241) of `tka` #> → significant model change detected #> → removed from model: '$getSplitModel' #> ℹ change initial estimate (8.41044546236311) and upper/lower bound (5.51439905878865 to 10.899462850803) of `tcl` #> ℹ change initial estimate (10.5377244826318) and upper/lower bound (7.94567233496473 to 13.1050053785005) of `tv` prepared$ui #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>        tka        tcl         tv     add.sd  #>  0.8931488  8.4104455 10.5377245  0.7000000  #>  #> Omega ($omega):  #>        eta.ka eta.cl eta.v #> eta.ka    0.6    0.0   0.0 #> eta.cl    0.0    0.3   0.0 #> eta.v     0.0    0.0   0.1 #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2           center #>  ── μ-referencing ($muRefTable): ──   #>   theta    eta level #> 1   tka eta.ka    id #> 2   tcl eta.cl    id #> 3    tv  eta.v    id #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         tka <- c(-3.50655789731998, 0.89314878960486, 3.72508541597241) #>         label(\"Ka (1/hr)\") #>         tcl <- c(5.51439905878865, 8.41044546236311, 10.899462850803) #>         label(\"Cl (L/hr)\") #>         tv <- c(7.94567233496473, 10.5377244826318, 13.1050053785005) #>         label(\"V (L)\") #>         add.sd <- c(0, 0.7) #>         label(\"additive residual error (mg/L)\") #>         eta.ka ~ 0.6 #>         eta.cl ~ 0.3 #>         eta.v ~ 0.1 #>     }) #>     model({ #>         ka <- exp(tka + eta.ka) #>         cl <- exp(tcl + eta.cl) #>         vc <- exp(tv + eta.v) #>         d/dt(depot) <- -ka * depot #>         d/dt(center) <- ka * depot - cl/vc * center #>         cp <- 1000 * center/vc #>         cp ~ add(add.sd) #>     }) #> }  knitr::knit_print(   summary(prepared$nca) ) #>  Interval Start Interval End  N AUClast (hr*ng/mL) Cmax (ng/mL) #>               0           24 12        74.6 [24.3]            . #>               0          Inf 12                  .  8.65 [17.0] #>           Tmax (hr) CL (based on AUClast) (mg/(hr*ng/mL)) #>                   .                           4.22 [23.0] #>  1.14 [0.630, 3.55]                                     . #>  Vss (based on AUClast) (mg/(ng/mL)) Half-life (hr) AUCinf,obs (hr*ng/mL) #>                          25.0 [18.5]              .                     . #>                                    .    8.18 [2.12]            115 [28.4] #>  Cmax (dose-normalized) ((ng/mL)/mg) #>                                    . #>                        0.0274 [18.1] #>  #> Caption: AUClast, Cmax, CL (based on AUClast), Vss (based on AUClast), AUCinf,obs, Cmax (dose-normalized): geometric mean and geometric coefficient of variation; Tmax: median and range; Half-life: arithmetic mean and standard deviation; N: number of subjects fit <- nlmixr(prepared, data = theo_sd, est = \"focei\", control = list(print = 0)) #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → calculate jacobian #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → calculate sensitivities #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → calculate ∂(f)/∂(η) #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → calculate ∂(R²)/∂(η) #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → finding duplicate expressions in inner model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → optimizing duplicate expressions in inner model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → finding duplicate expressions in EBE model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → optimizing duplicate expressions in EBE model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → compiling inner model... #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> → finding duplicate expressions in FD model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → optimizing duplicate expressions in FD model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → compiling EBE model... #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> → compiling events FD model... #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> rxode2 3.0.4.9000 using 2 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` #> calculating covariance matrix #> [====|====|====|====|====|====|====|====|====|====] 0:00:00  #> done #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 5952 #> → compress parHistData in nlmixr2 object, save 10632  fit #> ── nlmixr² FOCEi (outer: nlminb) ── #>  #>           OBJF      AIC      BIC Log-likelihood Condition#(Cov) Condition#(Cor) #> FOCEi 116.9548 373.5546 393.7342      -179.7773         66.5244        12.97786 #>  #> ── Time (sec fit$time): ── #>  #>            setup optimize covariance table compress   other #> elapsed 0.030476 0.515446   0.515448 0.075    0.204 7.64363 #>  #> ── Population Parameters (fit$parFixed or fit$parFixedDf): ── #>  #>                             Parameter  Est.     SE  %RSE #> tka                         Ka (1/hr) 0.469  0.224  47.6 #> tcl                         Cl (L/hr)  7.92 0.0929  1.17 #> tv                              V (L)  10.4 0.0602 0.581 #> add.sd additive residual error (mg/L) 0.697              #>              Back-transformed(95%CI) BSV(CV%) Shrink(SD)% #> tka                 1.6 (1.03, 2.48)     68.0    -0.666%  #> tcl     2.75e+03 (2.29e+03, 3.3e+03)     26.1      3.95%  #> tv     3.19e+04 (2.83e+04, 3.59e+04)     15.4      14.5%  #> add.sd                         0.697                      #>   #>   Covariance Type (fit$covMethod): r,s #>   No correlations in between subject variability (BSV) matrix #>   Full BSV covariance (fit$omega) or correlation (fit$omegaR; diagonals=SDs)  #>   Distribution stats (mean/skewness/kurtosis/p-value) available in fit$shrink  #>   Information about run found (fit$runInfo): #>    • gradient problems with initial estimate and covariance; see $scaleInfo  #>    • last objective function was not at minimum, possible problems in optimization  #>    • ETAs were reset to zero during optimization; (Can control by foceiControl(resetEtaP=.))  #>    • initial ETAs were nudged; (can control by foceiControl(etaNudge=., etaNudge2=))  #>   Censoring (fit$censInformation): No censoring #>   Minimization message (fit$message):   #>     false convergence (8)  #>   In an ODE system, false convergence may mean \"useless\" evaluations were performed. #>   See https://tinyurl.com/yyrrwkce #>   It could also mean the convergence is poor, check results before accepting fit #>   You may also try a good derivative free optimization: #>     nlmixr2(...,control=list(outerOpt=\"bobyqa\")) #>  #> ── Fit Data (object fit is a modified tibble): ── #> # A tibble: 132 × 22 #>   ID     TIME    DV  PRED    RES   WRES IPRED   IRES  IWRES CPRED   CRES  CWRES #>   <fct> <dbl> <dbl> <dbl>  <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl>  <dbl>  <dbl> #> 1 1      0     0.74  0     0.74   1.06   0     0.74   1.06   0     0.74   1.06  #> 2 1      0.25  2.84  3.27 -0.432 -0.234  3.84 -1.00  -1.44   3.23 -0.389 -0.185 #> 3 1      0.57  6.57  5.84  0.730  0.297  6.78 -0.215 -0.308  5.78  0.786  0.287 #> # ℹ 129 more rows #> # ℹ 10 more variables: eta.ka <dbl>, eta.cl <dbl>, eta.v <dbl>, depot <dbl>, #> #   center <dbl>, ka <dbl>, cl <dbl>, vc <dbl>, tad <dbl>, dosenum <dbl>"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/running-pknca.html","id":"give-pknca-a-different-dataset-or-a-completed-nca-analysis","dir":"Articles","previous_headings":"","what":"Give PKNCA a different dataset or a completed NCA analysis","title":"Obtain initial estimates and unit conversions with PKNCA","text":"get initial estimate, babelmixr2 automatically converts modeling dataset format needed PKNCA, NCA automatically performed using data. cases (e.g. studies sparse data), NCA may feasible. cases, can provide different dataset PKNCA compared full modeling dataset. Usually, simplest method provide single-dose, dense-sampling, dose-ranging data (.e. single-ascending dose portion first--human study) estimated. , give data PKNCA using ncaData argument pkncaControl() follows: initial estimates now based NCA calculated dNCA dataset rather full theo_sd dataset. already NCA results calculated PKNCA required parameters (“tmax”, “cmax.dn”, “cllast”), can provide instead using pkncaControl(ncaResults) argument.","code":"# Choose a subset of the full dataset for NCA dNCA <- theo_sd[theo_sd$ID <= 6, ]  preparedNcaData <-   nlmixr2(     one.compartment,     data = theo_sd,     est = \"pknca\",     control = pkncaControl(concu = \"ng/mL\", doseu = \"mg\", timeu = \"hr\", volumeu = \"L\", ncaData = dNCA)   ) #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ℹ change initial estimate (0.929027077269762) and upper/lower bound (-3.50655789731998 to 3.32136703319919) of `tka` #> → significant model change detected #> → removed from model: '$getSplitModel' #> ℹ change initial estimate (8.3955404628088) and upper/lower bound (5.85241523541802 to 10.7637056987378) of `tcl` #> ℹ change initial estimate (10.5377244826318) and upper/lower bound (7.94370069836702 to 13.1024358787022) of `tv`  preparedNcaData$ui #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>        tka        tcl         tv     add.sd  #>  0.9290271  8.3955405 10.5377245  0.7000000  #>  #> Omega ($omega):  #>        eta.ka eta.cl eta.v #> eta.ka    0.6    0.0   0.0 #> eta.cl    0.0    0.3   0.0 #> eta.v     0.0    0.0   0.1 #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2           center #>  ── μ-referencing ($muRefTable): ──   #>   theta    eta level #> 1   tka eta.ka    id #> 2   tcl eta.cl    id #> 3    tv  eta.v    id #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         tka <- c(-3.50655789731998, 0.929027077269762, 3.32136703319919) #>         label(\"Ka (1/hr)\") #>         tcl <- c(5.85241523541802, 8.3955404628088, 10.7637056987378) #>         label(\"Cl (L/hr)\") #>         tv <- c(7.94370069836702, 10.5377244826318, 13.1024358787022) #>         label(\"V (L)\") #>         add.sd <- c(0, 0.7) #>         label(\"additive residual error (mg/L)\") #>         eta.ka ~ 0.6 #>         eta.cl ~ 0.3 #>         eta.v ~ 0.1 #>     }) #>     model({ #>         ka <- exp(tka + eta.ka) #>         cl <- exp(tcl + eta.cl) #>         vc <- exp(tv + eta.v) #>         d/dt(depot) <- -ka * depot #>         d/dt(center) <- ka * depot - cl/vc * center #>         cp <- 1000 * center/vc #>         cp ~ add(add.sd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/babelmixr2/articles/running-pknca.html","id":"model-requirements","dir":"Articles","previous_headings":"","what":"Model requirements","title":"Obtain initial estimates and unit conversions with PKNCA","text":"update initial estimates, model must parameters model() block names expected est = \"pknca\". expected names : ka vc cl vp vp2 q q2 parameter names found model() block automatically traced back initial conditions (ini() block), parameter values updated. parameter estimated log scale, updated parameter value automatically converted log scale.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Fidler. Author, maintainer. Bill Denney. Author. Theodoros Papathanasiou. Contributor. Nook Fulloption. Contributor.           goldfish art","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fidler M, Xiong Y, Schoemaker R, Wilkins J, Trame M, Hooijmaijers R, Post T, Wang W (2025). nlmixr: Nonlinear Mixed Effects Models Population Pharmacokinetics Pharmacodynamics. R package version 0.1.7, https://CRAN.R-project.org/package=nlmixr. Fidler M, Wilkins J, Hooijmaijers R, Post T, Schoemaker R, Trame M, Xiong Y, Wang W (2019). “Nonlinear Mixed-Effects Model Development Simulation Using nlmixr Related R Open-Source Packages.” CPT: Pharmacometrics & Systems Pharmacology, 8(9), 621–633. Schoemaker R, Fidler M, Laveille C, Wilkins J, Hooijmaijers R, Post T, Trame M, Xiong Y, Wang W (2019). “Performance SAEM FOCEI Algorithms Open-Source, Nonlinear Mixed Effect Modeling Tool nlmixr.” CPT: Pharmacometrics & Systems Pharmacology, 8(12), 923–930.","code":"@Manual{,   title = {{nlmixr}: Nonlinear Mixed Effects Models in Population Pharmacokinetics and Pharmacodynamics},   author = {Matthew Fidler and Yuan Xiong and Rik Schoemaker and Justin Wilkins and Mirjam Trame and Richard Hooijmaijers and Teun Post and Wenping Wang},   year = {2025},   note = {R package version 0.1.7},   url = {https://CRAN.R-project.org/package=nlmixr}, } @Article{,   title = {Nonlinear Mixed-Effects Model Development and Simulation Using nlmixr and Related R Open-Source Packages},   author = {Matthew Fidler and Justin Wilkins and Richard Hooijmaijers and Teun Post and Rik Schoemaker and Mirjam Trame and Yuan Xiong and Wenping Wang},   journal = {CPT: Pharmacometrics \\& Systems Pharmacology},   year = {2019},   volume = {8},   pages = {621--633},   number = {9},   month = {sep},   abstract = {nlmixr is a free and open-source R package for fitting nonlinear pharmacokinetic (PK), pharmacodynamic (PD), joint PK-PD, and quantitative systems pharmacology mixed-effects models. Currently, nlmixr is capable of fitting both traditional compartmental PK models as well as more complex models implemented using ordinary differential equations. We believe that, over time, it will become a capable, credible alternative to commercial software tools, such as NONMEM, Monolix, and Phoenix NLME.},   address = {Hoboken},   publisher = {John Wiley and Sons Inc.}, } @Article{,   title = {Performance of the SAEM and FOCEI Algorithms in the Open-Source, Nonlinear Mixed Effect Modeling Tool nlmixr},   author = {Rik Schoemaker and Matthew Fidler and Christian Laveille and Justin Wilkins and Richard Hooijmaijers and Teun Post and Mirjam Trame and Yuan Xiong and Wenping Wang},   journal = {CPT: Pharmacometrics \\& Systems Pharmacology},   year = {2019},   volume = {8},   pages = {923--930},   number = {12},   month = {dec},   abstract = {The free and open-source package nlmixr implements pharmacometric nonlinear mixed effects model parameter estimation in R. It provides a uniform language to define pharmacometric models using ordinary differential equations. Performances of the stochastic approximation expectation-maximization (SAEM) and first order-conditional estimation with interaction (FOCEI) algorithms in nlmixr were compared with those found in the industry standards, Monolix and NONMEM, using the following two scenarios: a simple model fit to 500 sparsely sampled data sets and a range of more complex compartmental models with linear and nonlinear clearance fit to data sets with rich sampling. Estimation results obtained from nlmixr for FOCEI and SAEM matched the corresponding output from NONMEM/FOCEI and Monolix/SAEM closely both in terms of parameter estimates and associated standard errors. These results indicate that nlmixr may provide a viable alternative to existing tools for pharmacometric parameter estimation.}, }"},{"path":"https://nlmixr2.github.io/babelmixr2/index.html","id":"babelmixr2","dir":"","previous_headings":"","what":"Use nlmixr2 to Interact with Open Source and Commercial Software","title":"Use nlmixr2 to Interact with Open Source and Commercial Software","text":"goal babelmixr2 convert nlmixr2 syntax commonly used tools.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Use nlmixr2 to Interact with Open Source and Commercial Software","text":"can install released version babelmixr2 CRAN : can install r-universe : Otherwise can always install GitHub:","code":"install.packages(\"babelmixr2\") # Download and install babelmixr2 in R install.packages('babelmixr2',                  repos = c(                    nlmixr2 = 'https://nlmixr2.r-universe.dev',                    CRAN = 'https://cloud.r-project.org'))"},{"path":"https://nlmixr2.github.io/babelmixr2/index.html","id":"what-you-can-do-with-babelmixr2","dir":"","previous_headings":"","what":"What you can do with babelmixr2","title":"Use nlmixr2 to Interact with Open Source and Commercial Software","text":"Babelmixr2 can help : Running nlmixr2 model commercial nonlinear mixed effects modeling tool like NONMEM Monolix Convert NONMEM model nlmixr2 model (conjunction nonmem2rx) Convert Monolix model nlmixr2 model (conjunction monolix2rx) Calculate scaling factors automatically add initial conditions based non-compartmental analysis (using PKNCA) Perform Optimal design using nlmixr2 interface PopED","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/index.html","id":"monolix-setup","dir":"","previous_headings":"","what":"Monolix Setup","title":"Use nlmixr2 to Interact with Open Source and Commercial Software","text":"required, can get/install R ‘lixoftConnectors’ package ‘Monolix’ installation, described following url https://monolixsuite.slp-software.com/r-functions/2024R1/installation--initialization. ‘lixoftConnectors’ available, R can run ‘Monolix’ directly instead using command line.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/index.html","id":"pknca-example","dir":"","previous_headings":"","what":"PKNCA Example","title":"Use nlmixr2 to Interact with Open Source and Commercial Software","text":"installed, use standard interface, can obtain new initial estimates PKNCA:","code":"mod <-   nlmixr2(     nlmixrFun, nlmmixrData, est = \"pknca\",     control = pkncaControl(concu = \"ng/mL\", doseu = \"mg\", timeu = \"hr\", volumeu = \"L\")   )"},{"path":"https://nlmixr2.github.io/babelmixr2/index.html","id":"monolix-example","dir":"","previous_headings":"","what":"Monolix example","title":"Use nlmixr2 to Interact with Open Source and Commercial Software","text":"babelmixr2 loaded, can use nlmixr2 convert nlmixr2 model Monolix, run monolix, import back nlmixr2 following:","code":"mod <- nlmixr(nlmixrFun, nlmmixrData, est=\"monolix\")"},{"path":"https://nlmixr2.github.io/babelmixr2/index.html","id":"nonmem-example","dir":"","previous_headings":"","what":"NONMEM example","title":"Use nlmixr2 to Interact with Open Source and Commercial Software","text":"babelmixr2 loaded can use nlmixr2 convert nlmixr2 model NONMEM, run NONMEM import back nlmixr2 following:","code":"mod <- nlmixr(nlmixrFun, nlmmixrData, est=\"nonmem\")"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/as.nlmixr2.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to a nlmixr2 fit object — as.nlmixr2","title":"Convert an object to a nlmixr2 fit object — as.nlmixr2","text":"Convert object nlmixr2 fit object","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/as.nlmixr2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to a nlmixr2 fit object — as.nlmixr2","text":"","code":"as.nlmixr2(   x,   ...,   table = nlmixr2est::tableControl(),   rxControl = rxode2::rxControl(),   ci = 0.95 )  as.nlmixr(   x,   ...,   table = nlmixr2est::tableControl(),   rxControl = rxode2::rxControl(),   ci = 0.95 )"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/as.nlmixr2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to a nlmixr2 fit object — as.nlmixr2","text":"x Object convert ... arguments table nlmixr2est::tableControl() options rxControl rxode2::rxControl() options, generally needed addl doses handled translation ci confidence interval residual differences calculated (default 0.95)","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/as.nlmixr2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to a nlmixr2 fit object — as.nlmixr2","text":"nlmixr2 fit object","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/as.nlmixr2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert an object to a nlmixr2 fit object — as.nlmixr2","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/as.nlmixr2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object to a nlmixr2 fit object — as.nlmixr2","text":"","code":"# \\donttest{  # First read in the model (but without residuals) mod <- nonmem2rx(system.file(\"mods/cpt/runODE032.ctl\", package=\"nonmem2rx\"),                  determineError=FALSE, lst=\".res\", save=FALSE) #> ℹ getting information from  '/home/runner/work/_temp/Library/nonmem2rx/mods/cpt/runODE032.ctl' #> ℹ reading in xml file #> ℹ done #> ℹ reading in ext file #> ℹ done #> ℹ reading in phi file #> ℹ done #> ℹ reading in lst file #> ℹ abbreviated list parsing #> ℹ done #> ℹ done #> ℹ splitting control stream by records #> ℹ done #> ℹ Processing record $INPUT #> ℹ Processing record $MODEL #> ℹ Processing record $gTHETA #> ℹ Processing record $OMEGA #> ℹ Processing record $SIGMA #> ℹ Processing record $PROBLEM #> ℹ Processing record $DATA #> ℹ Processing record $SUBROUTINES #> ℹ Processing record $PK #> ℹ Processing record $DES #> ℹ Processing record $ERROR #> ℹ Processing record $ESTIMATION #> ℹ Ignore record $ESTIMATION #> ℹ Processing record $COVARIANCE #> ℹ Ignore record $COVARIANCE #> ℹ Processing record $TABLE #> ℹ change initial estimate of `theta1` to `1.37034036528946` #> ℹ change initial estimate of `theta2` to `4.19814911033061` #> ℹ change initial estimate of `theta3` to `1.38003493562413` #> ℹ change initial estimate of `theta4` to `3.87657341967489` #> ℹ change initial estimate of `theta5` to `0.196446108190896` #> ℹ change initial estimate of `eta1` to `0.101251418415006` #> ℹ change initial estimate of `eta2` to `0.0993872449483344` #> ℹ change initial estimate of `eta3` to `0.101302674763154` #> ℹ change initial estimate of `eta4` to `0.0730497519364148` #> ℹ read in nonmem input data (for model validation): /home/runner/work/_temp/Library/nonmem2rx/mods/cpt/Bolus_2CPT.csv #> ℹ ignoring lines that begin with a letter (IGNORE=@)' #> ℹ applying names specified by $INPUT #> ℹ subsetting accept/ignore filters code: .data[-which((.data$SD == 0)),] #> ℹ done #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ℹ read in nonmem IPRED data (for model validation): /home/runner/work/_temp/Library/nonmem2rx/mods/cpt/runODE032.csv #> ℹ done #> ℹ changing most variables to lower case #> ℹ done #> ℹ replace theta names #> ℹ done #> ℹ replace eta names #> ℹ done (no labels) #> ℹ renaming compartments #> ℹ done #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ℹ solving ipred problem #> ℹ done #> ℹ solving pred problem #> ℹ done  # define the model with residuals (and change the name of the # parameters) In this step you need to be careful to not change the # estimates and make sure the residual estimates are correct (could # have to change var to sd).   mod2 <-function() {    ini({      lcl <- 1.37034036528946      lvc <- 4.19814911033061      lq <- 1.38003493562413      lvp <- 3.87657341967489      RSV <- c(0, 0.196446108190896, 1)      eta.cl ~ 0.101251418415006      eta.v ~ 0.0993872449483344      eta.q ~ 0.101302674763154      eta.v2 ~ 0.0730497519364148    })    model({      cmt(CENTRAL)      cmt(PERI)      cl <- exp(lcl + eta.cl)      v <- exp(lvc + eta.v)      q <- exp(lq + eta.q)      v2 <- exp(lvp + eta.v2)      v1 <- v      scale1 <- v      k21 <- q/v2      k12 <- q/v      d/dt(CENTRAL) <- k21 * PERI - k12 * CENTRAL - cl * CENTRAL/v1      d/dt(PERI) <- -k21 * PERI + k12 * CENTRAL      f <- CENTRAL/scale1      f ~ prop(RSV)    })  }  # now we create another nonmem2rx object that validates the model above:  new <- as.nonmem2rx(mod2, mod) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ℹ copy 'dfSub' to nonmem2rx model #> ℹ copy 'thetaMat' to nonmem2rx model #> ℹ copy 'dfObs' to nonmem2rx model #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ℹ solving ipred problem #> ℹ done #> ℹ solving pred problem #> ℹ done  # once that is done, you can translate to a full nlmixr2 fit (if you wish)  fit <- as.nlmixr2(new) #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → finding duplicate expressions in EBE model... #> → optimizing duplicate expressions in EBE model... #> → compiling EBE model... #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> rxode2 3.0.4.9000 using 2 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 203816 #> → compress parHistData in nlmixr2 object, save 2176  print(fit) #> ── nlmixr² nonmem2rx reading NONMEM ver 7.4.3 ── #>  #>               OBJF      AIC      BIC Log-likelihood Condition#(Cov) #> nonmem2rx 15977.28 20185.64 20237.23      -10083.82        335.4129 #>           Condition#(Cor) #> nonmem2rx        2.096559 #>  #> ── Time (sec $time): ── #>  #>            setup table compress NONMEM as.nlmixr2 #> elapsed 0.258011 0.101    0.019 100.95      3.101 #>  #> ── Population Parameters ($parFixed or $parFixedDf): ── #>  #>      Est.     SE  %RSE Back-transformed(95%CI) BSV(CV%) Shrink(SD)% #> lcl  1.37 0.0298  2.17       3.94 (3.71, 4.17)     32.6      1.94%  #> lvc   4.2 0.0295 0.703       66.6 (62.8, 70.5)     32.3      2.46%  #> lq   1.38 0.0547  3.96       3.98 (3.57, 4.42)     32.7      40.5%  #> lvp  3.88 0.0348 0.899       48.3 (45.1, 51.7)     27.5      28.4%  #> RSV 0.196                                0.196                      #>   #>   Covariance Type ($covMethod): nonmem2rx #>   No correlations in between subject variability (BSV) matrix #>   Full BSV covariance ($omega) or correlation ($omegaR; diagonals=SDs)  #>   Distribution stats (mean/skewness/kurtosis/p-value) available in $shrink  #>   Censoring ($censInformation): No censoring #>   Minimization message ($message):   #>      #>  #>  WARNINGS AND ERRORS (IF ANY) FOR PROBLEM    1 #>  #>  (WARNING  2) NM-TRAN INFERS THAT THE DATA ARE POPULATION. #>  #>      #> 0MINIMIZATION SUCCESSFUL #>  NO. OF FUNCTION EVALUATIONS USED:      320 #>  NO. OF SIG. DIGITS IN FINAL EST.:  2.5 #>  #>     IPRED relative difference compared to Nonmem IPRED: 0%; 95% percentile: (0%,0%); rtol=6.43e-06 #>     PRED relative difference compared to Nonmem PRED: 0%; 95% percentile: (0%,0%); rtol=6.41e-06 #>     IPRED absolute difference compared to Nonmem IPRED: 95% percentile: (2.25e-05, 0.0418); atol=0.00167 #>     PRED absolute difference compared to Nonmem PRED: 95% percentile: (1.41e-07,0.00382); atol=6.41e-06 #>     nonmem2rx model file: '/home/runner/work/_temp/Library/nonmem2rx/mods/cpt/runODE032.ctl'  #>  #> ── Fit Data (object is a modified tibble): ── #> # A tibble: 2,280 × 25 #>   ID     TIME    DV  PRED    RES IPRED  IRES  IWRES eta.cl eta.v  eta.q eta.v2 #>   <fct> <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>  <dbl> <dbl>  <dbl>  <dbl> #> 1 1      0.25 1041. 1750. -710.  1215. -175. -0.732 -0.144 0.375 0.0650  0.241 #> 2 1      0.5  1629  1700.  -70.8 1192.  437.  1.87  -0.144 0.375 0.0650  0.241 #> 3 1      0.75  878. 1651. -774.  1169. -291. -1.27  -0.144 0.375 0.0650  0.241 #> # ℹ 2,277 more rows #> # ℹ 13 more variables: f <dbl>, CENTRAL <dbl>, PERI <dbl>, cl <dbl>, v <dbl>, #> #   q <dbl>, v2 <dbl>, v1 <dbl>, scale1 <dbl>, k21 <dbl>, k12 <dbl>, tad <dbl>, #> #   dosenum <dbl>  # }"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/babel.poped.database.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand a babelmixr2 PopED database — babel.poped.database","title":"Expand a babelmixr2 PopED database — babel.poped.database","text":"Expand babelmixr2 PopED database","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/babel.poped.database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand a babelmixr2 PopED database — babel.poped.database","text":"","code":"babel.poped.database(popedInput, ..., optTime = NA)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/babel.poped.database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand a babelmixr2 PopED database — babel.poped.database","text":"popedInput babelmixr2 generated PopED database ... parameters sent PopED::create.poped.database() optTime boolean indicate global time indexer inside babelmixr2 reset times different. default TRUE.  FALSE can get slightly better run times possibly slightly different results.  optTime FALSE global indexer reset every time PopED rxode2 setup problem poped dataset created.  can manually reset popedMultipleEndpointResetTimeIndex()","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/babel.poped.database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand a babelmixr2 PopED database — babel.poped.database","text":"babelmixr2 PopED database ($babelmixr2 database)","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/babel.poped.database.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Expand a babelmixr2 PopED database — babel.poped.database","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/babelBpopIdx.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the bpop_idx by variable name for a poped database created by babelmixr2 — babelBpopIdx","title":"Get the bpop_idx by variable name for a poped database created by babelmixr2 — babelBpopIdx","text":"may work poped databases population parameters named.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/babelBpopIdx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the bpop_idx by variable name for a poped database created by babelmixr2 — babelBpopIdx","text":"","code":"babelBpopIdx(popedInput, var)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/babelBpopIdx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the bpop_idx by variable name for a poped database created by babelmixr2 — babelBpopIdx","text":"popedInput babelmixr2 created database var variable query","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/babelBpopIdx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the bpop_idx by variable name for a poped database created by babelmixr2 — babelBpopIdx","text":"index variable","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/babelBpopIdx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the bpop_idx by variable name for a poped database created by babelmixr2 — babelBpopIdx","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/babelBpopIdx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the bpop_idx by variable name for a poped database created by babelmixr2 — babelBpopIdx","text":"","code":"if (requireNamespace(\"PopED\", quietly=TRUE)) {  f <- function() {   ini({     tV <- 72.8     tKa <- 0.25     tCl <- 3.75     tF <- fix(0.9)     pedCL <- 0.8      eta.v ~ 0.09     eta.ka ~ 0.09     eta.cl ~0.25^2      prop.sd <- fix(sqrt(0.04))     add.sd <- fix(sqrt(5e-6))    })   model({     V<-tV*exp(eta.v)     KA<-tKa*exp(eta.ka) * (pedCL**isPediatric) # add covariate for pediatrics     CL<-tCl*exp(eta.cl)     Favail <- tF      N <-  floor(t/TAU)+1     y <- (DOSE*Favail/V)*(KA/(KA - CL/V)) *       (exp(-CL/V * (t - (N - 1) * TAU)) *          (1 - exp(-N * CL/V * TAU))/(1 - exp(-CL/V * TAU)) -          exp(-KA * (t - (N - 1) * TAU)) * (1 - exp(-N * KA * TAU))/(1 - exp(-KA * TAU)))      y ~ prop(prop.sd) + add(add.sd)   }) }  e <- et(c( 1,8,10,240,245))  babel.db <- nlmixr2(f, e, \"poped\",                     popedControl(m = 2,                                  groupsize=20,                                  bUseGrouped_xt=TRUE,                                  a=list(c(DOSE=20,TAU=24,isPediatric = 0),                                         c(DOSE=40, TAU=24,isPediatric = 0))))  babelBpopIdx(babel.db, \"pedCL\")  } #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> [1] 4"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/bblDatToMonolix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert nlmixr2-compatible data to other formats (if possible) — bblDatToMonolix","title":"Convert nlmixr2-compatible data to other formats (if possible) — bblDatToMonolix","text":"Convert nlmixr2-compatible data formats (possible)","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/bblDatToMonolix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert nlmixr2-compatible data to other formats (if possible) — bblDatToMonolix","text":"","code":"bblDatToMonolix(   model,   data,   table = nlmixr2est::tableControl(),   rxControl = rxode2::rxControl(),   env = NULL )  bblDatToNonmem(   model,   data,   table = nlmixr2est::tableControl(),   rxControl = rxode2::rxControl(),   env = NULL )  bblDatToRxode(   model,   data,   table = nlmixr2est::tableControl(),   rxControl = rxode2::rxControl(),   env = NULL )  bblDatToMrgsolve(   model,   data,   table = nlmixr2est::tableControl(),   rxControl = rxode2::rxControl(),   env = NULL )  bblDatToPknca(   model,   data,   table = nlmixr2est::tableControl(),   rxControl = rxode2::rxControl(),   env = NULL )"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/bblDatToMonolix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert nlmixr2-compatible data to other formats (if possible) — bblDatToMonolix","text":"model rxode2 model conversion data Input dataset. table table control; mostly figure additional columns keep. rxControl rxode2 control options; figure handle addl dosing information. env NULL (default) nothing done.  environment, function nlmixr2est::.foceiPreProcessData(data, env, model, rxControl) called provided environment.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/bblDatToMonolix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert nlmixr2-compatible data to other formats (if possible) — bblDatToMonolix","text":"function bblDatToMonolix() return list : Monolix compatible dataset ($monolix) Monolix ADM information ($adm) function nlmixrDataToNonmem() return dataset compatible NONMEM. function nlmixrDataToMrgsolve() return dataset compatible mrgsolve.  Unlike NONMEM, supports replacement events evid=8 (note rxode2 replacement evid 5). function nlmixrDataToRxode() normalize dataset use newer evid definitions closer NONMEM instead classic definitions used lower level","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/bblDatToMonolix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert nlmixr2-compatible data to other formats (if possible) — bblDatToMonolix","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/bblDatToMonolix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert nlmixr2-compatible data to other formats (if possible) — bblDatToMonolix","text":"","code":"pk.turnover.emax3 <- function() {   ini({     tktr <- log(1)     tka <- log(1)     tcl <- log(0.1)     tv <- log(10)     ##     eta.ktr ~ 1     eta.ka ~ 1     eta.cl ~ 2     eta.v ~ 1     prop.err <- 0.1     pkadd.err <- 0.1     ##     temax <- logit(0.8)     tec50 <- log(0.5)     tkout <- log(0.05)     te0 <- log(100)     ##     eta.emax ~ .5     eta.ec50  ~ .5     eta.kout ~ .5     eta.e0 ~ .5     ##     pdadd.err <- 10   })   model({     ktr <- exp(tktr + eta.ktr)     ka <- exp(tka + eta.ka)     cl <- exp(tcl + eta.cl)     v <- exp(tv + eta.v)     emax = expit(temax+eta.emax)     ec50 =  exp(tec50 + eta.ec50)     kout = exp(tkout + eta.kout)     e0 = exp(te0 + eta.e0)     ##     DCP = center/v     PD=1-emax*DCP/(ec50+DCP)     ##     effect(0) = e0     kin = e0*kout     ##     d/dt(depot) = -ktr * depot     d/dt(gut) =  ktr * depot -ka * gut     d/dt(center) =  ka * gut - cl / v * center     d/dt(effect) = kin*PD -kout*effect     ##     cp = center / v     cp ~ prop(prop.err) + add(pkadd.err)     effect ~ add(pdadd.err) | pca   }) }  bblDatToMonolix(pk.turnover.emax3, nlmixr2data::warfarin) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> $monolix #>     ID  TIME EVID   AMT II    DV ADM YTYPE SS nlmixrRowNums #> 1    1   0.0    1 100.0  0    NA   1     0  0             1 #> 2    1   0.5    0    NA  0   0.0   0     1  0             2 #> 3    1   1.0    0    NA  0   1.9   0     1  0             3 #> 4    1   2.0    0    NA  0   3.3   0     1  0             4 #> 5    1   3.0    0    NA  0   6.6   0     1  0             5 #> 6    1   6.0    0    NA  0   9.1   0     1  0             6 #> 7    1   9.0    0    NA  0  10.8   0     1  0             7 #> 8    1  12.0    0    NA  0   8.6   0     1  0             8 #> 9    1  24.0    0    NA  0   5.6   0     1  0             9 #> 10   1  24.0    0    NA  0  44.0   0     2  0            10 #> 11   1  36.0    0    NA  0   4.0   0     1  0            11 #> 12   1  36.0    0    NA  0  27.0   0     2  0            12 #> 13   1  48.0    0    NA  0   2.7   0     1  0            13 #> 14   1  48.0    0    NA  0  28.0   0     2  0            14 #> 15   1  72.0    0    NA  0   0.8   0     1  0            15 #> 16   1  72.0    0    NA  0  31.0   0     2  0            16 #> 17   1  96.0    0    NA  0  60.0   0     2  0            17 #> 18   1 120.0    0    NA  0  65.0   0     2  0            18 #> 19   1 144.0    0    NA  0  71.0   0     2  0            19 #> 20   2   0.0    1 100.0  0    NA   1     0  0            20 #> 21   2   0.0    0    NA  0 100.0   0     2  0            21 #> 22   2  24.0    0    NA  0   9.2   0     1  0            22 #> 23   2  24.0    0    NA  0  49.0   0     2  0            23 #> 24   2  36.0    0    NA  0   8.5   0     1  0            24 #> 25   2  36.0    0    NA  0  32.0   0     2  0            25 #> 26   2  48.0    0    NA  0   6.4   0     1  0            26 #> 27   2  48.0    0    NA  0  26.0   0     2  0            27 #> 28   2  72.0    0    NA  0   4.8   0     1  0            28 #> 29   2  72.0    0    NA  0  22.0   0     2  0            29 #> 30   2  96.0    0    NA  0   3.1   0     1  0            30 #> 31   2  96.0    0    NA  0  28.0   0     2  0            31 #> 32   2 120.0    0    NA  0   2.5   0     1  0            32 #> 33   2 120.0    0    NA  0  33.0   0     2  0            33 #> 34   3   0.0    1 100.0  0    NA   1     0  0            34 #> 35   3   0.0    0    NA  0 100.0   0     2  0            35 #> 36   3   0.5    0    NA  0   0.0   0     1  0            36 #> 37   3   2.0    0    NA  0   8.4   0     1  0            37 #> 38   3   3.0    0    NA  0   9.7   0     1  0            38 #> 39   3   6.0    0    NA  0   9.8   0     1  0            39 #> 40   3  12.0    0    NA  0  11.0   0     1  0            40 #> 41   3  24.0    0    NA  0   8.3   0     1  0            41 #> 42   3  24.0    0    NA  0  46.0   0     2  0            42 #> 43   3  36.0    0    NA  0   7.7   0     1  0            43 #> 44   3  36.0    0    NA  0  22.0   0     2  0            44 #> 45   3  48.0    0    NA  0   6.3   0     1  0            45 #> 46   3  48.0    0    NA  0  19.0   0     2  0            46 #> 47   3  72.0    0    NA  0   4.1   0     1  0            47 #> 48   3  72.0    0    NA  0  20.0   0     2  0            48 #> 49   3  96.0    0    NA  0   3.0   0     1  0            49 #> 50   3  96.0    0    NA  0  42.0   0     2  0            50 #> 51   3 120.0    0    NA  0   1.4   0     1  0            51 #> 52   3 120.0    0    NA  0  49.0   0     2  0            52 #> 53   3 144.0    0    NA  0  54.0   0     2  0            53 #> 54   4   0.0    1 120.0  0    NA   1     0  0            54 #> 55   4   0.0    0    NA  0 100.0   0     2  0            55 #> 56   4   3.0    0    NA  0  12.0   0     1  0            56 #> 57   4   6.0    0    NA  0  13.2   0     1  0            57 #> 58   4   9.0    0    NA  0  14.4   0     1  0            58 #> 59   4  24.0    0    NA  0   9.6   0     1  0            59 #> 60   4  24.0    0    NA  0  30.0   0     2  0            60 #> 61   4  36.0    0    NA  0   8.2   0     1  0            61 #> 62   4  36.0    0    NA  0  24.0   0     2  0            62 #> 63   4  48.0    0    NA  0   7.8   0     1  0            63 #> 64   4  48.0    0    NA  0  13.0   0     2  0            64 #> 65   4  72.0    0    NA  0   5.8   0     1  0            65 #> 66   4  72.0    0    NA  0   9.0   0     2  0            66 #> 67   4  96.0    0    NA  0   4.3   0     1  0            67 #> 68   4  96.0    0    NA  0   9.0   0     2  0            68 #> 69   4 120.0    0    NA  0   3.0   0     1  0            69 #> 70   4 120.0    0    NA  0  11.0   0     2  0            70 #> 71   4 144.0    0    NA  0  12.0   0     2  0            71 #> 72   5   0.0    1  60.0  0    NA   1     0  0            72 #> 73   5   0.0    0    NA  0  82.0   0     2  0            73 #> 74   5   3.0    0    NA  0  11.1   0     1  0            74 #> 75   5   6.0    0    NA  0  11.9   0     1  0            75 #> 76   5   9.0    0    NA  0   9.8   0     1  0            76 #> 77   5  12.0    0    NA  0  11.0   0     1  0            77 #> 78   5  24.0    0    NA  0   8.5   0     1  0            78 #> 79   5  24.0    0    NA  0  43.0   0     2  0            79 #> 80   5  36.0    0    NA  0   7.6   0     1  0            80 #> 81   5  36.0    0    NA  0  25.0   0     2  0            81 #> 82   5  48.0    0    NA  0   5.4   0     1  0            82 #> 83   5  48.0    0    NA  0  18.0   0     2  0            83 #> 84   5  72.0    0    NA  0   4.5   0     1  0            84 #> 85   5  72.0    0    NA  0  17.0   0     2  0            85 #> 86   5  96.0    0    NA  0   3.3   0     1  0            86 #> 87   5  96.0    0    NA  0  23.0   0     2  0            87 #> 88   5 120.0    0    NA  0   2.3   0     1  0            88 #> 89   5 120.0    0    NA  0  29.0   0     2  0            89 #> 90   5 144.0    0    NA  0  41.0   0     2  0            90 #> 91   6   0.0    1 113.0  0    NA   1     0  0            91 #> 92   6   0.0    0    NA  0 100.0   0     2  0            92 #> 93   6   6.0    0    NA  0   8.6   0     1  0            93 #> 94   6  12.0    0    NA  0   8.6   0     1  0            94 #> 95   6  24.0    0    NA  0   7.0   0     1  0            95 #> 96   6  24.0    0    NA  0  34.0   0     2  0            96 #> 97   6  36.0    0    NA  0   5.7   0     1  0            97 #> 98   6  36.0    0    NA  0  23.0   0     2  0            98 #> 99   6  48.0    0    NA  0   4.7   0     1  0            99 #> 100  6  48.0    0    NA  0  20.0   0     2  0           100 #> 101  6  72.0    0    NA  0   3.3   0     1  0           101 #> 102  6  72.0    0    NA  0  16.0   0     2  0           102 #> 103  6  96.0    0    NA  0   2.3   0     1  0           103 #> 104  6  96.0    0    NA  0  17.0   0     2  0           104 #> 105  6 120.0    0    NA  0   1.7   0     1  0           105 #> 106  6 120.0    0    NA  0  18.0   0     2  0           106 #> 107  6 144.0    0    NA  0  25.0   0     2  0           107 #> 108  7   0.0    1  90.0  0    NA   1     0  0           108 #> 109  7   3.0    0    NA  0  13.4   0     1  0           109 #> 110  7   6.0    0    NA  0  12.4   0     1  0           110 #> 111  7   9.0    0    NA  0  12.7   0     1  0           111 #> 112  7  12.0    0    NA  0   8.8   0     1  0           112 #> 113  7  24.0    0    NA  0   6.1   0     1  0           113 #> 114  7  24.0    0    NA  0  36.0   0     2  0           114 #> 115  7  36.0    0    NA  0   3.5   0     1  0           115 #> 116  7  36.0    0    NA  0  33.0   0     2  0           116 #> 117  7  48.0    0    NA  0   1.8   0     1  0           117 #> 118  7  48.0    0    NA  0  28.0   0     2  0           118 #> 119  7  72.0    0    NA  0   1.5   0     1  0           119 #> 120  7  72.0    0    NA  0  52.0   0     2  0           120 #> 121  7  96.0    0    NA  0   1.0   0     1  0           121 #> 122  7  96.0    0    NA  0  80.0   0     2  0           122 #> 123  7 120.0    0    NA  0  90.0   0     2  0           123 #> 124  7 144.0    0    NA  0 100.0   0     2  0           124 #> 125  8   0.0    1 135.0  0    NA   1     0  0           125 #> 126  8   0.0    0    NA  0  88.0   0     2  0           126 #> 127  8   2.0    0    NA  0  17.6   0     1  0           127 #> 128  8   3.0    0    NA  0  17.3   0     1  0           128 #> 129  8   6.0    0    NA  0  15.0   0     1  0           129 #> 130  8   9.0    0    NA  0  15.0   0     1  0           130 #> 131  8  12.0    0    NA  0  12.4   0     1  0           131 #> 132  8  24.0    0    NA  0   7.9   0     1  0           132 #> 133  8  24.0    0    NA  0  35.0   0     2  0           133 #> 134  8  36.0    0    NA  0   7.9   0     1  0           134 #> 135  8  36.0    0    NA  0  20.0   0     2  0           135 #> 136  8  48.0    0    NA  0   5.1   0     1  0           136 #> 137  8  48.0    0    NA  0  12.0   0     2  0           137 #> 138  8  72.0    0    NA  0   3.6   0     1  0           138 #> 139  8  72.0    0    NA  0  16.0   0     2  0           139 #> 140  8  96.0    0    NA  0   2.4   0     1  0           140 #> 141  8  96.0    0    NA  0  23.0   0     2  0           141 #> 142  8 120.0    0    NA  0   2.0   0     1  0           142 #> 143  8 120.0    0    NA  0  36.0   0     2  0           143 #> 144  8 144.0    0    NA  0  48.0   0     2  0           144 #> 145  9   0.0    1  75.0  0    NA   1     0  0           145 #> 146  9   0.0    0    NA  0  92.0   0     2  0           146 #> 147  9   0.5    0    NA  0   0.0   0     1  0           147 #> 148  9   1.0    0    NA  0   1.0   0     1  0           148 #> 149  9   2.0    0    NA  0   4.6   0     1  0           149 #> 150  9   3.0    0    NA  0  12.7   0     1  0           150 #> 151  9   3.0    0    NA  0   8.0   0     1  0           151 #> 152  9   6.0    0    NA  0  12.7   0     1  0           152 #> 153  9   6.0    0    NA  0  11.5   0     1  0           153 #> 154  9   9.0    0    NA  0  12.9   0     1  0           154 #> 155  9   9.0    0    NA  0  11.4   0     1  0           155 #> 156  9  12.0    0    NA  0  11.4   0     1  0           156 #> 157  9  12.0    0    NA  0  11.0   0     1  0           157 #> 158  9  24.0    0    NA  0   9.1   0     1  0           158 #> 159  9  24.0    0    NA  0  33.0   0     2  0           159 #> 160  9  36.0    0    NA  0   8.2   0     1  0           160 #> 161  9  36.0    0    NA  0  22.0   0     2  0           161 #> 162  9  48.0    0    NA  0   5.9   0     1  0           162 #> 163  9  48.0    0    NA  0  16.0   0     2  0           163 #> 164  9  72.0    0    NA  0   3.6   0     1  0           164 #> 165  9  72.0    0    NA  0  18.0   0     2  0           165 #> 166  9  96.0    0    NA  0   1.7   0     1  0           166 #> 167  9  96.0    0    NA  0  32.0   0     2  0           167 #> 168  9 120.0    0    NA  0   1.1   0     1  0           168 #> 169  9 120.0    0    NA  0  30.0   0     2  0           169 #> 170  9 144.0    0    NA  0  45.0   0     2  0           170 #> 171 10   0.0    1 105.0  0    NA   1     0  0           171 #> 172 10   0.0    0    NA  0  90.0   0     2  0           172 #> 173 10  24.0    0    NA  0   8.6   0     1  0           173 #> 174 10  24.0    0    NA  0  39.0   0     2  0           174 #> 175 10  36.0    0    NA  0   8.0   0     1  0           175 #> 176 10  36.0    0    NA  0  22.0   0     2  0           176 #> 177 10  48.0    0    NA  0   6.0   0     1  0           177 #> 178 10  48.0    0    NA  0  17.0   0     2  0           178 #> 179 10  72.0    0    NA  0   4.4   0     1  0           179 #> 180 10  72.0    0    NA  0  17.0   0     2  0           180 #> 181 10  96.0    0    NA  0   3.6   0     1  0           181 #> 182 10  96.0    0    NA  0  22.0   0     2  0           182 #> 183 10 120.0    0    NA  0   2.8   0     1  0           183 #> 184 10 120.0    0    NA  0  25.0   0     2  0           184 #> 185 10 144.0    0    NA  0  33.0   0     2  0           185 #> 186 11   0.0    1 123.0  0    NA   1     0  0           186 #> 187 11   0.0    0    NA  0 100.0   0     2  0           187 #> 188 11   1.5    0    NA  0  11.4   0     1  0           188 #> 189 11   3.0    0    NA  0  15.4   0     1  0           189 #> 190 11   6.0    0    NA  0  17.5   0     1  0           190 #> 191 11  12.0    0    NA  0  14.0   0     1  0           191 #> 192 11  24.0    0    NA  0   9.0   0     1  0           192 #> 193 11  24.0    0    NA  0  37.0   0     2  0           193 #> 194 11  36.0    0    NA  0   8.9   0     1  0           194 #> 195 11  36.0    0    NA  0  24.0   0     2  0           195 #> 196 11  48.0    0    NA  0   6.6   0     1  0           196 #> 197 11  48.0    0    NA  0  14.0   0     2  0           197 #> 198 11  72.0    0    NA  0   4.2   0     1  0           198 #> 199 11  72.0    0    NA  0  11.0   0     2  0           199 #> 200 11  96.0    0    NA  0   3.6   0     1  0           200 #> 201 11  96.0    0    NA  0  14.0   0     2  0           201 #> 202 11 120.0    0    NA  0   2.6   0     1  0           202 #> 203 11 120.0    0    NA  0  23.0   0     2  0           203 #> 204 11 144.0    0    NA  0  33.0   0     2  0           204 #> 205 12   0.0    1 113.0  0    NA   1     0  0           205 #> 206 12   0.0    0    NA  0  85.0   0     2  0           206 #> 207 12   1.5    0    NA  0   0.6   0     1  0           207 #> 208 12   3.0    0    NA  0   2.8   0     1  0           208 #> 209 12   6.0    0    NA  0  13.8   0     1  0           209 #> 210 12   9.0    0    NA  0  15.0   0     1  0           210 #> 211 12  24.0    0    NA  0  10.5   0     1  0           211 #> 212 12  24.0    0    NA  0  25.0   0     2  0           212 #> 213 12  36.0    0    NA  0   9.1   0     1  0           213 #> 214 12  36.0    0    NA  0  15.0   0     2  0           214 #> 215 12  48.0    0    NA  0   6.6   0     1  0           215 #> 216 12  48.0    0    NA  0  11.0   0     2  0           216 #> 217 12  72.0    0    NA  0   4.9   0     1  0           217 #> 218 12  96.0    0    NA  0   2.4   0     1  0           218 #> 219 12 120.0    0    NA  0   1.9   0     1  0           219 #> 220 13   0.0    1 113.0  0    NA   1     0  0           220 #> 221 13   0.0    0    NA  0  88.0   0     2  0           221 #> 222 13   1.5    0    NA  0   3.6   0     1  0           222 #> 223 13   3.0    0    NA  0  12.9   0     1  0           223 #> 224 13   6.0    0    NA  0  12.9   0     1  0           224 #> 225 13   9.0    0    NA  0  10.2   0     1  0           225 #> 226 13  24.0    0    NA  0   6.4   0     1  0           226 #> 227 13  24.0    0    NA  0  41.0   0     2  0           227 #> 228 13  36.0    0    NA  0   6.9   0     1  0           228 #> 229 13  36.0    0    NA  0  23.0   0     2  0           229 #> 230 13  48.0    0    NA  0   4.5   0     1  0           230 #> 231 13  48.0    0    NA  0  16.0   0     2  0           231 #> 232 13  72.0    0    NA  0   3.2   0     1  0           232 #> 233 13  72.0    0    NA  0  14.0   0     2  0           233 #> 234 13  96.0    0    NA  0   2.4   0     1  0           234 #> 235 13  96.0    0    NA  0  18.0   0     2  0           235 #> 236 13 120.0    0    NA  0   1.3   0     1  0           236 #> 237 13 120.0    0    NA  0  22.0   0     2  0           237 #> 238 13 144.0    0    NA  0  35.0   0     2  0           238 #> 239 14   0.0    1  75.0  0    NA   1     0  0           239 #> 240 14   0.0    0    NA  0  85.0   0     2  0           240 #> 241 14   0.5    0    NA  0   0.0   0     1  0           241 #> 242 14   1.0    0    NA  0   2.7   0     1  0           242 #> 243 14   2.0    0    NA  0  11.6   0     1  0           243 #> 244 14   3.0    0    NA  0  11.6   0     1  0           244 #> 245 14   6.0    0    NA  0  11.3   0     1  0           245 #> 246 14   9.0    0    NA  0   9.7   0     1  0           246 #> 247 14  24.0    0    NA  0   6.5   0     1  0           247 #> 248 14  24.0    0    NA  0  32.0   0     2  0           248 #> 249 14  36.0    0    NA  0   5.2   0     1  0           249 #> 250 14  36.0    0    NA  0  22.0   0     2  0           250 #> 251 14  48.0    0    NA  0   3.6   0     1  0           251 #> 252 14  48.0    0    NA  0  21.0   0     2  0           252 #> 253 14  72.0    0    NA  0   2.4   0     1  0           253 #> 254 14  72.0    0    NA  0  28.0   0     2  0           254 #> 255 14  96.0    0    NA  0   0.9   0     1  0           255 #> 256 14  96.0    0    NA  0  38.0   0     2  0           256 #> 257 14 120.0    0    NA  0  46.0   0     2  0           257 #> 258 14 144.0    0    NA  0  65.0   0     2  0           258 #> 259 15   0.0    1  85.0  0    NA   1     0  0           259 #> 260 15   0.0    0    NA  0 100.0   0     2  0           260 #> 261 15   1.0    0    NA  0   6.6   0     1  0           261 #> 262 15   3.0    0    NA  0  11.9   0     1  0           262 #> 263 15   6.0    0    NA  0  11.7   0     1  0           263 #> 264 15   9.0    0    NA  0  12.2   0     1  0           264 #> 265 15  24.0    0    NA  0   8.1   0     1  0           265 #> 266 15  24.0    0    NA  0  43.0   0     2  0           266 #> 267 15  36.0    0    NA  0   7.4   0     1  0           267 #> 268 15  36.0    0    NA  0  26.0   0     2  0           268 #> 269 15  48.0    0    NA  0   6.8   0     1  0           269 #> 270 15  48.0    0    NA  0  15.0   0     2  0           270 #> 271 15  72.0    0    NA  0   5.3   0     1  0           271 #> 272 15  72.0    0    NA  0  13.0   0     2  0           272 #> 273 15  96.0    0    NA  0   3.0   0     1  0           273 #> 274 15  96.0    0    NA  0  21.0   0     2  0           274 #> 275 15 120.0    0    NA  0   2.0   0     1  0           275 #> 276 15 120.0    0    NA  0  28.0   0     2  0           276 #> 277 15 144.0    0    NA  0  39.0   0     2  0           277 #> 278 16   0.0    1  87.0  0    NA   1     0  0           278 #> 279 16   0.0    0    NA  0 100.0   0     2  0           279 #> 280 16  24.0    0    NA  0  10.4   0     1  0           280 #> 281 16  24.0    0    NA  0  42.0   0     2  0           281 #> 282 16  36.0    0    NA  0   8.9   0     1  0           282 #> 283 16  36.0    0    NA  0  32.0   0     2  0           283 #> 284 16  48.0    0    NA  0   7.0   0     1  0           284 #> 285 16  48.0    0    NA  0  26.0   0     2  0           285 #> 286 16  72.0    0    NA  0   4.4   0     1  0           286 #> 287 16  72.0    0    NA  0  31.0   0     2  0           287 #> 288 16  96.0    0    NA  0   3.2   0     1  0           288 #> 289 16  96.0    0    NA  0  33.0   0     2  0           289 #> 290 16 120.0    0    NA  0   2.4   0     1  0           290 #> 291 16 120.0    0    NA  0  54.0   0     2  0           291 #> 292 17   0.0    1 117.0  0    NA   1     0  0           292 #> 293 17   0.0    0    NA  0 100.0   0     2  0           293 #> 294 17  24.0    0    NA  0   7.6   0     1  0           294 #> 295 17  24.0    0    NA  0  35.0   0     2  0           295 #> 296 17  36.0    0    NA  0   6.4   0     1  0           296 #> 297 17  36.0    0    NA  0  23.0   0     2  0           297 #> 298 17  48.0    0    NA  0   6.0   0     1  0           298 #> 299 17  48.0    0    NA  0  17.0   0     2  0           299 #> 300 17  72.0    0    NA  0   4.0   0     1  0           300 #> 301 17  72.0    0    NA  0  18.0   0     2  0           301 #> 302 17  96.0    0    NA  0   3.1   0     1  0           302 #> 303 17  96.0    0    NA  0  18.0   0     2  0           303 #> 304 17 120.0    0    NA  0   2.0   0     1  0           304 #> 305 17 120.0    0    NA  0  21.0   0     2  0           305 #> 306 18   0.0    1 112.0  0    NA   1     0  0           306 #> 307 18   0.0    0    NA  0 100.0   0     2  0           307 #> 308 18  24.0    0    NA  0   7.6   0     1  0           308 #> 309 18  24.0    0    NA  0  32.0   0     2  0           309 #> 310 18  36.0    0    NA  0   6.6   0     1  0           310 #> 311 18  36.0    0    NA  0  20.0   0     2  0           311 #> 312 18  48.0    0    NA  0   5.4   0     1  0           312 #> 313 18  48.0    0    NA  0  18.0   0     2  0           313 #> 314 18  72.0    0    NA  0   3.4   0     1  0           314 #> 315 18  72.0    0    NA  0  18.0   0     2  0           315 #> 316 18  96.0    0    NA  0   1.2   0     1  0           316 #> 317 18  96.0    0    NA  0  19.0   0     2  0           317 #> 318 18 120.0    0    NA  0   0.9   0     1  0           318 #> 319 18 120.0    0    NA  0  29.0   0     2  0           319 #> 320 19   0.0    1  95.5  0    NA   1     0  0           320 #> 321 19   0.0    0    NA  0 100.0   0     2  0           321 #> 322 19  24.0    0    NA  0   6.6   0     1  0           322 #> 323 19  24.0    0    NA  0  33.0   0     2  0           323 #> 324 19  36.0    0    NA  0   5.3   0     1  0           324 #> 325 19  36.0    0    NA  0  28.0   0     2  0           325 #> 326 19  48.0    0    NA  0   3.6   0     1  0           326 #> 327 19  48.0    0    NA  0  18.0   0     2  0           327 #> 328 19  72.0    0    NA  0   2.7   0     1  0           328 #> 329 19  72.0    0    NA  0  18.0   0     2  0           329 #> 330 19  96.0    0    NA  0   1.4   0     1  0           330 #> 331 19  96.0    0    NA  0  17.0   0     2  0           331 #> 332 19 120.0    0    NA  0   1.1   0     1  0           332 #> 333 19 120.0    0    NA  0  26.0   0     2  0           333 #> 334 20   0.0    1  88.5  0    NA   1     0  0           334 #> 335 20   0.0    0    NA  0 100.0   0     2  0           335 #> 336 20  24.0    0    NA  0   9.6   0     1  0           336 #> 337 20  24.0    0    NA  0  41.0   0     2  0           337 #> 338 20  36.0    0    NA  0   8.0   0     1  0           338 #> 339 20  36.0    0    NA  0  30.0   0     2  0           339 #> 340 20  48.0    0    NA  0   6.6   0     1  0           340 #> 341 20  48.0    0    NA  0  22.0   0     2  0           341 #> 342 20  72.0    0    NA  0   5.6   0     1  0           342 #> 343 20  72.0    0    NA  0  23.0   0     2  0           343 #> 344 20  96.0    0    NA  0   3.5   0     1  0           344 #> 345 20  96.0    0    NA  0  23.0   0     2  0           345 #> 346 20 120.0    0    NA  0   2.3   0     1  0           346 #> 347 20 120.0    0    NA  0  35.0   0     2  0           347 #> 348 21   0.0    1  93.0  0    NA   1     0  0           348 #> 349 21   0.0    0    NA  0 100.0   0     2  0           349 #> 350 21  24.0    0    NA  0   7.3   0     1  0           350 #> 351 21  24.0    0    NA  0  46.0   0     2  0           351 #> 352 21  36.0    0    NA  0   6.1   0     1  0           352 #> 353 21  36.0    0    NA  0  27.0   0     2  0           353 #> 354 21  48.0    0    NA  0   4.3   0     1  0           354 #> 355 21  48.0    0    NA  0  22.0   0     2  0           355 #> 356 21  72.0    0    NA  0   3.2   0     1  0           356 #> 357 21  72.0    0    NA  0  36.0   0     2  0           357 #> 358 21  96.0    0    NA  0   2.3   0     1  0           358 #> 359 21  96.0    0    NA  0  40.0   0     2  0           359 #> 360 21 120.0    0    NA  0   1.9   0     1  0           360 #> 361 21 120.0    0    NA  0  44.0   0     2  0           361 #> 362 22   0.0    1  87.0  0    NA   1     0  0           362 #> 363 22   0.0    0    NA  0 100.0   0     2  0           363 #> 364 22  24.0    0    NA  0   8.9   0     1  0           364 #> 365 22  24.0    0    NA  0  35.0   0     2  0           365 #> 366 22  36.0    0    NA  0   8.4   0     1  0           366 #> 367 22  36.0    0    NA  0  27.0   0     2  0           367 #> 368 22  48.0    0    NA  0   8.0   0     1  0           368 #> 369 22  48.0    0    NA  0  23.0   0     2  0           369 #> 370 22  72.0    0    NA  0   4.4   0     1  0           370 #> 371 22  72.0    0    NA  0  27.0   0     2  0           371 #> 372 22  96.0    0    NA  0   3.2   0     1  0           372 #> 373 22  96.0    0    NA  0  43.0   0     2  0           373 #> 374 22 120.0    0    NA  0   1.7   0     1  0           374 #> 375 22 120.0    0    NA  0  43.0   0     2  0           375 #> 376 23   0.0    1 110.0  0    NA   1     0  0           376 #> 377 23   0.0    0    NA  0 100.0   0     2  0           377 #> 378 23  24.0    0    NA  0   9.8   0     1  0           378 #> 379 23  24.0    0    NA  0  34.0   0     2  0           379 #> 380 23  36.0    0    NA  0   8.4   0     1  0           380 #> 381 23  36.0    0    NA  0  24.0   0     2  0           381 #> 382 23  48.0    0    NA  0   6.6   0     1  0           382 #> 383 23  48.0    0    NA  0  15.0   0     2  0           383 #> 384 23  72.0    0    NA  0   4.8   0     1  0           384 #> 385 23  72.0    0    NA  0  15.0   0     2  0           385 #> 386 23  96.0    0    NA  0   3.2   0     1  0           386 #> 387 23  96.0    0    NA  0  19.0   0     2  0           387 #> 388 23 120.0    0    NA  0   2.4   0     1  0           388 #> 389 23 120.0    0    NA  0  19.0   0     2  0           389 #> 390 24   0.0    1 115.0  0    NA   1     0  0           390 #> 391 24   0.0    0    NA  0  88.0   0     2  0           391 #> 392 24  24.0    0    NA  0   8.2   0     1  0           392 #> 393 24  24.0    0    NA  0  37.0   0     2  0           393 #> 394 24  36.0    0    NA  0   7.5   0     1  0           394 #> 395 24  36.0    0    NA  0  20.0   0     2  0           395 #> 396 24  48.0    0    NA  0   6.8   0     1  0           396 #> 397 24  48.0    0    NA  0  20.0   0     2  0           397 #> 398 24  72.0    0    NA  0   5.5   0     1  0           398 #> 399 24  72.0    0    NA  0  26.0   0     2  0           399 #> 400 24  96.0    0    NA  0   4.5   0     1  0           400 #> 401 24  96.0    0    NA  0  28.0   0     2  0           401 #> 402 24 120.0    0    NA  0   3.7   0     1  0           402 #> 403 24 120.0    0    NA  0  50.0   0     2  0           403 #> 404 25   0.0    1 112.0  0    NA   1     0  0           404 #> 405 25   0.0    0    NA  0 100.0   0     2  0           405 #> 406 25  24.0    0    NA  0  11.0   0     1  0           406 #> 407 25  24.0    0    NA  0  32.0   0     2  0           407 #> 408 25  36.0    0    NA  0  10.0   0     1  0           408 #> 409 25  36.0    0    NA  0  20.0   0     2  0           409 #> 410 25  48.0    0    NA  0   8.2   0     1  0           410 #> 411 25  48.0    0    NA  0  17.0   0     2  0           411 #> 412 25  72.0    0    NA  0   6.0   0     1  0           412 #> 413 25  72.0    0    NA  0  19.0   0     2  0           413 #> 414 25  96.0    0    NA  0   3.7   0     1  0           414 #> 415 25  96.0    0    NA  0  21.0   0     2  0           415 #> 416 25 120.0    0    NA  0   2.6   0     1  0           416 #> 417 25 120.0    0    NA  0  30.0   0     2  0           417 #> 418 26   0.0    1 120.0  0    NA   1     0  0           418 #> 419 26   0.0    0    NA  0 100.0   0     2  0           419 #> 420 26  24.0    0    NA  0  10.0   0     1  0           420 #> 421 26  24.0    0    NA  0  41.0   0     2  0           421 #> 422 26  36.0    0    NA  0   9.0   0     1  0           422 #> 423 26  36.0    0    NA  0  28.0   0     2  0           423 #> 424 26  48.0    0    NA  0   7.3   0     1  0           424 #> 425 26  48.0    0    NA  0  19.0   0     2  0           425 #> 426 26  72.0    0    NA  0   5.2   0     1  0           426 #> 427 26  72.0    0    NA  0  17.0   0     2  0           427 #> 428 26  96.0    0    NA  0   3.7   0     1  0           428 #> 429 26  96.0    0    NA  0  17.0   0     2  0           429 #> 430 26 120.0    0    NA  0   2.7   0     1  0           430 #> 431 26 120.0    0    NA  0  24.0   0     2  0           431 #> 432 27   0.0    1 120.0  0    NA   1     0  0           432 #> 433 27   0.0    0    NA  0 100.0   0     2  0           433 #> 434 27  24.0    0    NA  0  11.8   0     1  0           434 #> 435 27  24.0    0    NA  0  32.0   0     2  0           435 #> 436 27  36.0    0    NA  0   9.2   0     1  0           436 #> 437 27  36.0    0    NA  0  21.0   0     2  0           437 #> 438 27  48.0    0    NA  0   7.7   0     1  0           438 #> 439 27  48.0    0    NA  0  19.0   0     2  0           439 #> 440 27  72.0    0    NA  0   4.9   0     1  0           440 #> 441 27  72.0    0    NA  0  22.0   0     2  0           441 #> 442 27  96.0    0    NA  0   3.4   0     1  0           442 #> 443 27  96.0    0    NA  0  33.0   0     2  0           443 #> 444 27 120.0    0    NA  0   2.7   0     1  0           444 #> 445 27 120.0    0    NA  0  46.0   0     2  0           445 #> 446 28   0.0    1 120.0  0    NA   1     0  0           446 #> 447 28   0.0    0    NA  0 100.0   0     2  0           447 #> 448 28  24.0    0    NA  0  10.1   0     1  0           448 #> 449 28  24.0    0    NA  0  39.0   0     2  0           449 #> 450 28  36.0    0    NA  0   8.0   0     1  0           450 #> 451 28  36.0    0    NA  0  25.0   0     2  0           451 #> 452 28  48.0    0    NA  0   6.0   0     1  0           452 #> 453 28  48.0    0    NA  0  16.0   0     2  0           453 #> 454 28  72.0    0    NA  0   4.9   0     1  0           454 #> 455 28  72.0    0    NA  0  14.0   0     2  0           455 #> 456 28  96.0    0    NA  0   3.4   0     1  0           456 #> 457 28  96.0    0    NA  0  15.0   0     2  0           457 #> 458 28 120.0    0    NA  0   2.0   0     1  0           458 #> 459 28 120.0    0    NA  0  20.0   0     2  0           459 #> 460 29   0.0    1 153.0  0    NA   1     0  0           460 #> 461 29   0.0    0    NA  0  86.0   0     2  0           461 #> 462 29  24.0    0    NA  0   8.3   0     1  0           462 #> 463 29  24.0    0    NA  0  35.0   0     2  0           463 #> 464 29  36.0    0    NA  0   7.0   0     1  0           464 #> 465 29  36.0    0    NA  0  21.0   0     2  0           465 #> 466 29  48.0    0    NA  0   5.6   0     1  0           466 #> 467 29  48.0    0    NA  0  18.0   0     2  0           467 #> 468 29  72.0    0    NA  0   4.1   0     1  0           468 #> 469 29  72.0    0    NA  0  20.0   0     2  0           469 #> 470 29  96.0    0    NA  0   3.1   0     1  0           470 #> 471 29  96.0    0    NA  0  29.0   0     2  0           471 #> 472 29 120.0    0    NA  0   2.2   0     1  0           472 #> 473 29 120.0    0    NA  0  41.0   0     2  0           473 #> 474 30   0.0    1 105.0  0    NA   1     0  0           474 #> 475 30   0.0    0    NA  0 100.0   0     2  0           475 #> 476 30  24.0    0    NA  0   9.9   0     1  0           476 #> 477 30  24.0    0    NA  0  45.0   0     2  0           477 #> 478 30  36.0    0    NA  0   7.5   0     1  0           478 #> 479 30  36.0    0    NA  0  24.0   0     2  0           479 #> 480 30  48.0    0    NA  0   6.5   0     1  0           480 #> 481 30  48.0    0    NA  0  23.0   0     2  0           481 #> 482 30  72.0    0    NA  0   4.1   0     1  0           482 #> 483 30  72.0    0    NA  0  26.0   0     2  0           483 #> 484 30  96.0    0    NA  0   2.9   0     1  0           484 #> 485 30  96.0    0    NA  0  28.0   0     2  0           485 #> 486 30 120.0    0    NA  0   2.3   0     1  0           486 #> 487 30 120.0    0    NA  0  39.0   0     2  0           487 #> 488 31   0.0    1 125.0  0    NA   1     0  0           488 #> 489 31   0.0    0    NA  0 100.0   0     2  0           489 #> 490 31  24.0    0    NA  0   9.5   0     1  0           490 #> 491 31  24.0    0    NA  0  45.0   0     2  0           491 #> 492 31  36.0    0    NA  0   7.8   0     1  0           492 #> 493 31  36.0    0    NA  0  30.0   0     2  0           493 #> 494 31  48.0    0    NA  0   6.4   0     1  0           494 #> 495 31  48.0    0    NA  0  24.0   0     2  0           495 #> 496 31  72.0    0    NA  0   4.5   0     1  0           496 #> 497 31  72.0    0    NA  0  22.0   0     2  0           497 #> 498 31  96.0    0    NA  0   3.4   0     1  0           498 #> 499 31  96.0    0    NA  0  28.0   0     2  0           499 #> 500 31 120.0    0    NA  0   2.5   0     1  0           500 #> 501 31 120.0    0    NA  0  42.0   0     2  0           501 #> 502 32   0.0    1  93.0  0    NA   1     0  0           502 #> 503 32   0.0    0    NA  0 100.0   0     2  0           503 #> 504 32  24.0    0    NA  0   8.9   0     1  0           504 #> 505 32  24.0    0    NA  0  36.0   0     2  0           505 #> 506 32  36.0    0    NA  0   7.7   0     1  0           506 #> 507 32  36.0    0    NA  0  27.0   0     2  0           507 #> 508 32  48.0    0    NA  0   6.9   0     1  0           508 #> 509 32  48.0    0    NA  0  24.0   0     2  0           509 #> 510 32  72.0    0    NA  0   4.4   0     1  0           510 #> 511 32  72.0    0    NA  0  23.0   0     2  0           511 #> 512 32  96.0    0    NA  0   3.5   0     1  0           512 #> 513 32  96.0    0    NA  0  20.0   0     2  0           513 #> 514 32 120.0    0    NA  0   2.5   0     1  0           514 #> 515 32 120.0    0    NA  0  22.0   0     2  0           515 #>  #> $adm #>   adm cmt  type #> 1   1   1 bolus #>   bblDatToNonmem(pk.turnover.emax3, nlmixr2data::warfarin) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>     ID  TIME EVID   AMT    DV CMT DVID nlmixrRowNums #> 1    1   0.0    1 100.0    NA   1   NA             1 #> 2    1   0.5    0    NA   0.0  NA    1             2 #> 3    1   1.0    0    NA   1.9  NA    1             3 #> 4    1   2.0    0    NA   3.3  NA    1             4 #> 5    1   3.0    0    NA   6.6  NA    1             5 #> 6    1   6.0    0    NA   9.1  NA    1             6 #> 7    1   9.0    0    NA  10.8  NA    1             7 #> 8    1  12.0    0    NA   8.6  NA    1             8 #> 9    1  24.0    0    NA   5.6  NA    1             9 #> 10   1  24.0    0    NA  44.0  NA    2            10 #> 11   1  36.0    0    NA   4.0  NA    1            11 #> 12   1  36.0    0    NA  27.0  NA    2            12 #> 13   1  48.0    0    NA   2.7  NA    1            13 #> 14   1  48.0    0    NA  28.0  NA    2            14 #> 15   1  72.0    0    NA   0.8  NA    1            15 #> 16   1  72.0    0    NA  31.0  NA    2            16 #> 17   1  96.0    0    NA  60.0  NA    2            17 #> 18   1 120.0    0    NA  65.0  NA    2            18 #> 19   1 144.0    0    NA  71.0  NA    2            19 #> 20   2   0.0    1 100.0    NA   1   NA            20 #> 21   2   0.0    0    NA 100.0  NA    2            21 #> 22   2  24.0    0    NA   9.2  NA    1            22 #> 23   2  24.0    0    NA  49.0  NA    2            23 #> 24   2  36.0    0    NA   8.5  NA    1            24 #> 25   2  36.0    0    NA  32.0  NA    2            25 #> 26   2  48.0    0    NA   6.4  NA    1            26 #> 27   2  48.0    0    NA  26.0  NA    2            27 #> 28   2  72.0    0    NA   4.8  NA    1            28 #> 29   2  72.0    0    NA  22.0  NA    2            29 #> 30   2  96.0    0    NA   3.1  NA    1            30 #> 31   2  96.0    0    NA  28.0  NA    2            31 #> 32   2 120.0    0    NA   2.5  NA    1            32 #> 33   2 120.0    0    NA  33.0  NA    2            33 #> 34   3   0.0    1 100.0    NA   1   NA            34 #> 35   3   0.0    0    NA 100.0  NA    2            35 #> 36   3   0.5    0    NA   0.0  NA    1            36 #> 37   3   2.0    0    NA   8.4  NA    1            37 #> 38   3   3.0    0    NA   9.7  NA    1            38 #> 39   3   6.0    0    NA   9.8  NA    1            39 #> 40   3  12.0    0    NA  11.0  NA    1            40 #> 41   3  24.0    0    NA   8.3  NA    1            41 #> 42   3  24.0    0    NA  46.0  NA    2            42 #> 43   3  36.0    0    NA   7.7  NA    1            43 #> 44   3  36.0    0    NA  22.0  NA    2            44 #> 45   3  48.0    0    NA   6.3  NA    1            45 #> 46   3  48.0    0    NA  19.0  NA    2            46 #> 47   3  72.0    0    NA   4.1  NA    1            47 #> 48   3  72.0    0    NA  20.0  NA    2            48 #> 49   3  96.0    0    NA   3.0  NA    1            49 #> 50   3  96.0    0    NA  42.0  NA    2            50 #> 51   3 120.0    0    NA   1.4  NA    1            51 #> 52   3 120.0    0    NA  49.0  NA    2            52 #> 53   3 144.0    0    NA  54.0  NA    2            53 #> 54   4   0.0    1 120.0    NA   1   NA            54 #> 55   4   0.0    0    NA 100.0  NA    2            55 #> 56   4   3.0    0    NA  12.0  NA    1            56 #> 57   4   6.0    0    NA  13.2  NA    1            57 #> 58   4   9.0    0    NA  14.4  NA    1            58 #> 59   4  24.0    0    NA   9.6  NA    1            59 #> 60   4  24.0    0    NA  30.0  NA    2            60 #> 61   4  36.0    0    NA   8.2  NA    1            61 #> 62   4  36.0    0    NA  24.0  NA    2            62 #> 63   4  48.0    0    NA   7.8  NA    1            63 #> 64   4  48.0    0    NA  13.0  NA    2            64 #> 65   4  72.0    0    NA   5.8  NA    1            65 #> 66   4  72.0    0    NA   9.0  NA    2            66 #> 67   4  96.0    0    NA   4.3  NA    1            67 #> 68   4  96.0    0    NA   9.0  NA    2            68 #> 69   4 120.0    0    NA   3.0  NA    1            69 #> 70   4 120.0    0    NA  11.0  NA    2            70 #> 71   4 144.0    0    NA  12.0  NA    2            71 #> 72   5   0.0    1  60.0    NA   1   NA            72 #> 73   5   0.0    0    NA  82.0  NA    2            73 #> 74   5   3.0    0    NA  11.1  NA    1            74 #> 75   5   6.0    0    NA  11.9  NA    1            75 #> 76   5   9.0    0    NA   9.8  NA    1            76 #> 77   5  12.0    0    NA  11.0  NA    1            77 #> 78   5  24.0    0    NA   8.5  NA    1            78 #> 79   5  24.0    0    NA  43.0  NA    2            79 #> 80   5  36.0    0    NA   7.6  NA    1            80 #> 81   5  36.0    0    NA  25.0  NA    2            81 #> 82   5  48.0    0    NA   5.4  NA    1            82 #> 83   5  48.0    0    NA  18.0  NA    2            83 #> 84   5  72.0    0    NA   4.5  NA    1            84 #> 85   5  72.0    0    NA  17.0  NA    2            85 #> 86   5  96.0    0    NA   3.3  NA    1            86 #> 87   5  96.0    0    NA  23.0  NA    2            87 #> 88   5 120.0    0    NA   2.3  NA    1            88 #> 89   5 120.0    0    NA  29.0  NA    2            89 #> 90   5 144.0    0    NA  41.0  NA    2            90 #> 91   6   0.0    1 113.0    NA   1   NA            91 #> 92   6   0.0    0    NA 100.0  NA    2            92 #> 93   6   6.0    0    NA   8.6  NA    1            93 #> 94   6  12.0    0    NA   8.6  NA    1            94 #> 95   6  24.0    0    NA   7.0  NA    1            95 #> 96   6  24.0    0    NA  34.0  NA    2            96 #> 97   6  36.0    0    NA   5.7  NA    1            97 #> 98   6  36.0    0    NA  23.0  NA    2            98 #> 99   6  48.0    0    NA   4.7  NA    1            99 #> 100  6  48.0    0    NA  20.0  NA    2           100 #> 101  6  72.0    0    NA   3.3  NA    1           101 #> 102  6  72.0    0    NA  16.0  NA    2           102 #> 103  6  96.0    0    NA   2.3  NA    1           103 #> 104  6  96.0    0    NA  17.0  NA    2           104 #> 105  6 120.0    0    NA   1.7  NA    1           105 #> 106  6 120.0    0    NA  18.0  NA    2           106 #> 107  6 144.0    0    NA  25.0  NA    2           107 #> 108  7   0.0    1  90.0    NA   1   NA           108 #> 109  7   3.0    0    NA  13.4  NA    1           109 #> 110  7   6.0    0    NA  12.4  NA    1           110 #> 111  7   9.0    0    NA  12.7  NA    1           111 #> 112  7  12.0    0    NA   8.8  NA    1           112 #> 113  7  24.0    0    NA   6.1  NA    1           113 #> 114  7  24.0    0    NA  36.0  NA    2           114 #> 115  7  36.0    0    NA   3.5  NA    1           115 #> 116  7  36.0    0    NA  33.0  NA    2           116 #> 117  7  48.0    0    NA   1.8  NA    1           117 #> 118  7  48.0    0    NA  28.0  NA    2           118 #> 119  7  72.0    0    NA   1.5  NA    1           119 #> 120  7  72.0    0    NA  52.0  NA    2           120 #> 121  7  96.0    0    NA   1.0  NA    1           121 #> 122  7  96.0    0    NA  80.0  NA    2           122 #> 123  7 120.0    0    NA  90.0  NA    2           123 #> 124  7 144.0    0    NA 100.0  NA    2           124 #> 125  8   0.0    1 135.0    NA   1   NA           125 #> 126  8   0.0    0    NA  88.0  NA    2           126 #> 127  8   2.0    0    NA  17.6  NA    1           127 #> 128  8   3.0    0    NA  17.3  NA    1           128 #> 129  8   6.0    0    NA  15.0  NA    1           129 #> 130  8   9.0    0    NA  15.0  NA    1           130 #> 131  8  12.0    0    NA  12.4  NA    1           131 #> 132  8  24.0    0    NA   7.9  NA    1           132 #> 133  8  24.0    0    NA  35.0  NA    2           133 #> 134  8  36.0    0    NA   7.9  NA    1           134 #> 135  8  36.0    0    NA  20.0  NA    2           135 #> 136  8  48.0    0    NA   5.1  NA    1           136 #> 137  8  48.0    0    NA  12.0  NA    2           137 #> 138  8  72.0    0    NA   3.6  NA    1           138 #> 139  8  72.0    0    NA  16.0  NA    2           139 #> 140  8  96.0    0    NA   2.4  NA    1           140 #> 141  8  96.0    0    NA  23.0  NA    2           141 #> 142  8 120.0    0    NA   2.0  NA    1           142 #> 143  8 120.0    0    NA  36.0  NA    2           143 #> 144  8 144.0    0    NA  48.0  NA    2           144 #> 145  9   0.0    1  75.0    NA   1   NA           145 #> 146  9   0.0    0    NA  92.0  NA    2           146 #> 147  9   0.5    0    NA   0.0  NA    1           147 #> 148  9   1.0    0    NA   1.0  NA    1           148 #> 149  9   2.0    0    NA   4.6  NA    1           149 #> 150  9   3.0    0    NA  12.7  NA    1           150 #> 151  9   3.0    0    NA   8.0  NA    1           151 #> 152  9   6.0    0    NA  12.7  NA    1           152 #> 153  9   6.0    0    NA  11.5  NA    1           153 #> 154  9   9.0    0    NA  12.9  NA    1           154 #> 155  9   9.0    0    NA  11.4  NA    1           155 #> 156  9  12.0    0    NA  11.4  NA    1           156 #> 157  9  12.0    0    NA  11.0  NA    1           157 #> 158  9  24.0    0    NA   9.1  NA    1           158 #> 159  9  24.0    0    NA  33.0  NA    2           159 #> 160  9  36.0    0    NA   8.2  NA    1           160 #> 161  9  36.0    0    NA  22.0  NA    2           161 #> 162  9  48.0    0    NA   5.9  NA    1           162 #> 163  9  48.0    0    NA  16.0  NA    2           163 #> 164  9  72.0    0    NA   3.6  NA    1           164 #> 165  9  72.0    0    NA  18.0  NA    2           165 #> 166  9  96.0    0    NA   1.7  NA    1           166 #> 167  9  96.0    0    NA  32.0  NA    2           167 #> 168  9 120.0    0    NA   1.1  NA    1           168 #> 169  9 120.0    0    NA  30.0  NA    2           169 #> 170  9 144.0    0    NA  45.0  NA    2           170 #> 171 10   0.0    1 105.0    NA   1   NA           171 #> 172 10   0.0    0    NA  90.0  NA    2           172 #> 173 10  24.0    0    NA   8.6  NA    1           173 #> 174 10  24.0    0    NA  39.0  NA    2           174 #> 175 10  36.0    0    NA   8.0  NA    1           175 #> 176 10  36.0    0    NA  22.0  NA    2           176 #> 177 10  48.0    0    NA   6.0  NA    1           177 #> 178 10  48.0    0    NA  17.0  NA    2           178 #> 179 10  72.0    0    NA   4.4  NA    1           179 #> 180 10  72.0    0    NA  17.0  NA    2           180 #> 181 10  96.0    0    NA   3.6  NA    1           181 #> 182 10  96.0    0    NA  22.0  NA    2           182 #> 183 10 120.0    0    NA   2.8  NA    1           183 #> 184 10 120.0    0    NA  25.0  NA    2           184 #> 185 10 144.0    0    NA  33.0  NA    2           185 #> 186 11   0.0    1 123.0    NA   1   NA           186 #> 187 11   0.0    0    NA 100.0  NA    2           187 #> 188 11   1.5    0    NA  11.4  NA    1           188 #> 189 11   3.0    0    NA  15.4  NA    1           189 #> 190 11   6.0    0    NA  17.5  NA    1           190 #> 191 11  12.0    0    NA  14.0  NA    1           191 #> 192 11  24.0    0    NA   9.0  NA    1           192 #> 193 11  24.0    0    NA  37.0  NA    2           193 #> 194 11  36.0    0    NA   8.9  NA    1           194 #> 195 11  36.0    0    NA  24.0  NA    2           195 #> 196 11  48.0    0    NA   6.6  NA    1           196 #> 197 11  48.0    0    NA  14.0  NA    2           197 #> 198 11  72.0    0    NA   4.2  NA    1           198 #> 199 11  72.0    0    NA  11.0  NA    2           199 #> 200 11  96.0    0    NA   3.6  NA    1           200 #> 201 11  96.0    0    NA  14.0  NA    2           201 #> 202 11 120.0    0    NA   2.6  NA    1           202 #> 203 11 120.0    0    NA  23.0  NA    2           203 #> 204 11 144.0    0    NA  33.0  NA    2           204 #> 205 12   0.0    1 113.0    NA   1   NA           205 #> 206 12   0.0    0    NA  85.0  NA    2           206 #> 207 12   1.5    0    NA   0.6  NA    1           207 #> 208 12   3.0    0    NA   2.8  NA    1           208 #> 209 12   6.0    0    NA  13.8  NA    1           209 #> 210 12   9.0    0    NA  15.0  NA    1           210 #> 211 12  24.0    0    NA  10.5  NA    1           211 #> 212 12  24.0    0    NA  25.0  NA    2           212 #> 213 12  36.0    0    NA   9.1  NA    1           213 #> 214 12  36.0    0    NA  15.0  NA    2           214 #> 215 12  48.0    0    NA   6.6  NA    1           215 #> 216 12  48.0    0    NA  11.0  NA    2           216 #> 217 12  72.0    0    NA   4.9  NA    1           217 #> 218 12  96.0    0    NA   2.4  NA    1           218 #> 219 12 120.0    0    NA   1.9  NA    1           219 #> 220 13   0.0    1 113.0    NA   1   NA           220 #> 221 13   0.0    0    NA  88.0  NA    2           221 #> 222 13   1.5    0    NA   3.6  NA    1           222 #> 223 13   3.0    0    NA  12.9  NA    1           223 #> 224 13   6.0    0    NA  12.9  NA    1           224 #> 225 13   9.0    0    NA  10.2  NA    1           225 #> 226 13  24.0    0    NA   6.4  NA    1           226 #> 227 13  24.0    0    NA  41.0  NA    2           227 #> 228 13  36.0    0    NA   6.9  NA    1           228 #> 229 13  36.0    0    NA  23.0  NA    2           229 #> 230 13  48.0    0    NA   4.5  NA    1           230 #> 231 13  48.0    0    NA  16.0  NA    2           231 #> 232 13  72.0    0    NA   3.2  NA    1           232 #> 233 13  72.0    0    NA  14.0  NA    2           233 #> 234 13  96.0    0    NA   2.4  NA    1           234 #> 235 13  96.0    0    NA  18.0  NA    2           235 #> 236 13 120.0    0    NA   1.3  NA    1           236 #> 237 13 120.0    0    NA  22.0  NA    2           237 #> 238 13 144.0    0    NA  35.0  NA    2           238 #> 239 14   0.0    1  75.0    NA   1   NA           239 #> 240 14   0.0    0    NA  85.0  NA    2           240 #> 241 14   0.5    0    NA   0.0  NA    1           241 #> 242 14   1.0    0    NA   2.7  NA    1           242 #> 243 14   2.0    0    NA  11.6  NA    1           243 #> 244 14   3.0    0    NA  11.6  NA    1           244 #> 245 14   6.0    0    NA  11.3  NA    1           245 #> 246 14   9.0    0    NA   9.7  NA    1           246 #> 247 14  24.0    0    NA   6.5  NA    1           247 #> 248 14  24.0    0    NA  32.0  NA    2           248 #> 249 14  36.0    0    NA   5.2  NA    1           249 #> 250 14  36.0    0    NA  22.0  NA    2           250 #> 251 14  48.0    0    NA   3.6  NA    1           251 #> 252 14  48.0    0    NA  21.0  NA    2           252 #> 253 14  72.0    0    NA   2.4  NA    1           253 #> 254 14  72.0    0    NA  28.0  NA    2           254 #> 255 14  96.0    0    NA   0.9  NA    1           255 #> 256 14  96.0    0    NA  38.0  NA    2           256 #> 257 14 120.0    0    NA  46.0  NA    2           257 #> 258 14 144.0    0    NA  65.0  NA    2           258 #> 259 15   0.0    1  85.0    NA   1   NA           259 #> 260 15   0.0    0    NA 100.0  NA    2           260 #> 261 15   1.0    0    NA   6.6  NA    1           261 #> 262 15   3.0    0    NA  11.9  NA    1           262 #> 263 15   6.0    0    NA  11.7  NA    1           263 #> 264 15   9.0    0    NA  12.2  NA    1           264 #> 265 15  24.0    0    NA   8.1  NA    1           265 #> 266 15  24.0    0    NA  43.0  NA    2           266 #> 267 15  36.0    0    NA   7.4  NA    1           267 #> 268 15  36.0    0    NA  26.0  NA    2           268 #> 269 15  48.0    0    NA   6.8  NA    1           269 #> 270 15  48.0    0    NA  15.0  NA    2           270 #> 271 15  72.0    0    NA   5.3  NA    1           271 #> 272 15  72.0    0    NA  13.0  NA    2           272 #> 273 15  96.0    0    NA   3.0  NA    1           273 #> 274 15  96.0    0    NA  21.0  NA    2           274 #> 275 15 120.0    0    NA   2.0  NA    1           275 #> 276 15 120.0    0    NA  28.0  NA    2           276 #> 277 15 144.0    0    NA  39.0  NA    2           277 #> 278 16   0.0    1  87.0    NA   1   NA           278 #> 279 16   0.0    0    NA 100.0  NA    2           279 #> 280 16  24.0    0    NA  10.4  NA    1           280 #> 281 16  24.0    0    NA  42.0  NA    2           281 #> 282 16  36.0    0    NA   8.9  NA    1           282 #> 283 16  36.0    0    NA  32.0  NA    2           283 #> 284 16  48.0    0    NA   7.0  NA    1           284 #> 285 16  48.0    0    NA  26.0  NA    2           285 #> 286 16  72.0    0    NA   4.4  NA    1           286 #> 287 16  72.0    0    NA  31.0  NA    2           287 #> 288 16  96.0    0    NA   3.2  NA    1           288 #> 289 16  96.0    0    NA  33.0  NA    2           289 #> 290 16 120.0    0    NA   2.4  NA    1           290 #> 291 16 120.0    0    NA  54.0  NA    2           291 #> 292 17   0.0    1 117.0    NA   1   NA           292 #> 293 17   0.0    0    NA 100.0  NA    2           293 #> 294 17  24.0    0    NA   7.6  NA    1           294 #> 295 17  24.0    0    NA  35.0  NA    2           295 #> 296 17  36.0    0    NA   6.4  NA    1           296 #> 297 17  36.0    0    NA  23.0  NA    2           297 #> 298 17  48.0    0    NA   6.0  NA    1           298 #> 299 17  48.0    0    NA  17.0  NA    2           299 #> 300 17  72.0    0    NA   4.0  NA    1           300 #> 301 17  72.0    0    NA  18.0  NA    2           301 #> 302 17  96.0    0    NA   3.1  NA    1           302 #> 303 17  96.0    0    NA  18.0  NA    2           303 #> 304 17 120.0    0    NA   2.0  NA    1           304 #> 305 17 120.0    0    NA  21.0  NA    2           305 #> 306 18   0.0    1 112.0    NA   1   NA           306 #> 307 18   0.0    0    NA 100.0  NA    2           307 #> 308 18  24.0    0    NA   7.6  NA    1           308 #> 309 18  24.0    0    NA  32.0  NA    2           309 #> 310 18  36.0    0    NA   6.6  NA    1           310 #> 311 18  36.0    0    NA  20.0  NA    2           311 #> 312 18  48.0    0    NA   5.4  NA    1           312 #> 313 18  48.0    0    NA  18.0  NA    2           313 #> 314 18  72.0    0    NA   3.4  NA    1           314 #> 315 18  72.0    0    NA  18.0  NA    2           315 #> 316 18  96.0    0    NA   1.2  NA    1           316 #> 317 18  96.0    0    NA  19.0  NA    2           317 #> 318 18 120.0    0    NA   0.9  NA    1           318 #> 319 18 120.0    0    NA  29.0  NA    2           319 #> 320 19   0.0    1  95.5    NA   1   NA           320 #> 321 19   0.0    0    NA 100.0  NA    2           321 #> 322 19  24.0    0    NA   6.6  NA    1           322 #> 323 19  24.0    0    NA  33.0  NA    2           323 #> 324 19  36.0    0    NA   5.3  NA    1           324 #> 325 19  36.0    0    NA  28.0  NA    2           325 #> 326 19  48.0    0    NA   3.6  NA    1           326 #> 327 19  48.0    0    NA  18.0  NA    2           327 #> 328 19  72.0    0    NA   2.7  NA    1           328 #> 329 19  72.0    0    NA  18.0  NA    2           329 #> 330 19  96.0    0    NA   1.4  NA    1           330 #> 331 19  96.0    0    NA  17.0  NA    2           331 #> 332 19 120.0    0    NA   1.1  NA    1           332 #> 333 19 120.0    0    NA  26.0  NA    2           333 #> 334 20   0.0    1  88.5    NA   1   NA           334 #> 335 20   0.0    0    NA 100.0  NA    2           335 #> 336 20  24.0    0    NA   9.6  NA    1           336 #> 337 20  24.0    0    NA  41.0  NA    2           337 #> 338 20  36.0    0    NA   8.0  NA    1           338 #> 339 20  36.0    0    NA  30.0  NA    2           339 #> 340 20  48.0    0    NA   6.6  NA    1           340 #> 341 20  48.0    0    NA  22.0  NA    2           341 #> 342 20  72.0    0    NA   5.6  NA    1           342 #> 343 20  72.0    0    NA  23.0  NA    2           343 #> 344 20  96.0    0    NA   3.5  NA    1           344 #> 345 20  96.0    0    NA  23.0  NA    2           345 #> 346 20 120.0    0    NA   2.3  NA    1           346 #> 347 20 120.0    0    NA  35.0  NA    2           347 #> 348 21   0.0    1  93.0    NA   1   NA           348 #> 349 21   0.0    0    NA 100.0  NA    2           349 #> 350 21  24.0    0    NA   7.3  NA    1           350 #> 351 21  24.0    0    NA  46.0  NA    2           351 #> 352 21  36.0    0    NA   6.1  NA    1           352 #> 353 21  36.0    0    NA  27.0  NA    2           353 #> 354 21  48.0    0    NA   4.3  NA    1           354 #> 355 21  48.0    0    NA  22.0  NA    2           355 #> 356 21  72.0    0    NA   3.2  NA    1           356 #> 357 21  72.0    0    NA  36.0  NA    2           357 #> 358 21  96.0    0    NA   2.3  NA    1           358 #> 359 21  96.0    0    NA  40.0  NA    2           359 #> 360 21 120.0    0    NA   1.9  NA    1           360 #> 361 21 120.0    0    NA  44.0  NA    2           361 #> 362 22   0.0    1  87.0    NA   1   NA           362 #> 363 22   0.0    0    NA 100.0  NA    2           363 #> 364 22  24.0    0    NA   8.9  NA    1           364 #> 365 22  24.0    0    NA  35.0  NA    2           365 #> 366 22  36.0    0    NA   8.4  NA    1           366 #> 367 22  36.0    0    NA  27.0  NA    2           367 #> 368 22  48.0    0    NA   8.0  NA    1           368 #> 369 22  48.0    0    NA  23.0  NA    2           369 #> 370 22  72.0    0    NA   4.4  NA    1           370 #> 371 22  72.0    0    NA  27.0  NA    2           371 #> 372 22  96.0    0    NA   3.2  NA    1           372 #> 373 22  96.0    0    NA  43.0  NA    2           373 #> 374 22 120.0    0    NA   1.7  NA    1           374 #> 375 22 120.0    0    NA  43.0  NA    2           375 #> 376 23   0.0    1 110.0    NA   1   NA           376 #> 377 23   0.0    0    NA 100.0  NA    2           377 #> 378 23  24.0    0    NA   9.8  NA    1           378 #> 379 23  24.0    0    NA  34.0  NA    2           379 #> 380 23  36.0    0    NA   8.4  NA    1           380 #> 381 23  36.0    0    NA  24.0  NA    2           381 #> 382 23  48.0    0    NA   6.6  NA    1           382 #> 383 23  48.0    0    NA  15.0  NA    2           383 #> 384 23  72.0    0    NA   4.8  NA    1           384 #> 385 23  72.0    0    NA  15.0  NA    2           385 #> 386 23  96.0    0    NA   3.2  NA    1           386 #> 387 23  96.0    0    NA  19.0  NA    2           387 #> 388 23 120.0    0    NA   2.4  NA    1           388 #> 389 23 120.0    0    NA  19.0  NA    2           389 #> 390 24   0.0    1 115.0    NA   1   NA           390 #> 391 24   0.0    0    NA  88.0  NA    2           391 #> 392 24  24.0    0    NA   8.2  NA    1           392 #> 393 24  24.0    0    NA  37.0  NA    2           393 #> 394 24  36.0    0    NA   7.5  NA    1           394 #> 395 24  36.0    0    NA  20.0  NA    2           395 #> 396 24  48.0    0    NA   6.8  NA    1           396 #> 397 24  48.0    0    NA  20.0  NA    2           397 #> 398 24  72.0    0    NA   5.5  NA    1           398 #> 399 24  72.0    0    NA  26.0  NA    2           399 #> 400 24  96.0    0    NA   4.5  NA    1           400 #> 401 24  96.0    0    NA  28.0  NA    2           401 #> 402 24 120.0    0    NA   3.7  NA    1           402 #> 403 24 120.0    0    NA  50.0  NA    2           403 #> 404 25   0.0    1 112.0    NA   1   NA           404 #> 405 25   0.0    0    NA 100.0  NA    2           405 #> 406 25  24.0    0    NA  11.0  NA    1           406 #> 407 25  24.0    0    NA  32.0  NA    2           407 #> 408 25  36.0    0    NA  10.0  NA    1           408 #> 409 25  36.0    0    NA  20.0  NA    2           409 #> 410 25  48.0    0    NA   8.2  NA    1           410 #> 411 25  48.0    0    NA  17.0  NA    2           411 #> 412 25  72.0    0    NA   6.0  NA    1           412 #> 413 25  72.0    0    NA  19.0  NA    2           413 #> 414 25  96.0    0    NA   3.7  NA    1           414 #> 415 25  96.0    0    NA  21.0  NA    2           415 #> 416 25 120.0    0    NA   2.6  NA    1           416 #> 417 25 120.0    0    NA  30.0  NA    2           417 #> 418 26   0.0    1 120.0    NA   1   NA           418 #> 419 26   0.0    0    NA 100.0  NA    2           419 #> 420 26  24.0    0    NA  10.0  NA    1           420 #> 421 26  24.0    0    NA  41.0  NA    2           421 #> 422 26  36.0    0    NA   9.0  NA    1           422 #> 423 26  36.0    0    NA  28.0  NA    2           423 #> 424 26  48.0    0    NA   7.3  NA    1           424 #> 425 26  48.0    0    NA  19.0  NA    2           425 #> 426 26  72.0    0    NA   5.2  NA    1           426 #> 427 26  72.0    0    NA  17.0  NA    2           427 #> 428 26  96.0    0    NA   3.7  NA    1           428 #> 429 26  96.0    0    NA  17.0  NA    2           429 #> 430 26 120.0    0    NA   2.7  NA    1           430 #> 431 26 120.0    0    NA  24.0  NA    2           431 #> 432 27   0.0    1 120.0    NA   1   NA           432 #> 433 27   0.0    0    NA 100.0  NA    2           433 #> 434 27  24.0    0    NA  11.8  NA    1           434 #> 435 27  24.0    0    NA  32.0  NA    2           435 #> 436 27  36.0    0    NA   9.2  NA    1           436 #> 437 27  36.0    0    NA  21.0  NA    2           437 #> 438 27  48.0    0    NA   7.7  NA    1           438 #> 439 27  48.0    0    NA  19.0  NA    2           439 #> 440 27  72.0    0    NA   4.9  NA    1           440 #> 441 27  72.0    0    NA  22.0  NA    2           441 #> 442 27  96.0    0    NA   3.4  NA    1           442 #> 443 27  96.0    0    NA  33.0  NA    2           443 #> 444 27 120.0    0    NA   2.7  NA    1           444 #> 445 27 120.0    0    NA  46.0  NA    2           445 #> 446 28   0.0    1 120.0    NA   1   NA           446 #> 447 28   0.0    0    NA 100.0  NA    2           447 #> 448 28  24.0    0    NA  10.1  NA    1           448 #> 449 28  24.0    0    NA  39.0  NA    2           449 #> 450 28  36.0    0    NA   8.0  NA    1           450 #> 451 28  36.0    0    NA  25.0  NA    2           451 #> 452 28  48.0    0    NA   6.0  NA    1           452 #> 453 28  48.0    0    NA  16.0  NA    2           453 #> 454 28  72.0    0    NA   4.9  NA    1           454 #> 455 28  72.0    0    NA  14.0  NA    2           455 #> 456 28  96.0    0    NA   3.4  NA    1           456 #> 457 28  96.0    0    NA  15.0  NA    2           457 #> 458 28 120.0    0    NA   2.0  NA    1           458 #> 459 28 120.0    0    NA  20.0  NA    2           459 #> 460 29   0.0    1 153.0    NA   1   NA           460 #> 461 29   0.0    0    NA  86.0  NA    2           461 #> 462 29  24.0    0    NA   8.3  NA    1           462 #> 463 29  24.0    0    NA  35.0  NA    2           463 #> 464 29  36.0    0    NA   7.0  NA    1           464 #> 465 29  36.0    0    NA  21.0  NA    2           465 #> 466 29  48.0    0    NA   5.6  NA    1           466 #> 467 29  48.0    0    NA  18.0  NA    2           467 #> 468 29  72.0    0    NA   4.1  NA    1           468 #> 469 29  72.0    0    NA  20.0  NA    2           469 #> 470 29  96.0    0    NA   3.1  NA    1           470 #> 471 29  96.0    0    NA  29.0  NA    2           471 #> 472 29 120.0    0    NA   2.2  NA    1           472 #> 473 29 120.0    0    NA  41.0  NA    2           473 #> 474 30   0.0    1 105.0    NA   1   NA           474 #> 475 30   0.0    0    NA 100.0  NA    2           475 #> 476 30  24.0    0    NA   9.9  NA    1           476 #> 477 30  24.0    0    NA  45.0  NA    2           477 #> 478 30  36.0    0    NA   7.5  NA    1           478 #> 479 30  36.0    0    NA  24.0  NA    2           479 #> 480 30  48.0    0    NA   6.5  NA    1           480 #> 481 30  48.0    0    NA  23.0  NA    2           481 #> 482 30  72.0    0    NA   4.1  NA    1           482 #> 483 30  72.0    0    NA  26.0  NA    2           483 #> 484 30  96.0    0    NA   2.9  NA    1           484 #> 485 30  96.0    0    NA  28.0  NA    2           485 #> 486 30 120.0    0    NA   2.3  NA    1           486 #> 487 30 120.0    0    NA  39.0  NA    2           487 #> 488 31   0.0    1 125.0    NA   1   NA           488 #> 489 31   0.0    0    NA 100.0  NA    2           489 #> 490 31  24.0    0    NA   9.5  NA    1           490 #> 491 31  24.0    0    NA  45.0  NA    2           491 #> 492 31  36.0    0    NA   7.8  NA    1           492 #> 493 31  36.0    0    NA  30.0  NA    2           493 #> 494 31  48.0    0    NA   6.4  NA    1           494 #> 495 31  48.0    0    NA  24.0  NA    2           495 #> 496 31  72.0    0    NA   4.5  NA    1           496 #> 497 31  72.0    0    NA  22.0  NA    2           497 #> 498 31  96.0    0    NA   3.4  NA    1           498 #> 499 31  96.0    0    NA  28.0  NA    2           499 #> 500 31 120.0    0    NA   2.5  NA    1           500 #> 501 31 120.0    0    NA  42.0  NA    2           501 #> 502 32   0.0    1  93.0    NA   1   NA           502 #> 503 32   0.0    0    NA 100.0  NA    2           503 #> 504 32  24.0    0    NA   8.9  NA    1           504 #> 505 32  24.0    0    NA  36.0  NA    2           505 #> 506 32  36.0    0    NA   7.7  NA    1           506 #> 507 32  36.0    0    NA  27.0  NA    2           507 #> 508 32  48.0    0    NA   6.9  NA    1           508 #> 509 32  48.0    0    NA  24.0  NA    2           509 #> 510 32  72.0    0    NA   4.4  NA    1           510 #> 511 32  72.0    0    NA  23.0  NA    2           511 #> 512 32  96.0    0    NA   3.5  NA    1           512 #> 513 32  96.0    0    NA  20.0  NA    2           513 #> 514 32 120.0    0    NA   2.5  NA    1           514 #> 515 32 120.0    0    NA  22.0  NA    2           515  bblDatToMrgsolve(pk.turnover.emax3, nlmixr2data::warfarin) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>     ID  TIME EVID   AMT II    DV CMT DVID SS nlmixrRowNums #> 1    1   0.0    1 100.0  0    NA   1    0  0             1 #> 2    1   0.5    0    NA  0   0.0   5    1  0             2 #> 3    1   1.0    0    NA  0   1.9   5    1  0             3 #> 4    1   2.0    0    NA  0   3.3   5    1  0             4 #> 5    1   3.0    0    NA  0   6.6   5    1  0             5 #> 6    1   6.0    0    NA  0   9.1   5    1  0             6 #> 7    1   9.0    0    NA  0  10.8   5    1  0             7 #> 8    1  12.0    0    NA  0   8.6   5    1  0             8 #> 9    1  24.0    0    NA  0   5.6   5    1  0             9 #> 10   1  24.0    0    NA  0  44.0   6    2  0            10 #> 11   1  36.0    0    NA  0   4.0   5    1  0            11 #> 12   1  36.0    0    NA  0  27.0   6    2  0            12 #> 13   1  48.0    0    NA  0   2.7   5    1  0            13 #> 14   1  48.0    0    NA  0  28.0   6    2  0            14 #> 15   1  72.0    0    NA  0   0.8   5    1  0            15 #> 16   1  72.0    0    NA  0  31.0   6    2  0            16 #> 17   1  96.0    0    NA  0  60.0   6    2  0            17 #> 18   1 120.0    0    NA  0  65.0   6    2  0            18 #> 19   1 144.0    0    NA  0  71.0   6    2  0            19 #> 20   2   0.0    1 100.0  0    NA   1    0  0            20 #> 21   2   0.0    0    NA  0 100.0   6    2  0            21 #> 22   2  24.0    0    NA  0   9.2   5    1  0            22 #> 23   2  24.0    0    NA  0  49.0   6    2  0            23 #> 24   2  36.0    0    NA  0   8.5   5    1  0            24 #> 25   2  36.0    0    NA  0  32.0   6    2  0            25 #> 26   2  48.0    0    NA  0   6.4   5    1  0            26 #> 27   2  48.0    0    NA  0  26.0   6    2  0            27 #> 28   2  72.0    0    NA  0   4.8   5    1  0            28 #> 29   2  72.0    0    NA  0  22.0   6    2  0            29 #> 30   2  96.0    0    NA  0   3.1   5    1  0            30 #> 31   2  96.0    0    NA  0  28.0   6    2  0            31 #> 32   2 120.0    0    NA  0   2.5   5    1  0            32 #> 33   2 120.0    0    NA  0  33.0   6    2  0            33 #> 34   3   0.0    1 100.0  0    NA   1    0  0            34 #> 35   3   0.0    0    NA  0 100.0   6    2  0            35 #> 36   3   0.5    0    NA  0   0.0   5    1  0            36 #> 37   3   2.0    0    NA  0   8.4   5    1  0            37 #> 38   3   3.0    0    NA  0   9.7   5    1  0            38 #> 39   3   6.0    0    NA  0   9.8   5    1  0            39 #> 40   3  12.0    0    NA  0  11.0   5    1  0            40 #> 41   3  24.0    0    NA  0   8.3   5    1  0            41 #> 42   3  24.0    0    NA  0  46.0   6    2  0            42 #> 43   3  36.0    0    NA  0   7.7   5    1  0            43 #> 44   3  36.0    0    NA  0  22.0   6    2  0            44 #> 45   3  48.0    0    NA  0   6.3   5    1  0            45 #> 46   3  48.0    0    NA  0  19.0   6    2  0            46 #> 47   3  72.0    0    NA  0   4.1   5    1  0            47 #> 48   3  72.0    0    NA  0  20.0   6    2  0            48 #> 49   3  96.0    0    NA  0   3.0   5    1  0            49 #> 50   3  96.0    0    NA  0  42.0   6    2  0            50 #> 51   3 120.0    0    NA  0   1.4   5    1  0            51 #> 52   3 120.0    0    NA  0  49.0   6    2  0            52 #> 53   3 144.0    0    NA  0  54.0   6    2  0            53 #> 54   4   0.0    1 120.0  0    NA   1    0  0            54 #> 55   4   0.0    0    NA  0 100.0   6    2  0            55 #> 56   4   3.0    0    NA  0  12.0   5    1  0            56 #> 57   4   6.0    0    NA  0  13.2   5    1  0            57 #> 58   4   9.0    0    NA  0  14.4   5    1  0            58 #> 59   4  24.0    0    NA  0   9.6   5    1  0            59 #> 60   4  24.0    0    NA  0  30.0   6    2  0            60 #> 61   4  36.0    0    NA  0   8.2   5    1  0            61 #> 62   4  36.0    0    NA  0  24.0   6    2  0            62 #> 63   4  48.0    0    NA  0   7.8   5    1  0            63 #> 64   4  48.0    0    NA  0  13.0   6    2  0            64 #> 65   4  72.0    0    NA  0   5.8   5    1  0            65 #> 66   4  72.0    0    NA  0   9.0   6    2  0            66 #> 67   4  96.0    0    NA  0   4.3   5    1  0            67 #> 68   4  96.0    0    NA  0   9.0   6    2  0            68 #> 69   4 120.0    0    NA  0   3.0   5    1  0            69 #> 70   4 120.0    0    NA  0  11.0   6    2  0            70 #> 71   4 144.0    0    NA  0  12.0   6    2  0            71 #> 72   5   0.0    1  60.0  0    NA   1    0  0            72 #> 73   5   0.0    0    NA  0  82.0   6    2  0            73 #> 74   5   3.0    0    NA  0  11.1   5    1  0            74 #> 75   5   6.0    0    NA  0  11.9   5    1  0            75 #> 76   5   9.0    0    NA  0   9.8   5    1  0            76 #> 77   5  12.0    0    NA  0  11.0   5    1  0            77 #> 78   5  24.0    0    NA  0   8.5   5    1  0            78 #> 79   5  24.0    0    NA  0  43.0   6    2  0            79 #> 80   5  36.0    0    NA  0   7.6   5    1  0            80 #> 81   5  36.0    0    NA  0  25.0   6    2  0            81 #> 82   5  48.0    0    NA  0   5.4   5    1  0            82 #> 83   5  48.0    0    NA  0  18.0   6    2  0            83 #> 84   5  72.0    0    NA  0   4.5   5    1  0            84 #> 85   5  72.0    0    NA  0  17.0   6    2  0            85 #> 86   5  96.0    0    NA  0   3.3   5    1  0            86 #> 87   5  96.0    0    NA  0  23.0   6    2  0            87 #> 88   5 120.0    0    NA  0   2.3   5    1  0            88 #> 89   5 120.0    0    NA  0  29.0   6    2  0            89 #> 90   5 144.0    0    NA  0  41.0   6    2  0            90 #> 91   6   0.0    1 113.0  0    NA   1    0  0            91 #> 92   6   0.0    0    NA  0 100.0   6    2  0            92 #> 93   6   6.0    0    NA  0   8.6   5    1  0            93 #> 94   6  12.0    0    NA  0   8.6   5    1  0            94 #> 95   6  24.0    0    NA  0   7.0   5    1  0            95 #> 96   6  24.0    0    NA  0  34.0   6    2  0            96 #> 97   6  36.0    0    NA  0   5.7   5    1  0            97 #> 98   6  36.0    0    NA  0  23.0   6    2  0            98 #> 99   6  48.0    0    NA  0   4.7   5    1  0            99 #> 100  6  48.0    0    NA  0  20.0   6    2  0           100 #> 101  6  72.0    0    NA  0   3.3   5    1  0           101 #> 102  6  72.0    0    NA  0  16.0   6    2  0           102 #> 103  6  96.0    0    NA  0   2.3   5    1  0           103 #> 104  6  96.0    0    NA  0  17.0   6    2  0           104 #> 105  6 120.0    0    NA  0   1.7   5    1  0           105 #> 106  6 120.0    0    NA  0  18.0   6    2  0           106 #> 107  6 144.0    0    NA  0  25.0   6    2  0           107 #> 108  7   0.0    1  90.0  0    NA   1    0  0           108 #> 109  7   3.0    0    NA  0  13.4   5    1  0           109 #> 110  7   6.0    0    NA  0  12.4   5    1  0           110 #> 111  7   9.0    0    NA  0  12.7   5    1  0           111 #> 112  7  12.0    0    NA  0   8.8   5    1  0           112 #> 113  7  24.0    0    NA  0   6.1   5    1  0           113 #> 114  7  24.0    0    NA  0  36.0   6    2  0           114 #> 115  7  36.0    0    NA  0   3.5   5    1  0           115 #> 116  7  36.0    0    NA  0  33.0   6    2  0           116 #> 117  7  48.0    0    NA  0   1.8   5    1  0           117 #> 118  7  48.0    0    NA  0  28.0   6    2  0           118 #> 119  7  72.0    0    NA  0   1.5   5    1  0           119 #> 120  7  72.0    0    NA  0  52.0   6    2  0           120 #> 121  7  96.0    0    NA  0   1.0   5    1  0           121 #> 122  7  96.0    0    NA  0  80.0   6    2  0           122 #> 123  7 120.0    0    NA  0  90.0   6    2  0           123 #> 124  7 144.0    0    NA  0 100.0   6    2  0           124 #> 125  8   0.0    1 135.0  0    NA   1    0  0           125 #> 126  8   0.0    0    NA  0  88.0   6    2  0           126 #> 127  8   2.0    0    NA  0  17.6   5    1  0           127 #> 128  8   3.0    0    NA  0  17.3   5    1  0           128 #> 129  8   6.0    0    NA  0  15.0   5    1  0           129 #> 130  8   9.0    0    NA  0  15.0   5    1  0           130 #> 131  8  12.0    0    NA  0  12.4   5    1  0           131 #> 132  8  24.0    0    NA  0   7.9   5    1  0           132 #> 133  8  24.0    0    NA  0  35.0   6    2  0           133 #> 134  8  36.0    0    NA  0   7.9   5    1  0           134 #> 135  8  36.0    0    NA  0  20.0   6    2  0           135 #> 136  8  48.0    0    NA  0   5.1   5    1  0           136 #> 137  8  48.0    0    NA  0  12.0   6    2  0           137 #> 138  8  72.0    0    NA  0   3.6   5    1  0           138 #> 139  8  72.0    0    NA  0  16.0   6    2  0           139 #> 140  8  96.0    0    NA  0   2.4   5    1  0           140 #> 141  8  96.0    0    NA  0  23.0   6    2  0           141 #> 142  8 120.0    0    NA  0   2.0   5    1  0           142 #> 143  8 120.0    0    NA  0  36.0   6    2  0           143 #> 144  8 144.0    0    NA  0  48.0   6    2  0           144 #> 145  9   0.0    1  75.0  0    NA   1    0  0           145 #> 146  9   0.0    0    NA  0  92.0   6    2  0           146 #> 147  9   0.5    0    NA  0   0.0   5    1  0           147 #> 148  9   1.0    0    NA  0   1.0   5    1  0           148 #> 149  9   2.0    0    NA  0   4.6   5    1  0           149 #> 150  9   3.0    0    NA  0  12.7   5    1  0           150 #> 151  9   3.0    0    NA  0   8.0   5    1  0           151 #> 152  9   6.0    0    NA  0  12.7   5    1  0           152 #> 153  9   6.0    0    NA  0  11.5   5    1  0           153 #> 154  9   9.0    0    NA  0  12.9   5    1  0           154 #> 155  9   9.0    0    NA  0  11.4   5    1  0           155 #> 156  9  12.0    0    NA  0  11.4   5    1  0           156 #> 157  9  12.0    0    NA  0  11.0   5    1  0           157 #> 158  9  24.0    0    NA  0   9.1   5    1  0           158 #> 159  9  24.0    0    NA  0  33.0   6    2  0           159 #> 160  9  36.0    0    NA  0   8.2   5    1  0           160 #> 161  9  36.0    0    NA  0  22.0   6    2  0           161 #> 162  9  48.0    0    NA  0   5.9   5    1  0           162 #> 163  9  48.0    0    NA  0  16.0   6    2  0           163 #> 164  9  72.0    0    NA  0   3.6   5    1  0           164 #> 165  9  72.0    0    NA  0  18.0   6    2  0           165 #> 166  9  96.0    0    NA  0   1.7   5    1  0           166 #> 167  9  96.0    0    NA  0  32.0   6    2  0           167 #> 168  9 120.0    0    NA  0   1.1   5    1  0           168 #> 169  9 120.0    0    NA  0  30.0   6    2  0           169 #> 170  9 144.0    0    NA  0  45.0   6    2  0           170 #> 171 10   0.0    1 105.0  0    NA   1    0  0           171 #> 172 10   0.0    0    NA  0  90.0   6    2  0           172 #> 173 10  24.0    0    NA  0   8.6   5    1  0           173 #> 174 10  24.0    0    NA  0  39.0   6    2  0           174 #> 175 10  36.0    0    NA  0   8.0   5    1  0           175 #> 176 10  36.0    0    NA  0  22.0   6    2  0           176 #> 177 10  48.0    0    NA  0   6.0   5    1  0           177 #> 178 10  48.0    0    NA  0  17.0   6    2  0           178 #> 179 10  72.0    0    NA  0   4.4   5    1  0           179 #> 180 10  72.0    0    NA  0  17.0   6    2  0           180 #> 181 10  96.0    0    NA  0   3.6   5    1  0           181 #> 182 10  96.0    0    NA  0  22.0   6    2  0           182 #> 183 10 120.0    0    NA  0   2.8   5    1  0           183 #> 184 10 120.0    0    NA  0  25.0   6    2  0           184 #> 185 10 144.0    0    NA  0  33.0   6    2  0           185 #> 186 11   0.0    1 123.0  0    NA   1    0  0           186 #> 187 11   0.0    0    NA  0 100.0   6    2  0           187 #> 188 11   1.5    0    NA  0  11.4   5    1  0           188 #> 189 11   3.0    0    NA  0  15.4   5    1  0           189 #> 190 11   6.0    0    NA  0  17.5   5    1  0           190 #> 191 11  12.0    0    NA  0  14.0   5    1  0           191 #> 192 11  24.0    0    NA  0   9.0   5    1  0           192 #> 193 11  24.0    0    NA  0  37.0   6    2  0           193 #> 194 11  36.0    0    NA  0   8.9   5    1  0           194 #> 195 11  36.0    0    NA  0  24.0   6    2  0           195 #> 196 11  48.0    0    NA  0   6.6   5    1  0           196 #> 197 11  48.0    0    NA  0  14.0   6    2  0           197 #> 198 11  72.0    0    NA  0   4.2   5    1  0           198 #> 199 11  72.0    0    NA  0  11.0   6    2  0           199 #> 200 11  96.0    0    NA  0   3.6   5    1  0           200 #> 201 11  96.0    0    NA  0  14.0   6    2  0           201 #> 202 11 120.0    0    NA  0   2.6   5    1  0           202 #> 203 11 120.0    0    NA  0  23.0   6    2  0           203 #> 204 11 144.0    0    NA  0  33.0   6    2  0           204 #> 205 12   0.0    1 113.0  0    NA   1    0  0           205 #> 206 12   0.0    0    NA  0  85.0   6    2  0           206 #> 207 12   1.5    0    NA  0   0.6   5    1  0           207 #> 208 12   3.0    0    NA  0   2.8   5    1  0           208 #> 209 12   6.0    0    NA  0  13.8   5    1  0           209 #> 210 12   9.0    0    NA  0  15.0   5    1  0           210 #> 211 12  24.0    0    NA  0  10.5   5    1  0           211 #> 212 12  24.0    0    NA  0  25.0   6    2  0           212 #> 213 12  36.0    0    NA  0   9.1   5    1  0           213 #> 214 12  36.0    0    NA  0  15.0   6    2  0           214 #> 215 12  48.0    0    NA  0   6.6   5    1  0           215 #> 216 12  48.0    0    NA  0  11.0   6    2  0           216 #> 217 12  72.0    0    NA  0   4.9   5    1  0           217 #> 218 12  96.0    0    NA  0   2.4   5    1  0           218 #> 219 12 120.0    0    NA  0   1.9   5    1  0           219 #> 220 13   0.0    1 113.0  0    NA   1    0  0           220 #> 221 13   0.0    0    NA  0  88.0   6    2  0           221 #> 222 13   1.5    0    NA  0   3.6   5    1  0           222 #> 223 13   3.0    0    NA  0  12.9   5    1  0           223 #> 224 13   6.0    0    NA  0  12.9   5    1  0           224 #> 225 13   9.0    0    NA  0  10.2   5    1  0           225 #> 226 13  24.0    0    NA  0   6.4   5    1  0           226 #> 227 13  24.0    0    NA  0  41.0   6    2  0           227 #> 228 13  36.0    0    NA  0   6.9   5    1  0           228 #> 229 13  36.0    0    NA  0  23.0   6    2  0           229 #> 230 13  48.0    0    NA  0   4.5   5    1  0           230 #> 231 13  48.0    0    NA  0  16.0   6    2  0           231 #> 232 13  72.0    0    NA  0   3.2   5    1  0           232 #> 233 13  72.0    0    NA  0  14.0   6    2  0           233 #> 234 13  96.0    0    NA  0   2.4   5    1  0           234 #> 235 13  96.0    0    NA  0  18.0   6    2  0           235 #> 236 13 120.0    0    NA  0   1.3   5    1  0           236 #> 237 13 120.0    0    NA  0  22.0   6    2  0           237 #> 238 13 144.0    0    NA  0  35.0   6    2  0           238 #> 239 14   0.0    1  75.0  0    NA   1    0  0           239 #> 240 14   0.0    0    NA  0  85.0   6    2  0           240 #> 241 14   0.5    0    NA  0   0.0   5    1  0           241 #> 242 14   1.0    0    NA  0   2.7   5    1  0           242 #> 243 14   2.0    0    NA  0  11.6   5    1  0           243 #> 244 14   3.0    0    NA  0  11.6   5    1  0           244 #> 245 14   6.0    0    NA  0  11.3   5    1  0           245 #> 246 14   9.0    0    NA  0   9.7   5    1  0           246 #> 247 14  24.0    0    NA  0   6.5   5    1  0           247 #> 248 14  24.0    0    NA  0  32.0   6    2  0           248 #> 249 14  36.0    0    NA  0   5.2   5    1  0           249 #> 250 14  36.0    0    NA  0  22.0   6    2  0           250 #> 251 14  48.0    0    NA  0   3.6   5    1  0           251 #> 252 14  48.0    0    NA  0  21.0   6    2  0           252 #> 253 14  72.0    0    NA  0   2.4   5    1  0           253 #> 254 14  72.0    0    NA  0  28.0   6    2  0           254 #> 255 14  96.0    0    NA  0   0.9   5    1  0           255 #> 256 14  96.0    0    NA  0  38.0   6    2  0           256 #> 257 14 120.0    0    NA  0  46.0   6    2  0           257 #> 258 14 144.0    0    NA  0  65.0   6    2  0           258 #> 259 15   0.0    1  85.0  0    NA   1    0  0           259 #> 260 15   0.0    0    NA  0 100.0   6    2  0           260 #> 261 15   1.0    0    NA  0   6.6   5    1  0           261 #> 262 15   3.0    0    NA  0  11.9   5    1  0           262 #> 263 15   6.0    0    NA  0  11.7   5    1  0           263 #> 264 15   9.0    0    NA  0  12.2   5    1  0           264 #> 265 15  24.0    0    NA  0   8.1   5    1  0           265 #> 266 15  24.0    0    NA  0  43.0   6    2  0           266 #> 267 15  36.0    0    NA  0   7.4   5    1  0           267 #> 268 15  36.0    0    NA  0  26.0   6    2  0           268 #> 269 15  48.0    0    NA  0   6.8   5    1  0           269 #> 270 15  48.0    0    NA  0  15.0   6    2  0           270 #> 271 15  72.0    0    NA  0   5.3   5    1  0           271 #> 272 15  72.0    0    NA  0  13.0   6    2  0           272 #> 273 15  96.0    0    NA  0   3.0   5    1  0           273 #> 274 15  96.0    0    NA  0  21.0   6    2  0           274 #> 275 15 120.0    0    NA  0   2.0   5    1  0           275 #> 276 15 120.0    0    NA  0  28.0   6    2  0           276 #> 277 15 144.0    0    NA  0  39.0   6    2  0           277 #> 278 16   0.0    1  87.0  0    NA   1    0  0           278 #> 279 16   0.0    0    NA  0 100.0   6    2  0           279 #> 280 16  24.0    0    NA  0  10.4   5    1  0           280 #> 281 16  24.0    0    NA  0  42.0   6    2  0           281 #> 282 16  36.0    0    NA  0   8.9   5    1  0           282 #> 283 16  36.0    0    NA  0  32.0   6    2  0           283 #> 284 16  48.0    0    NA  0   7.0   5    1  0           284 #> 285 16  48.0    0    NA  0  26.0   6    2  0           285 #> 286 16  72.0    0    NA  0   4.4   5    1  0           286 #> 287 16  72.0    0    NA  0  31.0   6    2  0           287 #> 288 16  96.0    0    NA  0   3.2   5    1  0           288 #> 289 16  96.0    0    NA  0  33.0   6    2  0           289 #> 290 16 120.0    0    NA  0   2.4   5    1  0           290 #> 291 16 120.0    0    NA  0  54.0   6    2  0           291 #> 292 17   0.0    1 117.0  0    NA   1    0  0           292 #> 293 17   0.0    0    NA  0 100.0   6    2  0           293 #> 294 17  24.0    0    NA  0   7.6   5    1  0           294 #> 295 17  24.0    0    NA  0  35.0   6    2  0           295 #> 296 17  36.0    0    NA  0   6.4   5    1  0           296 #> 297 17  36.0    0    NA  0  23.0   6    2  0           297 #> 298 17  48.0    0    NA  0   6.0   5    1  0           298 #> 299 17  48.0    0    NA  0  17.0   6    2  0           299 #> 300 17  72.0    0    NA  0   4.0   5    1  0           300 #> 301 17  72.0    0    NA  0  18.0   6    2  0           301 #> 302 17  96.0    0    NA  0   3.1   5    1  0           302 #> 303 17  96.0    0    NA  0  18.0   6    2  0           303 #> 304 17 120.0    0    NA  0   2.0   5    1  0           304 #> 305 17 120.0    0    NA  0  21.0   6    2  0           305 #> 306 18   0.0    1 112.0  0    NA   1    0  0           306 #> 307 18   0.0    0    NA  0 100.0   6    2  0           307 #> 308 18  24.0    0    NA  0   7.6   5    1  0           308 #> 309 18  24.0    0    NA  0  32.0   6    2  0           309 #> 310 18  36.0    0    NA  0   6.6   5    1  0           310 #> 311 18  36.0    0    NA  0  20.0   6    2  0           311 #> 312 18  48.0    0    NA  0   5.4   5    1  0           312 #> 313 18  48.0    0    NA  0  18.0   6    2  0           313 #> 314 18  72.0    0    NA  0   3.4   5    1  0           314 #> 315 18  72.0    0    NA  0  18.0   6    2  0           315 #> 316 18  96.0    0    NA  0   1.2   5    1  0           316 #> 317 18  96.0    0    NA  0  19.0   6    2  0           317 #> 318 18 120.0    0    NA  0   0.9   5    1  0           318 #> 319 18 120.0    0    NA  0  29.0   6    2  0           319 #> 320 19   0.0    1  95.5  0    NA   1    0  0           320 #> 321 19   0.0    0    NA  0 100.0   6    2  0           321 #> 322 19  24.0    0    NA  0   6.6   5    1  0           322 #> 323 19  24.0    0    NA  0  33.0   6    2  0           323 #> 324 19  36.0    0    NA  0   5.3   5    1  0           324 #> 325 19  36.0    0    NA  0  28.0   6    2  0           325 #> 326 19  48.0    0    NA  0   3.6   5    1  0           326 #> 327 19  48.0    0    NA  0  18.0   6    2  0           327 #> 328 19  72.0    0    NA  0   2.7   5    1  0           328 #> 329 19  72.0    0    NA  0  18.0   6    2  0           329 #> 330 19  96.0    0    NA  0   1.4   5    1  0           330 #> 331 19  96.0    0    NA  0  17.0   6    2  0           331 #> 332 19 120.0    0    NA  0   1.1   5    1  0           332 #> 333 19 120.0    0    NA  0  26.0   6    2  0           333 #> 334 20   0.0    1  88.5  0    NA   1    0  0           334 #> 335 20   0.0    0    NA  0 100.0   6    2  0           335 #> 336 20  24.0    0    NA  0   9.6   5    1  0           336 #> 337 20  24.0    0    NA  0  41.0   6    2  0           337 #> 338 20  36.0    0    NA  0   8.0   5    1  0           338 #> 339 20  36.0    0    NA  0  30.0   6    2  0           339 #> 340 20  48.0    0    NA  0   6.6   5    1  0           340 #> 341 20  48.0    0    NA  0  22.0   6    2  0           341 #> 342 20  72.0    0    NA  0   5.6   5    1  0           342 #> 343 20  72.0    0    NA  0  23.0   6    2  0           343 #> 344 20  96.0    0    NA  0   3.5   5    1  0           344 #> 345 20  96.0    0    NA  0  23.0   6    2  0           345 #> 346 20 120.0    0    NA  0   2.3   5    1  0           346 #> 347 20 120.0    0    NA  0  35.0   6    2  0           347 #> 348 21   0.0    1  93.0  0    NA   1    0  0           348 #> 349 21   0.0    0    NA  0 100.0   6    2  0           349 #> 350 21  24.0    0    NA  0   7.3   5    1  0           350 #> 351 21  24.0    0    NA  0  46.0   6    2  0           351 #> 352 21  36.0    0    NA  0   6.1   5    1  0           352 #> 353 21  36.0    0    NA  0  27.0   6    2  0           353 #> 354 21  48.0    0    NA  0   4.3   5    1  0           354 #> 355 21  48.0    0    NA  0  22.0   6    2  0           355 #> 356 21  72.0    0    NA  0   3.2   5    1  0           356 #> 357 21  72.0    0    NA  0  36.0   6    2  0           357 #> 358 21  96.0    0    NA  0   2.3   5    1  0           358 #> 359 21  96.0    0    NA  0  40.0   6    2  0           359 #> 360 21 120.0    0    NA  0   1.9   5    1  0           360 #> 361 21 120.0    0    NA  0  44.0   6    2  0           361 #> 362 22   0.0    1  87.0  0    NA   1    0  0           362 #> 363 22   0.0    0    NA  0 100.0   6    2  0           363 #> 364 22  24.0    0    NA  0   8.9   5    1  0           364 #> 365 22  24.0    0    NA  0  35.0   6    2  0           365 #> 366 22  36.0    0    NA  0   8.4   5    1  0           366 #> 367 22  36.0    0    NA  0  27.0   6    2  0           367 #> 368 22  48.0    0    NA  0   8.0   5    1  0           368 #> 369 22  48.0    0    NA  0  23.0   6    2  0           369 #> 370 22  72.0    0    NA  0   4.4   5    1  0           370 #> 371 22  72.0    0    NA  0  27.0   6    2  0           371 #> 372 22  96.0    0    NA  0   3.2   5    1  0           372 #> 373 22  96.0    0    NA  0  43.0   6    2  0           373 #> 374 22 120.0    0    NA  0   1.7   5    1  0           374 #> 375 22 120.0    0    NA  0  43.0   6    2  0           375 #> 376 23   0.0    1 110.0  0    NA   1    0  0           376 #> 377 23   0.0    0    NA  0 100.0   6    2  0           377 #> 378 23  24.0    0    NA  0   9.8   5    1  0           378 #> 379 23  24.0    0    NA  0  34.0   6    2  0           379 #> 380 23  36.0    0    NA  0   8.4   5    1  0           380 #> 381 23  36.0    0    NA  0  24.0   6    2  0           381 #> 382 23  48.0    0    NA  0   6.6   5    1  0           382 #> 383 23  48.0    0    NA  0  15.0   6    2  0           383 #> 384 23  72.0    0    NA  0   4.8   5    1  0           384 #> 385 23  72.0    0    NA  0  15.0   6    2  0           385 #> 386 23  96.0    0    NA  0   3.2   5    1  0           386 #> 387 23  96.0    0    NA  0  19.0   6    2  0           387 #> 388 23 120.0    0    NA  0   2.4   5    1  0           388 #> 389 23 120.0    0    NA  0  19.0   6    2  0           389 #> 390 24   0.0    1 115.0  0    NA   1    0  0           390 #> 391 24   0.0    0    NA  0  88.0   6    2  0           391 #> 392 24  24.0    0    NA  0   8.2   5    1  0           392 #> 393 24  24.0    0    NA  0  37.0   6    2  0           393 #> 394 24  36.0    0    NA  0   7.5   5    1  0           394 #> 395 24  36.0    0    NA  0  20.0   6    2  0           395 #> 396 24  48.0    0    NA  0   6.8   5    1  0           396 #> 397 24  48.0    0    NA  0  20.0   6    2  0           397 #> 398 24  72.0    0    NA  0   5.5   5    1  0           398 #> 399 24  72.0    0    NA  0  26.0   6    2  0           399 #> 400 24  96.0    0    NA  0   4.5   5    1  0           400 #> 401 24  96.0    0    NA  0  28.0   6    2  0           401 #> 402 24 120.0    0    NA  0   3.7   5    1  0           402 #> 403 24 120.0    0    NA  0  50.0   6    2  0           403 #> 404 25   0.0    1 112.0  0    NA   1    0  0           404 #> 405 25   0.0    0    NA  0 100.0   6    2  0           405 #> 406 25  24.0    0    NA  0  11.0   5    1  0           406 #> 407 25  24.0    0    NA  0  32.0   6    2  0           407 #> 408 25  36.0    0    NA  0  10.0   5    1  0           408 #> 409 25  36.0    0    NA  0  20.0   6    2  0           409 #> 410 25  48.0    0    NA  0   8.2   5    1  0           410 #> 411 25  48.0    0    NA  0  17.0   6    2  0           411 #> 412 25  72.0    0    NA  0   6.0   5    1  0           412 #> 413 25  72.0    0    NA  0  19.0   6    2  0           413 #> 414 25  96.0    0    NA  0   3.7   5    1  0           414 #> 415 25  96.0    0    NA  0  21.0   6    2  0           415 #> 416 25 120.0    0    NA  0   2.6   5    1  0           416 #> 417 25 120.0    0    NA  0  30.0   6    2  0           417 #> 418 26   0.0    1 120.0  0    NA   1    0  0           418 #> 419 26   0.0    0    NA  0 100.0   6    2  0           419 #> 420 26  24.0    0    NA  0  10.0   5    1  0           420 #> 421 26  24.0    0    NA  0  41.0   6    2  0           421 #> 422 26  36.0    0    NA  0   9.0   5    1  0           422 #> 423 26  36.0    0    NA  0  28.0   6    2  0           423 #> 424 26  48.0    0    NA  0   7.3   5    1  0           424 #> 425 26  48.0    0    NA  0  19.0   6    2  0           425 #> 426 26  72.0    0    NA  0   5.2   5    1  0           426 #> 427 26  72.0    0    NA  0  17.0   6    2  0           427 #> 428 26  96.0    0    NA  0   3.7   5    1  0           428 #> 429 26  96.0    0    NA  0  17.0   6    2  0           429 #> 430 26 120.0    0    NA  0   2.7   5    1  0           430 #> 431 26 120.0    0    NA  0  24.0   6    2  0           431 #> 432 27   0.0    1 120.0  0    NA   1    0  0           432 #> 433 27   0.0    0    NA  0 100.0   6    2  0           433 #> 434 27  24.0    0    NA  0  11.8   5    1  0           434 #> 435 27  24.0    0    NA  0  32.0   6    2  0           435 #> 436 27  36.0    0    NA  0   9.2   5    1  0           436 #> 437 27  36.0    0    NA  0  21.0   6    2  0           437 #> 438 27  48.0    0    NA  0   7.7   5    1  0           438 #> 439 27  48.0    0    NA  0  19.0   6    2  0           439 #> 440 27  72.0    0    NA  0   4.9   5    1  0           440 #> 441 27  72.0    0    NA  0  22.0   6    2  0           441 #> 442 27  96.0    0    NA  0   3.4   5    1  0           442 #> 443 27  96.0    0    NA  0  33.0   6    2  0           443 #> 444 27 120.0    0    NA  0   2.7   5    1  0           444 #> 445 27 120.0    0    NA  0  46.0   6    2  0           445 #> 446 28   0.0    1 120.0  0    NA   1    0  0           446 #> 447 28   0.0    0    NA  0 100.0   6    2  0           447 #> 448 28  24.0    0    NA  0  10.1   5    1  0           448 #> 449 28  24.0    0    NA  0  39.0   6    2  0           449 #> 450 28  36.0    0    NA  0   8.0   5    1  0           450 #> 451 28  36.0    0    NA  0  25.0   6    2  0           451 #> 452 28  48.0    0    NA  0   6.0   5    1  0           452 #> 453 28  48.0    0    NA  0  16.0   6    2  0           453 #> 454 28  72.0    0    NA  0   4.9   5    1  0           454 #> 455 28  72.0    0    NA  0  14.0   6    2  0           455 #> 456 28  96.0    0    NA  0   3.4   5    1  0           456 #> 457 28  96.0    0    NA  0  15.0   6    2  0           457 #> 458 28 120.0    0    NA  0   2.0   5    1  0           458 #> 459 28 120.0    0    NA  0  20.0   6    2  0           459 #> 460 29   0.0    1 153.0  0    NA   1    0  0           460 #> 461 29   0.0    0    NA  0  86.0   6    2  0           461 #> 462 29  24.0    0    NA  0   8.3   5    1  0           462 #> 463 29  24.0    0    NA  0  35.0   6    2  0           463 #> 464 29  36.0    0    NA  0   7.0   5    1  0           464 #> 465 29  36.0    0    NA  0  21.0   6    2  0           465 #> 466 29  48.0    0    NA  0   5.6   5    1  0           466 #> 467 29  48.0    0    NA  0  18.0   6    2  0           467 #> 468 29  72.0    0    NA  0   4.1   5    1  0           468 #> 469 29  72.0    0    NA  0  20.0   6    2  0           469 #> 470 29  96.0    0    NA  0   3.1   5    1  0           470 #> 471 29  96.0    0    NA  0  29.0   6    2  0           471 #> 472 29 120.0    0    NA  0   2.2   5    1  0           472 #> 473 29 120.0    0    NA  0  41.0   6    2  0           473 #> 474 30   0.0    1 105.0  0    NA   1    0  0           474 #> 475 30   0.0    0    NA  0 100.0   6    2  0           475 #> 476 30  24.0    0    NA  0   9.9   5    1  0           476 #> 477 30  24.0    0    NA  0  45.0   6    2  0           477 #> 478 30  36.0    0    NA  0   7.5   5    1  0           478 #> 479 30  36.0    0    NA  0  24.0   6    2  0           479 #> 480 30  48.0    0    NA  0   6.5   5    1  0           480 #> 481 30  48.0    0    NA  0  23.0   6    2  0           481 #> 482 30  72.0    0    NA  0   4.1   5    1  0           482 #> 483 30  72.0    0    NA  0  26.0   6    2  0           483 #> 484 30  96.0    0    NA  0   2.9   5    1  0           484 #> 485 30  96.0    0    NA  0  28.0   6    2  0           485 #> 486 30 120.0    0    NA  0   2.3   5    1  0           486 #> 487 30 120.0    0    NA  0  39.0   6    2  0           487 #> 488 31   0.0    1 125.0  0    NA   1    0  0           488 #> 489 31   0.0    0    NA  0 100.0   6    2  0           489 #> 490 31  24.0    0    NA  0   9.5   5    1  0           490 #> 491 31  24.0    0    NA  0  45.0   6    2  0           491 #> 492 31  36.0    0    NA  0   7.8   5    1  0           492 #> 493 31  36.0    0    NA  0  30.0   6    2  0           493 #> 494 31  48.0    0    NA  0   6.4   5    1  0           494 #> 495 31  48.0    0    NA  0  24.0   6    2  0           495 #> 496 31  72.0    0    NA  0   4.5   5    1  0           496 #> 497 31  72.0    0    NA  0  22.0   6    2  0           497 #> 498 31  96.0    0    NA  0   3.4   5    1  0           498 #> 499 31  96.0    0    NA  0  28.0   6    2  0           499 #> 500 31 120.0    0    NA  0   2.5   5    1  0           500 #> 501 31 120.0    0    NA  0  42.0   6    2  0           501 #> 502 32   0.0    1  93.0  0    NA   1    0  0           502 #> 503 32   0.0    0    NA  0 100.0   6    2  0           503 #> 504 32  24.0    0    NA  0   8.9   5    1  0           504 #> 505 32  24.0    0    NA  0  36.0   6    2  0           505 #> 506 32  36.0    0    NA  0   7.7   5    1  0           506 #> 507 32  36.0    0    NA  0  27.0   6    2  0           507 #> 508 32  48.0    0    NA  0   6.9   5    1  0           508 #> 509 32  48.0    0    NA  0  24.0   6    2  0           509 #> 510 32  72.0    0    NA  0   4.4   5    1  0           510 #> 511 32  72.0    0    NA  0  23.0   6    2  0           511 #> 512 32  96.0    0    NA  0   3.5   5    1  0           512 #> 513 32  96.0    0    NA  0  20.0   6    2  0           513 #> 514 32 120.0    0    NA  0   2.5   5    1  0           514 #> 515 32 120.0    0    NA  0  22.0   6    2  0           515  bblDatToRxode(pk.turnover.emax3, nlmixr2data::warfarin) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>     ID  TIME EVID   AMT II    DV CMT DVID SS nlmixrRowNums #> 1    1   0.0    1 100.0  0    NA   1    0  0             1 #> 2    1   0.5    0    NA  0   0.0   5    1  0             2 #> 3    1   1.0    0    NA  0   1.9   5    1  0             3 #> 4    1   2.0    0    NA  0   3.3   5    1  0             4 #> 5    1   3.0    0    NA  0   6.6   5    1  0             5 #> 6    1   6.0    0    NA  0   9.1   5    1  0             6 #> 7    1   9.0    0    NA  0  10.8   5    1  0             7 #> 8    1  12.0    0    NA  0   8.6   5    1  0             8 #> 9    1  24.0    0    NA  0   5.6   5    1  0             9 #> 10   1  24.0    0    NA  0  44.0   6    2  0            10 #> 11   1  36.0    0    NA  0   4.0   5    1  0            11 #> 12   1  36.0    0    NA  0  27.0   6    2  0            12 #> 13   1  48.0    0    NA  0   2.7   5    1  0            13 #> 14   1  48.0    0    NA  0  28.0   6    2  0            14 #> 15   1  72.0    0    NA  0   0.8   5    1  0            15 #> 16   1  72.0    0    NA  0  31.0   6    2  0            16 #> 17   1  96.0    0    NA  0  60.0   6    2  0            17 #> 18   1 120.0    0    NA  0  65.0   6    2  0            18 #> 19   1 144.0    0    NA  0  71.0   6    2  0            19 #> 20   2   0.0    1 100.0  0    NA   1    0  0            20 #> 21   2   0.0    0    NA  0 100.0   6    2  0            21 #> 22   2  24.0    0    NA  0   9.2   5    1  0            22 #> 23   2  24.0    0    NA  0  49.0   6    2  0            23 #> 24   2  36.0    0    NA  0   8.5   5    1  0            24 #> 25   2  36.0    0    NA  0  32.0   6    2  0            25 #> 26   2  48.0    0    NA  0   6.4   5    1  0            26 #> 27   2  48.0    0    NA  0  26.0   6    2  0            27 #> 28   2  72.0    0    NA  0   4.8   5    1  0            28 #> 29   2  72.0    0    NA  0  22.0   6    2  0            29 #> 30   2  96.0    0    NA  0   3.1   5    1  0            30 #> 31   2  96.0    0    NA  0  28.0   6    2  0            31 #> 32   2 120.0    0    NA  0   2.5   5    1  0            32 #> 33   2 120.0    0    NA  0  33.0   6    2  0            33 #> 34   3   0.0    1 100.0  0    NA   1    0  0            34 #> 35   3   0.0    0    NA  0 100.0   6    2  0            35 #> 36   3   0.5    0    NA  0   0.0   5    1  0            36 #> 37   3   2.0    0    NA  0   8.4   5    1  0            37 #> 38   3   3.0    0    NA  0   9.7   5    1  0            38 #> 39   3   6.0    0    NA  0   9.8   5    1  0            39 #> 40   3  12.0    0    NA  0  11.0   5    1  0            40 #> 41   3  24.0    0    NA  0   8.3   5    1  0            41 #> 42   3  24.0    0    NA  0  46.0   6    2  0            42 #> 43   3  36.0    0    NA  0   7.7   5    1  0            43 #> 44   3  36.0    0    NA  0  22.0   6    2  0            44 #> 45   3  48.0    0    NA  0   6.3   5    1  0            45 #> 46   3  48.0    0    NA  0  19.0   6    2  0            46 #> 47   3  72.0    0    NA  0   4.1   5    1  0            47 #> 48   3  72.0    0    NA  0  20.0   6    2  0            48 #> 49   3  96.0    0    NA  0   3.0   5    1  0            49 #> 50   3  96.0    0    NA  0  42.0   6    2  0            50 #> 51   3 120.0    0    NA  0   1.4   5    1  0            51 #> 52   3 120.0    0    NA  0  49.0   6    2  0            52 #> 53   3 144.0    0    NA  0  54.0   6    2  0            53 #> 54   4   0.0    1 120.0  0    NA   1    0  0            54 #> 55   4   0.0    0    NA  0 100.0   6    2  0            55 #> 56   4   3.0    0    NA  0  12.0   5    1  0            56 #> 57   4   6.0    0    NA  0  13.2   5    1  0            57 #> 58   4   9.0    0    NA  0  14.4   5    1  0            58 #> 59   4  24.0    0    NA  0   9.6   5    1  0            59 #> 60   4  24.0    0    NA  0  30.0   6    2  0            60 #> 61   4  36.0    0    NA  0   8.2   5    1  0            61 #> 62   4  36.0    0    NA  0  24.0   6    2  0            62 #> 63   4  48.0    0    NA  0   7.8   5    1  0            63 #> 64   4  48.0    0    NA  0  13.0   6    2  0            64 #> 65   4  72.0    0    NA  0   5.8   5    1  0            65 #> 66   4  72.0    0    NA  0   9.0   6    2  0            66 #> 67   4  96.0    0    NA  0   4.3   5    1  0            67 #> 68   4  96.0    0    NA  0   9.0   6    2  0            68 #> 69   4 120.0    0    NA  0   3.0   5    1  0            69 #> 70   4 120.0    0    NA  0  11.0   6    2  0            70 #> 71   4 144.0    0    NA  0  12.0   6    2  0            71 #> 72   5   0.0    1  60.0  0    NA   1    0  0            72 #> 73   5   0.0    0    NA  0  82.0   6    2  0            73 #> 74   5   3.0    0    NA  0  11.1   5    1  0            74 #> 75   5   6.0    0    NA  0  11.9   5    1  0            75 #> 76   5   9.0    0    NA  0   9.8   5    1  0            76 #> 77   5  12.0    0    NA  0  11.0   5    1  0            77 #> 78   5  24.0    0    NA  0   8.5   5    1  0            78 #> 79   5  24.0    0    NA  0  43.0   6    2  0            79 #> 80   5  36.0    0    NA  0   7.6   5    1  0            80 #> 81   5  36.0    0    NA  0  25.0   6    2  0            81 #> 82   5  48.0    0    NA  0   5.4   5    1  0            82 #> 83   5  48.0    0    NA  0  18.0   6    2  0            83 #> 84   5  72.0    0    NA  0   4.5   5    1  0            84 #> 85   5  72.0    0    NA  0  17.0   6    2  0            85 #> 86   5  96.0    0    NA  0   3.3   5    1  0            86 #> 87   5  96.0    0    NA  0  23.0   6    2  0            87 #> 88   5 120.0    0    NA  0   2.3   5    1  0            88 #> 89   5 120.0    0    NA  0  29.0   6    2  0            89 #> 90   5 144.0    0    NA  0  41.0   6    2  0            90 #> 91   6   0.0    1 113.0  0    NA   1    0  0            91 #> 92   6   0.0    0    NA  0 100.0   6    2  0            92 #> 93   6   6.0    0    NA  0   8.6   5    1  0            93 #> 94   6  12.0    0    NA  0   8.6   5    1  0            94 #> 95   6  24.0    0    NA  0   7.0   5    1  0            95 #> 96   6  24.0    0    NA  0  34.0   6    2  0            96 #> 97   6  36.0    0    NA  0   5.7   5    1  0            97 #> 98   6  36.0    0    NA  0  23.0   6    2  0            98 #> 99   6  48.0    0    NA  0   4.7   5    1  0            99 #> 100  6  48.0    0    NA  0  20.0   6    2  0           100 #> 101  6  72.0    0    NA  0   3.3   5    1  0           101 #> 102  6  72.0    0    NA  0  16.0   6    2  0           102 #> 103  6  96.0    0    NA  0   2.3   5    1  0           103 #> 104  6  96.0    0    NA  0  17.0   6    2  0           104 #> 105  6 120.0    0    NA  0   1.7   5    1  0           105 #> 106  6 120.0    0    NA  0  18.0   6    2  0           106 #> 107  6 144.0    0    NA  0  25.0   6    2  0           107 #> 108  7   0.0    1  90.0  0    NA   1    0  0           108 #> 109  7   3.0    0    NA  0  13.4   5    1  0           109 #> 110  7   6.0    0    NA  0  12.4   5    1  0           110 #> 111  7   9.0    0    NA  0  12.7   5    1  0           111 #> 112  7  12.0    0    NA  0   8.8   5    1  0           112 #> 113  7  24.0    0    NA  0   6.1   5    1  0           113 #> 114  7  24.0    0    NA  0  36.0   6    2  0           114 #> 115  7  36.0    0    NA  0   3.5   5    1  0           115 #> 116  7  36.0    0    NA  0  33.0   6    2  0           116 #> 117  7  48.0    0    NA  0   1.8   5    1  0           117 #> 118  7  48.0    0    NA  0  28.0   6    2  0           118 #> 119  7  72.0    0    NA  0   1.5   5    1  0           119 #> 120  7  72.0    0    NA  0  52.0   6    2  0           120 #> 121  7  96.0    0    NA  0   1.0   5    1  0           121 #> 122  7  96.0    0    NA  0  80.0   6    2  0           122 #> 123  7 120.0    0    NA  0  90.0   6    2  0           123 #> 124  7 144.0    0    NA  0 100.0   6    2  0           124 #> 125  8   0.0    1 135.0  0    NA   1    0  0           125 #> 126  8   0.0    0    NA  0  88.0   6    2  0           126 #> 127  8   2.0    0    NA  0  17.6   5    1  0           127 #> 128  8   3.0    0    NA  0  17.3   5    1  0           128 #> 129  8   6.0    0    NA  0  15.0   5    1  0           129 #> 130  8   9.0    0    NA  0  15.0   5    1  0           130 #> 131  8  12.0    0    NA  0  12.4   5    1  0           131 #> 132  8  24.0    0    NA  0   7.9   5    1  0           132 #> 133  8  24.0    0    NA  0  35.0   6    2  0           133 #> 134  8  36.0    0    NA  0   7.9   5    1  0           134 #> 135  8  36.0    0    NA  0  20.0   6    2  0           135 #> 136  8  48.0    0    NA  0   5.1   5    1  0           136 #> 137  8  48.0    0    NA  0  12.0   6    2  0           137 #> 138  8  72.0    0    NA  0   3.6   5    1  0           138 #> 139  8  72.0    0    NA  0  16.0   6    2  0           139 #> 140  8  96.0    0    NA  0   2.4   5    1  0           140 #> 141  8  96.0    0    NA  0  23.0   6    2  0           141 #> 142  8 120.0    0    NA  0   2.0   5    1  0           142 #> 143  8 120.0    0    NA  0  36.0   6    2  0           143 #> 144  8 144.0    0    NA  0  48.0   6    2  0           144 #> 145  9   0.0    1  75.0  0    NA   1    0  0           145 #> 146  9   0.0    0    NA  0  92.0   6    2  0           146 #> 147  9   0.5    0    NA  0   0.0   5    1  0           147 #> 148  9   1.0    0    NA  0   1.0   5    1  0           148 #> 149  9   2.0    0    NA  0   4.6   5    1  0           149 #> 150  9   3.0    0    NA  0  12.7   5    1  0           150 #> 151  9   3.0    0    NA  0   8.0   5    1  0           151 #> 152  9   6.0    0    NA  0  12.7   5    1  0           152 #> 153  9   6.0    0    NA  0  11.5   5    1  0           153 #> 154  9   9.0    0    NA  0  12.9   5    1  0           154 #> 155  9   9.0    0    NA  0  11.4   5    1  0           155 #> 156  9  12.0    0    NA  0  11.4   5    1  0           156 #> 157  9  12.0    0    NA  0  11.0   5    1  0           157 #> 158  9  24.0    0    NA  0   9.1   5    1  0           158 #> 159  9  24.0    0    NA  0  33.0   6    2  0           159 #> 160  9  36.0    0    NA  0   8.2   5    1  0           160 #> 161  9  36.0    0    NA  0  22.0   6    2  0           161 #> 162  9  48.0    0    NA  0   5.9   5    1  0           162 #> 163  9  48.0    0    NA  0  16.0   6    2  0           163 #> 164  9  72.0    0    NA  0   3.6   5    1  0           164 #> 165  9  72.0    0    NA  0  18.0   6    2  0           165 #> 166  9  96.0    0    NA  0   1.7   5    1  0           166 #> 167  9  96.0    0    NA  0  32.0   6    2  0           167 #> 168  9 120.0    0    NA  0   1.1   5    1  0           168 #> 169  9 120.0    0    NA  0  30.0   6    2  0           169 #> 170  9 144.0    0    NA  0  45.0   6    2  0           170 #> 171 10   0.0    1 105.0  0    NA   1    0  0           171 #> 172 10   0.0    0    NA  0  90.0   6    2  0           172 #> 173 10  24.0    0    NA  0   8.6   5    1  0           173 #> 174 10  24.0    0    NA  0  39.0   6    2  0           174 #> 175 10  36.0    0    NA  0   8.0   5    1  0           175 #> 176 10  36.0    0    NA  0  22.0   6    2  0           176 #> 177 10  48.0    0    NA  0   6.0   5    1  0           177 #> 178 10  48.0    0    NA  0  17.0   6    2  0           178 #> 179 10  72.0    0    NA  0   4.4   5    1  0           179 #> 180 10  72.0    0    NA  0  17.0   6    2  0           180 #> 181 10  96.0    0    NA  0   3.6   5    1  0           181 #> 182 10  96.0    0    NA  0  22.0   6    2  0           182 #> 183 10 120.0    0    NA  0   2.8   5    1  0           183 #> 184 10 120.0    0    NA  0  25.0   6    2  0           184 #> 185 10 144.0    0    NA  0  33.0   6    2  0           185 #> 186 11   0.0    1 123.0  0    NA   1    0  0           186 #> 187 11   0.0    0    NA  0 100.0   6    2  0           187 #> 188 11   1.5    0    NA  0  11.4   5    1  0           188 #> 189 11   3.0    0    NA  0  15.4   5    1  0           189 #> 190 11   6.0    0    NA  0  17.5   5    1  0           190 #> 191 11  12.0    0    NA  0  14.0   5    1  0           191 #> 192 11  24.0    0    NA  0   9.0   5    1  0           192 #> 193 11  24.0    0    NA  0  37.0   6    2  0           193 #> 194 11  36.0    0    NA  0   8.9   5    1  0           194 #> 195 11  36.0    0    NA  0  24.0   6    2  0           195 #> 196 11  48.0    0    NA  0   6.6   5    1  0           196 #> 197 11  48.0    0    NA  0  14.0   6    2  0           197 #> 198 11  72.0    0    NA  0   4.2   5    1  0           198 #> 199 11  72.0    0    NA  0  11.0   6    2  0           199 #> 200 11  96.0    0    NA  0   3.6   5    1  0           200 #> 201 11  96.0    0    NA  0  14.0   6    2  0           201 #> 202 11 120.0    0    NA  0   2.6   5    1  0           202 #> 203 11 120.0    0    NA  0  23.0   6    2  0           203 #> 204 11 144.0    0    NA  0  33.0   6    2  0           204 #> 205 12   0.0    1 113.0  0    NA   1    0  0           205 #> 206 12   0.0    0    NA  0  85.0   6    2  0           206 #> 207 12   1.5    0    NA  0   0.6   5    1  0           207 #> 208 12   3.0    0    NA  0   2.8   5    1  0           208 #> 209 12   6.0    0    NA  0  13.8   5    1  0           209 #> 210 12   9.0    0    NA  0  15.0   5    1  0           210 #> 211 12  24.0    0    NA  0  10.5   5    1  0           211 #> 212 12  24.0    0    NA  0  25.0   6    2  0           212 #> 213 12  36.0    0    NA  0   9.1   5    1  0           213 #> 214 12  36.0    0    NA  0  15.0   6    2  0           214 #> 215 12  48.0    0    NA  0   6.6   5    1  0           215 #> 216 12  48.0    0    NA  0  11.0   6    2  0           216 #> 217 12  72.0    0    NA  0   4.9   5    1  0           217 #> 218 12  96.0    0    NA  0   2.4   5    1  0           218 #> 219 12 120.0    0    NA  0   1.9   5    1  0           219 #> 220 13   0.0    1 113.0  0    NA   1    0  0           220 #> 221 13   0.0    0    NA  0  88.0   6    2  0           221 #> 222 13   1.5    0    NA  0   3.6   5    1  0           222 #> 223 13   3.0    0    NA  0  12.9   5    1  0           223 #> 224 13   6.0    0    NA  0  12.9   5    1  0           224 #> 225 13   9.0    0    NA  0  10.2   5    1  0           225 #> 226 13  24.0    0    NA  0   6.4   5    1  0           226 #> 227 13  24.0    0    NA  0  41.0   6    2  0           227 #> 228 13  36.0    0    NA  0   6.9   5    1  0           228 #> 229 13  36.0    0    NA  0  23.0   6    2  0           229 #> 230 13  48.0    0    NA  0   4.5   5    1  0           230 #> 231 13  48.0    0    NA  0  16.0   6    2  0           231 #> 232 13  72.0    0    NA  0   3.2   5    1  0           232 #> 233 13  72.0    0    NA  0  14.0   6    2  0           233 #> 234 13  96.0    0    NA  0   2.4   5    1  0           234 #> 235 13  96.0    0    NA  0  18.0   6    2  0           235 #> 236 13 120.0    0    NA  0   1.3   5    1  0           236 #> 237 13 120.0    0    NA  0  22.0   6    2  0           237 #> 238 13 144.0    0    NA  0  35.0   6    2  0           238 #> 239 14   0.0    1  75.0  0    NA   1    0  0           239 #> 240 14   0.0    0    NA  0  85.0   6    2  0           240 #> 241 14   0.5    0    NA  0   0.0   5    1  0           241 #> 242 14   1.0    0    NA  0   2.7   5    1  0           242 #> 243 14   2.0    0    NA  0  11.6   5    1  0           243 #> 244 14   3.0    0    NA  0  11.6   5    1  0           244 #> 245 14   6.0    0    NA  0  11.3   5    1  0           245 #> 246 14   9.0    0    NA  0   9.7   5    1  0           246 #> 247 14  24.0    0    NA  0   6.5   5    1  0           247 #> 248 14  24.0    0    NA  0  32.0   6    2  0           248 #> 249 14  36.0    0    NA  0   5.2   5    1  0           249 #> 250 14  36.0    0    NA  0  22.0   6    2  0           250 #> 251 14  48.0    0    NA  0   3.6   5    1  0           251 #> 252 14  48.0    0    NA  0  21.0   6    2  0           252 #> 253 14  72.0    0    NA  0   2.4   5    1  0           253 #> 254 14  72.0    0    NA  0  28.0   6    2  0           254 #> 255 14  96.0    0    NA  0   0.9   5    1  0           255 #> 256 14  96.0    0    NA  0  38.0   6    2  0           256 #> 257 14 120.0    0    NA  0  46.0   6    2  0           257 #> 258 14 144.0    0    NA  0  65.0   6    2  0           258 #> 259 15   0.0    1  85.0  0    NA   1    0  0           259 #> 260 15   0.0    0    NA  0 100.0   6    2  0           260 #> 261 15   1.0    0    NA  0   6.6   5    1  0           261 #> 262 15   3.0    0    NA  0  11.9   5    1  0           262 #> 263 15   6.0    0    NA  0  11.7   5    1  0           263 #> 264 15   9.0    0    NA  0  12.2   5    1  0           264 #> 265 15  24.0    0    NA  0   8.1   5    1  0           265 #> 266 15  24.0    0    NA  0  43.0   6    2  0           266 #> 267 15  36.0    0    NA  0   7.4   5    1  0           267 #> 268 15  36.0    0    NA  0  26.0   6    2  0           268 #> 269 15  48.0    0    NA  0   6.8   5    1  0           269 #> 270 15  48.0    0    NA  0  15.0   6    2  0           270 #> 271 15  72.0    0    NA  0   5.3   5    1  0           271 #> 272 15  72.0    0    NA  0  13.0   6    2  0           272 #> 273 15  96.0    0    NA  0   3.0   5    1  0           273 #> 274 15  96.0    0    NA  0  21.0   6    2  0           274 #> 275 15 120.0    0    NA  0   2.0   5    1  0           275 #> 276 15 120.0    0    NA  0  28.0   6    2  0           276 #> 277 15 144.0    0    NA  0  39.0   6    2  0           277 #> 278 16   0.0    1  87.0  0    NA   1    0  0           278 #> 279 16   0.0    0    NA  0 100.0   6    2  0           279 #> 280 16  24.0    0    NA  0  10.4   5    1  0           280 #> 281 16  24.0    0    NA  0  42.0   6    2  0           281 #> 282 16  36.0    0    NA  0   8.9   5    1  0           282 #> 283 16  36.0    0    NA  0  32.0   6    2  0           283 #> 284 16  48.0    0    NA  0   7.0   5    1  0           284 #> 285 16  48.0    0    NA  0  26.0   6    2  0           285 #> 286 16  72.0    0    NA  0   4.4   5    1  0           286 #> 287 16  72.0    0    NA  0  31.0   6    2  0           287 #> 288 16  96.0    0    NA  0   3.2   5    1  0           288 #> 289 16  96.0    0    NA  0  33.0   6    2  0           289 #> 290 16 120.0    0    NA  0   2.4   5    1  0           290 #> 291 16 120.0    0    NA  0  54.0   6    2  0           291 #> 292 17   0.0    1 117.0  0    NA   1    0  0           292 #> 293 17   0.0    0    NA  0 100.0   6    2  0           293 #> 294 17  24.0    0    NA  0   7.6   5    1  0           294 #> 295 17  24.0    0    NA  0  35.0   6    2  0           295 #> 296 17  36.0    0    NA  0   6.4   5    1  0           296 #> 297 17  36.0    0    NA  0  23.0   6    2  0           297 #> 298 17  48.0    0    NA  0   6.0   5    1  0           298 #> 299 17  48.0    0    NA  0  17.0   6    2  0           299 #> 300 17  72.0    0    NA  0   4.0   5    1  0           300 #> 301 17  72.0    0    NA  0  18.0   6    2  0           301 #> 302 17  96.0    0    NA  0   3.1   5    1  0           302 #> 303 17  96.0    0    NA  0  18.0   6    2  0           303 #> 304 17 120.0    0    NA  0   2.0   5    1  0           304 #> 305 17 120.0    0    NA  0  21.0   6    2  0           305 #> 306 18   0.0    1 112.0  0    NA   1    0  0           306 #> 307 18   0.0    0    NA  0 100.0   6    2  0           307 #> 308 18  24.0    0    NA  0   7.6   5    1  0           308 #> 309 18  24.0    0    NA  0  32.0   6    2  0           309 #> 310 18  36.0    0    NA  0   6.6   5    1  0           310 #> 311 18  36.0    0    NA  0  20.0   6    2  0           311 #> 312 18  48.0    0    NA  0   5.4   5    1  0           312 #> 313 18  48.0    0    NA  0  18.0   6    2  0           313 #> 314 18  72.0    0    NA  0   3.4   5    1  0           314 #> 315 18  72.0    0    NA  0  18.0   6    2  0           315 #> 316 18  96.0    0    NA  0   1.2   5    1  0           316 #> 317 18  96.0    0    NA  0  19.0   6    2  0           317 #> 318 18 120.0    0    NA  0   0.9   5    1  0           318 #> 319 18 120.0    0    NA  0  29.0   6    2  0           319 #> 320 19   0.0    1  95.5  0    NA   1    0  0           320 #> 321 19   0.0    0    NA  0 100.0   6    2  0           321 #> 322 19  24.0    0    NA  0   6.6   5    1  0           322 #> 323 19  24.0    0    NA  0  33.0   6    2  0           323 #> 324 19  36.0    0    NA  0   5.3   5    1  0           324 #> 325 19  36.0    0    NA  0  28.0   6    2  0           325 #> 326 19  48.0    0    NA  0   3.6   5    1  0           326 #> 327 19  48.0    0    NA  0  18.0   6    2  0           327 #> 328 19  72.0    0    NA  0   2.7   5    1  0           328 #> 329 19  72.0    0    NA  0  18.0   6    2  0           329 #> 330 19  96.0    0    NA  0   1.4   5    1  0           330 #> 331 19  96.0    0    NA  0  17.0   6    2  0           331 #> 332 19 120.0    0    NA  0   1.1   5    1  0           332 #> 333 19 120.0    0    NA  0  26.0   6    2  0           333 #> 334 20   0.0    1  88.5  0    NA   1    0  0           334 #> 335 20   0.0    0    NA  0 100.0   6    2  0           335 #> 336 20  24.0    0    NA  0   9.6   5    1  0           336 #> 337 20  24.0    0    NA  0  41.0   6    2  0           337 #> 338 20  36.0    0    NA  0   8.0   5    1  0           338 #> 339 20  36.0    0    NA  0  30.0   6    2  0           339 #> 340 20  48.0    0    NA  0   6.6   5    1  0           340 #> 341 20  48.0    0    NA  0  22.0   6    2  0           341 #> 342 20  72.0    0    NA  0   5.6   5    1  0           342 #> 343 20  72.0    0    NA  0  23.0   6    2  0           343 #> 344 20  96.0    0    NA  0   3.5   5    1  0           344 #> 345 20  96.0    0    NA  0  23.0   6    2  0           345 #> 346 20 120.0    0    NA  0   2.3   5    1  0           346 #> 347 20 120.0    0    NA  0  35.0   6    2  0           347 #> 348 21   0.0    1  93.0  0    NA   1    0  0           348 #> 349 21   0.0    0    NA  0 100.0   6    2  0           349 #> 350 21  24.0    0    NA  0   7.3   5    1  0           350 #> 351 21  24.0    0    NA  0  46.0   6    2  0           351 #> 352 21  36.0    0    NA  0   6.1   5    1  0           352 #> 353 21  36.0    0    NA  0  27.0   6    2  0           353 #> 354 21  48.0    0    NA  0   4.3   5    1  0           354 #> 355 21  48.0    0    NA  0  22.0   6    2  0           355 #> 356 21  72.0    0    NA  0   3.2   5    1  0           356 #> 357 21  72.0    0    NA  0  36.0   6    2  0           357 #> 358 21  96.0    0    NA  0   2.3   5    1  0           358 #> 359 21  96.0    0    NA  0  40.0   6    2  0           359 #> 360 21 120.0    0    NA  0   1.9   5    1  0           360 #> 361 21 120.0    0    NA  0  44.0   6    2  0           361 #> 362 22   0.0    1  87.0  0    NA   1    0  0           362 #> 363 22   0.0    0    NA  0 100.0   6    2  0           363 #> 364 22  24.0    0    NA  0   8.9   5    1  0           364 #> 365 22  24.0    0    NA  0  35.0   6    2  0           365 #> 366 22  36.0    0    NA  0   8.4   5    1  0           366 #> 367 22  36.0    0    NA  0  27.0   6    2  0           367 #> 368 22  48.0    0    NA  0   8.0   5    1  0           368 #> 369 22  48.0    0    NA  0  23.0   6    2  0           369 #> 370 22  72.0    0    NA  0   4.4   5    1  0           370 #> 371 22  72.0    0    NA  0  27.0   6    2  0           371 #> 372 22  96.0    0    NA  0   3.2   5    1  0           372 #> 373 22  96.0    0    NA  0  43.0   6    2  0           373 #> 374 22 120.0    0    NA  0   1.7   5    1  0           374 #> 375 22 120.0    0    NA  0  43.0   6    2  0           375 #> 376 23   0.0    1 110.0  0    NA   1    0  0           376 #> 377 23   0.0    0    NA  0 100.0   6    2  0           377 #> 378 23  24.0    0    NA  0   9.8   5    1  0           378 #> 379 23  24.0    0    NA  0  34.0   6    2  0           379 #> 380 23  36.0    0    NA  0   8.4   5    1  0           380 #> 381 23  36.0    0    NA  0  24.0   6    2  0           381 #> 382 23  48.0    0    NA  0   6.6   5    1  0           382 #> 383 23  48.0    0    NA  0  15.0   6    2  0           383 #> 384 23  72.0    0    NA  0   4.8   5    1  0           384 #> 385 23  72.0    0    NA  0  15.0   6    2  0           385 #> 386 23  96.0    0    NA  0   3.2   5    1  0           386 #> 387 23  96.0    0    NA  0  19.0   6    2  0           387 #> 388 23 120.0    0    NA  0   2.4   5    1  0           388 #> 389 23 120.0    0    NA  0  19.0   6    2  0           389 #> 390 24   0.0    1 115.0  0    NA   1    0  0           390 #> 391 24   0.0    0    NA  0  88.0   6    2  0           391 #> 392 24  24.0    0    NA  0   8.2   5    1  0           392 #> 393 24  24.0    0    NA  0  37.0   6    2  0           393 #> 394 24  36.0    0    NA  0   7.5   5    1  0           394 #> 395 24  36.0    0    NA  0  20.0   6    2  0           395 #> 396 24  48.0    0    NA  0   6.8   5    1  0           396 #> 397 24  48.0    0    NA  0  20.0   6    2  0           397 #> 398 24  72.0    0    NA  0   5.5   5    1  0           398 #> 399 24  72.0    0    NA  0  26.0   6    2  0           399 #> 400 24  96.0    0    NA  0   4.5   5    1  0           400 #> 401 24  96.0    0    NA  0  28.0   6    2  0           401 #> 402 24 120.0    0    NA  0   3.7   5    1  0           402 #> 403 24 120.0    0    NA  0  50.0   6    2  0           403 #> 404 25   0.0    1 112.0  0    NA   1    0  0           404 #> 405 25   0.0    0    NA  0 100.0   6    2  0           405 #> 406 25  24.0    0    NA  0  11.0   5    1  0           406 #> 407 25  24.0    0    NA  0  32.0   6    2  0           407 #> 408 25  36.0    0    NA  0  10.0   5    1  0           408 #> 409 25  36.0    0    NA  0  20.0   6    2  0           409 #> 410 25  48.0    0    NA  0   8.2   5    1  0           410 #> 411 25  48.0    0    NA  0  17.0   6    2  0           411 #> 412 25  72.0    0    NA  0   6.0   5    1  0           412 #> 413 25  72.0    0    NA  0  19.0   6    2  0           413 #> 414 25  96.0    0    NA  0   3.7   5    1  0           414 #> 415 25  96.0    0    NA  0  21.0   6    2  0           415 #> 416 25 120.0    0    NA  0   2.6   5    1  0           416 #> 417 25 120.0    0    NA  0  30.0   6    2  0           417 #> 418 26   0.0    1 120.0  0    NA   1    0  0           418 #> 419 26   0.0    0    NA  0 100.0   6    2  0           419 #> 420 26  24.0    0    NA  0  10.0   5    1  0           420 #> 421 26  24.0    0    NA  0  41.0   6    2  0           421 #> 422 26  36.0    0    NA  0   9.0   5    1  0           422 #> 423 26  36.0    0    NA  0  28.0   6    2  0           423 #> 424 26  48.0    0    NA  0   7.3   5    1  0           424 #> 425 26  48.0    0    NA  0  19.0   6    2  0           425 #> 426 26  72.0    0    NA  0   5.2   5    1  0           426 #> 427 26  72.0    0    NA  0  17.0   6    2  0           427 #> 428 26  96.0    0    NA  0   3.7   5    1  0           428 #> 429 26  96.0    0    NA  0  17.0   6    2  0           429 #> 430 26 120.0    0    NA  0   2.7   5    1  0           430 #> 431 26 120.0    0    NA  0  24.0   6    2  0           431 #> 432 27   0.0    1 120.0  0    NA   1    0  0           432 #> 433 27   0.0    0    NA  0 100.0   6    2  0           433 #> 434 27  24.0    0    NA  0  11.8   5    1  0           434 #> 435 27  24.0    0    NA  0  32.0   6    2  0           435 #> 436 27  36.0    0    NA  0   9.2   5    1  0           436 #> 437 27  36.0    0    NA  0  21.0   6    2  0           437 #> 438 27  48.0    0    NA  0   7.7   5    1  0           438 #> 439 27  48.0    0    NA  0  19.0   6    2  0           439 #> 440 27  72.0    0    NA  0   4.9   5    1  0           440 #> 441 27  72.0    0    NA  0  22.0   6    2  0           441 #> 442 27  96.0    0    NA  0   3.4   5    1  0           442 #> 443 27  96.0    0    NA  0  33.0   6    2  0           443 #> 444 27 120.0    0    NA  0   2.7   5    1  0           444 #> 445 27 120.0    0    NA  0  46.0   6    2  0           445 #> 446 28   0.0    1 120.0  0    NA   1    0  0           446 #> 447 28   0.0    0    NA  0 100.0   6    2  0           447 #> 448 28  24.0    0    NA  0  10.1   5    1  0           448 #> 449 28  24.0    0    NA  0  39.0   6    2  0           449 #> 450 28  36.0    0    NA  0   8.0   5    1  0           450 #> 451 28  36.0    0    NA  0  25.0   6    2  0           451 #> 452 28  48.0    0    NA  0   6.0   5    1  0           452 #> 453 28  48.0    0    NA  0  16.0   6    2  0           453 #> 454 28  72.0    0    NA  0   4.9   5    1  0           454 #> 455 28  72.0    0    NA  0  14.0   6    2  0           455 #> 456 28  96.0    0    NA  0   3.4   5    1  0           456 #> 457 28  96.0    0    NA  0  15.0   6    2  0           457 #> 458 28 120.0    0    NA  0   2.0   5    1  0           458 #> 459 28 120.0    0    NA  0  20.0   6    2  0           459 #> 460 29   0.0    1 153.0  0    NA   1    0  0           460 #> 461 29   0.0    0    NA  0  86.0   6    2  0           461 #> 462 29  24.0    0    NA  0   8.3   5    1  0           462 #> 463 29  24.0    0    NA  0  35.0   6    2  0           463 #> 464 29  36.0    0    NA  0   7.0   5    1  0           464 #> 465 29  36.0    0    NA  0  21.0   6    2  0           465 #> 466 29  48.0    0    NA  0   5.6   5    1  0           466 #> 467 29  48.0    0    NA  0  18.0   6    2  0           467 #> 468 29  72.0    0    NA  0   4.1   5    1  0           468 #> 469 29  72.0    0    NA  0  20.0   6    2  0           469 #> 470 29  96.0    0    NA  0   3.1   5    1  0           470 #> 471 29  96.0    0    NA  0  29.0   6    2  0           471 #> 472 29 120.0    0    NA  0   2.2   5    1  0           472 #> 473 29 120.0    0    NA  0  41.0   6    2  0           473 #> 474 30   0.0    1 105.0  0    NA   1    0  0           474 #> 475 30   0.0    0    NA  0 100.0   6    2  0           475 #> 476 30  24.0    0    NA  0   9.9   5    1  0           476 #> 477 30  24.0    0    NA  0  45.0   6    2  0           477 #> 478 30  36.0    0    NA  0   7.5   5    1  0           478 #> 479 30  36.0    0    NA  0  24.0   6    2  0           479 #> 480 30  48.0    0    NA  0   6.5   5    1  0           480 #> 481 30  48.0    0    NA  0  23.0   6    2  0           481 #> 482 30  72.0    0    NA  0   4.1   5    1  0           482 #> 483 30  72.0    0    NA  0  26.0   6    2  0           483 #> 484 30  96.0    0    NA  0   2.9   5    1  0           484 #> 485 30  96.0    0    NA  0  28.0   6    2  0           485 #> 486 30 120.0    0    NA  0   2.3   5    1  0           486 #> 487 30 120.0    0    NA  0  39.0   6    2  0           487 #> 488 31   0.0    1 125.0  0    NA   1    0  0           488 #> 489 31   0.0    0    NA  0 100.0   6    2  0           489 #> 490 31  24.0    0    NA  0   9.5   5    1  0           490 #> 491 31  24.0    0    NA  0  45.0   6    2  0           491 #> 492 31  36.0    0    NA  0   7.8   5    1  0           492 #> 493 31  36.0    0    NA  0  30.0   6    2  0           493 #> 494 31  48.0    0    NA  0   6.4   5    1  0           494 #> 495 31  48.0    0    NA  0  24.0   6    2  0           495 #> 496 31  72.0    0    NA  0   4.5   5    1  0           496 #> 497 31  72.0    0    NA  0  22.0   6    2  0           497 #> 498 31  96.0    0    NA  0   3.4   5    1  0           498 #> 499 31  96.0    0    NA  0  28.0   6    2  0           499 #> 500 31 120.0    0    NA  0   2.5   5    1  0           500 #> 501 31 120.0    0    NA  0  42.0   6    2  0           501 #> 502 32   0.0    1  93.0  0    NA   1    0  0           502 #> 503 32   0.0    0    NA  0 100.0   6    2  0           503 #> 504 32  24.0    0    NA  0   8.9   5    1  0           504 #> 505 32  24.0    0    NA  0  36.0   6    2  0           505 #> 506 32  36.0    0    NA  0   7.7   5    1  0           506 #> 507 32  36.0    0    NA  0  27.0   6    2  0           507 #> 508 32  48.0    0    NA  0   6.9   5    1  0           508 #> 509 32  48.0    0    NA  0  24.0   6    2  0           509 #> 510 32  72.0    0    NA  0   4.4   5    1  0           510 #> 511 32  72.0    0    NA  0  23.0   6    2  0           511 #> 512 32  96.0    0    NA  0   3.5   5    1  0           512 #> 513 32  96.0    0    NA  0  20.0   6    2  0           513 #> 514 32 120.0    0    NA  0   2.5   5    1  0           514 #> 515 32 120.0    0    NA  0  22.0   6    2  0           515"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedCluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to use with PopED to run PopED in parallel on Windows — .popedCluster","title":"Internal function to use with PopED to run PopED in parallel on Windows — .popedCluster","text":"Internal function use PopED run PopED parallel Windows","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedCluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to use with PopED to run PopED in parallel on Windows — .popedCluster","text":"","code":".popedCluster(babelmixr2)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedCluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to use with PopED to run PopED in parallel on Windows — .popedCluster","text":"babelmixr2 environment poped environment","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedCluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to use with PopED to run PopED in parallel on Windows — .popedCluster","text":"nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedCluster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal function to use with PopED to run PopED in parallel on Windows — .popedCluster","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedF.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the function value from the rxode2 solve — .popedF","title":"Get the function value from the rxode2 solve — .popedF","text":"called directly","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the function value from the rxode2 solve — .popedF","text":"","code":".popedF(popedDb)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the function value from the rxode2 solve — .popedF","text":"popedDb poped DB babelmixr2 issue","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the function value from the rxode2 solve — .popedF","text":"rxode2 weights poped error function","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the function value from the rxode2 solve — .popedF","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedFree.html","id":null,"dir":"Reference","previous_headings":"","what":"Free Poped memory (if any is allocated) — .popedFree","title":"Free Poped memory (if any is allocated) — .popedFree","text":"called directly used babelmixr2's poped interface","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedFree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Free Poped memory (if any is allocated) — .popedFree","text":"","code":".popedFree()"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedFree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Free Poped memory (if any is allocated) — .popedFree","text":"nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedFree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Free Poped memory (if any is allocated) — .popedFree","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedRxRunSetup.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup poped if needed — .popedRxRunSetup","title":"Setup poped if needed — .popedRxRunSetup","text":"called user","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedRxRunSetup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup poped if needed — .popedRxRunSetup","text":"","code":".popedRxRunSetup(popedDb)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedRxRunSetup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup poped if needed — .popedRxRunSetup","text":"nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedRxRunSetup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setup poped if needed — .popedRxRunSetup","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedSetup.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup the PopED environment — .popedSetup","title":"Setup the PopED environment — .popedSetup","text":"typically called directly","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedSetup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup the PopED environment — .popedSetup","text":"","code":".popedSetup(e, eglobal, full = FALSE)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedSetup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup the PopED environment — .popedSetup","text":"e environment setup information popEd eglobal global environment poped info full setup full model","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedSetup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup the PopED environment — .popedSetup","text":"nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedSetup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setup the PopED environment — .popedSetup","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedSolveIdME.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve poped problem for appropriate times with single/multiple endpoint models — .popedSolveIdME","title":"Solve poped problem for appropriate times with single/multiple endpoint models — .popedSolveIdME","text":"really called directly (setup correctly can crash R)","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedSolveIdME.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve poped problem for appropriate times with single/multiple endpoint models — .popedSolveIdME","text":"","code":".popedSolveIdME(theta, umt, mt, ms, nend, id, totn)  .popedSolveIdME2(theta, umt, mt, ms, nend, id, totn)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedSolveIdME.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve poped problem for appropriate times with single/multiple endpoint models — .popedSolveIdME","text":"theta parameters (includes covariates modeling times) umt unique times sampled mt original unsorted time (match f/w ) ms model switch parameter integer starting 1 (related dvid rxode2) nend specifies number endpoints model id design identifier totn total number design points tested","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedSolveIdME.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve poped problem for appropriate times with single/multiple endpoint models — .popedSolveIdME","text":"data frame $f $w corresponding function value standard deviation sampling point","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedSolveIdME.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Solve poped problem for appropriate times with single/multiple endpoint models — .popedSolveIdME","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedW.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the weight from the rxode2 solve — .popedW","title":"Get the weight from the rxode2 solve — .popedW","text":"called directly","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the weight from the rxode2 solve — .popedW","text":"","code":".popedW(popedDb)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the weight from the rxode2 solve — .popedW","text":"popedDb poped DB babelmixr2 issue","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the weight from the rxode2 solve — .popedW","text":"rxode2 weights poped error function","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-popedW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the weight from the rxode2 solve — .popedW","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-setupPopEDdatabase.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup the poped database — .setupPopEDdatabase","title":"Setup the poped database — .setupPopEDdatabase","text":"Setup poped database","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-setupPopEDdatabase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup the poped database — .setupPopEDdatabase","text":"","code":".setupPopEDdatabase(ui, data, control)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-setupPopEDdatabase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup the poped database — .setupPopEDdatabase","text":"ui rxode2 ui function data babelmixr2 design data control PopED control","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-setupPopEDdatabase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup the poped database — .setupPopEDdatabase","text":"PopED database","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/dot-setupPopEDdatabase.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setup the poped database — .setupPopEDdatabase","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/getStandardColNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine standardized rxode2 column names from data — getStandardColNames","title":"Determine standardized rxode2 column names from data — getStandardColNames","text":"Determine standardized rxode2 column names data","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/getStandardColNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine standardized rxode2 column names from data — getStandardColNames","text":"","code":"getStandardColNames(data)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/getStandardColNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine standardized rxode2 column names from data — getStandardColNames","text":"data data.frame source column names","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/getStandardColNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine standardized rxode2 column names from data — getStandardColNames","text":"named character vector names standardized names values either name column data NA column present data.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/getStandardColNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine standardized rxode2 column names from data — getStandardColNames","text":"","code":"getStandardColNames(data.frame(ID=1, DV=2, Time=3, CmT=4)) #>     id   time    amt   rate    dur   evid    cmt     ss     ii   addl     dv  #>   \"ID\" \"Time\"     NA     NA     NA     NA  \"CmT\"     NA     NA     NA   \"DV\"  #>    mdv   dvid   cens  limit  #>     NA     NA     NA     NA"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/modelUnitConversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Unit conversion for pharmacokinetic models — modelUnitConversion","title":"Unit conversion for pharmacokinetic models — modelUnitConversion","text":"Unit conversion pharmacokinetic models","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/modelUnitConversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unit conversion for pharmacokinetic models — modelUnitConversion","text":"","code":"modelUnitConversion(   dvu = NA_character_,   amtu = NA_character_,   timeu = NA_character_,   volumeu = NA_character_ )"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/modelUnitConversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unit conversion for pharmacokinetic models — modelUnitConversion","text":"dvu, amtu, timeu units DV, AMT, TIME columns data volumeu units volume parameters model","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/modelUnitConversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unit conversion for pharmacokinetic models — modelUnitConversion","text":"list names units associated parameter (\"amtu\", \"clearanceu\", \"volumeu\", \"timeu\", \"dvu\") numeric value multiply modeled estimate (example, cp) model consistent data units.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/babelmixr2/reference/modelUnitConversion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unit conversion for pharmacokinetic models — modelUnitConversion","text":"","code":"modelUnitConversion(dvu = \"ng/mL\", amtu = \"mg\", timeu = \"hr\", volumeu = \"L\") #> Loading required namespace: testthat #> $amtu #> [1] \"mg\" #>  #> $clearanceu #> [1] \"L/h\" #>  #> $volumeu #> [1] \"L\" #>  #> $timeu #> [1] \"hr\" #>  #> $dvu #> [1] \"ng/mL\" #>  #> $cmtu #> [1] \"mg/L\" #>  #> $dvConversion #> [1] 1000 #>"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/monolixControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Monolix Controller for nlmixr2 — monolixControl","title":"Monolix Controller for nlmixr2 — monolixControl","text":"Monolix Controller nlmixr2","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/monolixControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monolix Controller for nlmixr2 — monolixControl","text":"","code":"monolixControl(   nbSSDoses = 7,   useLinearization = FALSE,   stiff = FALSE,   addProp = c(\"combined2\", \"combined1\"),   exploratoryAutoStop = FALSE,   smoothingAutoStop = FALSE,   burnInIterations = 5,   smoothingIterations = 200,   exploratoryIterations = 250,   simulatedAnnealingIterations = 250,   exploratoryInterval = 200,   exploratoryAlpha = 0,   omegaTau = 0.95,   errorModelTau = 0.95,   variability = c(\"none\", \"firstStage\", \"decreasing\"),   runCommand = getOption(\"babelmixr2.monolix\", \"\"),   rxControl = NULL,   sumProd = FALSE,   optExpression = TRUE,   calcTables = TRUE,   compress = TRUE,   ci = 0.95,   sigdigTable = NULL,   absolutePath = FALSE,   modelName = NULL,   muRefCovAlg = TRUE,   run = TRUE,   ... )"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/monolixControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monolix Controller for nlmixr2 — monolixControl","text":"nbSSDoses Number steady state doses (default 7) useLinearization Use linearization log likelihood fim. stiff boolean using stiff ODE solver addProp specifies type additive plus proportional   errors, one standard deviations add (combined1)   type variances add (combined2). combined1 error type can described following equation: $$y = f + (+ b\\times f^c) \\times \\varepsilon$$ combined2 error model can described following equation: $$y = f + \\sqrt{^2 + b^2\\times f^{2\\times c}} \\times \\varepsilon$$ : - y represents observed value - f represents predicted value -  additive standard deviation - b proportional/power standard deviation - c power exponent (proportional case c=1) exploratoryAutoStop logical turn exploratory phase auto-stop SAEM (default 250) smoothingAutoStop Boolean indicating smoothing automatically stop (default FALSE) burnInIterations Number burn iterations smoothingIterations Number smoothing iterations exploratoryIterations Number iterations exploratory phase (default 250) simulatedAnnealingIterations Number simulating annealing iterations exploratoryInterval Minimum number iterations exploratory phase (default 200) exploratoryAlpha Convergence memory exploratory phase (used exploratoryAutoStop TRUE) omegaTau Proportional rate variance simulated annealing errorModelTau Proportional rate error model simulated annealing variability describes methodology parameters without variability.  : - Fixed throughout (none) - Variability first stage (firstStage) - Decreasing reaches fixed value (decreasing) runCommand shell command function run monolix; can specify default options(\"babelmixr2.monolix\"=\"runMonolix\"). empty 'lixoftConnectors' available, use lixoftConnectors run monolix. See details function usage. rxControl `rxode2` ODE solving options fitting, created `rxControl()` sumProd boolean indicating model change multiplication high precision multiplication sums high precision sums using PreciseSums package.  default FALSE. optExpression Optimize rxode2 expression speed calculation. default turned . calcTables boolean determine foceiFit calculate tables. default TRUE compress object compressed items ci Confidence level tables.  default 0.95 95% confidence. sigdigTable Significant digits final output table. specified, matches significant digits `sigdig` optimization algorithm.  `sigdig` NULL, use 3. absolutePath Boolean indicating absolute path used monolix runs modelName Model name used generate NONMEM output.  NULL try infer model name (x clear).  Otherwise use character outputs. muRefCovAlg controls algebraic expressions can   mu-referenced treated mu-referenced covariates : 1. Creating internal data-variable `nlmixrMuDerCov#`      algebraic mu-referenced expression 2. Change algebraic expression `nlmixrMuDerCov# * mu_cov_theta` 3. Use internal mu-referenced covariate saem 4. optimization completed, replace `model()` old   `model()` expression 5. Remove `nlmixrMuDerCov#` nlmix2 output general, covariates accurate since changes system linear compartment model.  Therefore, default `TRUE`. run monolix run results imported nlmixr2?  (Default TRUE) ... Ignored parameters","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/monolixControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monolix Controller for nlmixr2 — monolixControl","text":"monolix control object","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/monolixControl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monolix Controller for nlmixr2 — monolixControl","text":"runCommand given string, called system() command like: runCommand mlxtran. example, runCommand=\"'/path//monolix/mlxbsub2021' -p \" command line used look like following: '/path//monolix/mlxbsub2021' monolix.mlxtran runCommand given function, called FUN(mlxtran, directory, ui) run Monolix.  allows run Monolix way may need, long can write R.  babelmixr2 wait function return proceeding. runCommand NA, nlmixr() stop writing model files without starting Monolix. Note can get translated monolix components parsed/compiled rxode2 ui object ui$monolixModel ui$mlxtran","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/monolixControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monolix Controller for nlmixr2 — monolixControl","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nlmixr2Est.pknca.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate starting parameters using PKNCA — nlmixr2Est.pknca","title":"Estimate starting parameters using PKNCA — nlmixr2Est.pknca","text":"Estimate starting parameters using PKNCA","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nlmixr2Est.pknca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate starting parameters using PKNCA — nlmixr2Est.pknca","text":"","code":"# S3 method for class 'pknca' nlmixr2Est(env, ...)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nlmixr2Est.pknca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate starting parameters using PKNCA — nlmixr2Est.pknca","text":"env Environment nlmixr2 estimation routines. needs : - rxode2 ui object `$ui` - data fit estimation routine `$data` - control estimation routine's control options `$ui` ... arguments provided `nlmixr2Est()` provided flexibility currently used inside nlmixr","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nlmixr2Est.pknca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate starting parameters using PKNCA — nlmixr2Est.pknca","text":"model updated starting parameters.  model new element named \"nca\" available includes PKNCA results used calculation.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nlmixr2Est.pknca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate starting parameters using PKNCA — nlmixr2Est.pknca","text":"Parameters estimated follows: ka 4 half-lives Tmax higher 3:  log(2)/(tmax/4) vc Inverse dose-normalized Cmax cl Estimated median clearance vp,vp22- 4-fold vc, respectively default, controlled vpMult vp2Mult arguments pkncaControl q,q2 0.5- 0.25-fold cl, respectively default, controlled qMult q2Mult arguments pkncaControl bounds parameter estimates set 10% first percentile 10 times 99th percentile.  (ka, lower bound set lower 10% first percentile 0.03 upper bound modified 10 times 99th percentile.) Parameter estimation methods may changed future version.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nmGetDistributionMonolixLines.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionMonolixLines","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionMonolixLines","text":"S3 method getting distribution lines base rxode2 saem problem","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nmGetDistributionMonolixLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionMonolixLines","text":"","code":"nmGetDistributionMonolixLines(line)  # S3 method for class 'rxUi' nmGetDistributionMonolixLines(line)  # S3 method for class 'norm' nmGetDistributionMonolixLines(line)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nmGetDistributionMonolixLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionMonolixLines","text":"line Parsed rxode2 model environment","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nmGetDistributionMonolixLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionMonolixLines","text":"Lines estimation monolix","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nmGetDistributionMonolixLines.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionMonolixLines","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nmGetDistributionNonmemLines.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionNonmemLines","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionNonmemLines","text":"S3 method getting distribution lines base rxode2 saem problem","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nmGetDistributionNonmemLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionNonmemLines","text":"","code":"nmGetDistributionNonmemLines(line)  # S3 method for class 'rxUi' nmGetDistributionNonmemLines(line)  # S3 method for class 'norm' nmGetDistributionNonmemLines(line)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nmGetDistributionNonmemLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionNonmemLines","text":"line Parsed rxode2 model environment","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nmGetDistributionNonmemLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionNonmemLines","text":"Lines estimation nonmem","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nmGetDistributionNonmemLines.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionNonmemLines","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nonmemControl.html","id":null,"dir":"Reference","previous_headings":"","what":"NONMEM estimation control — nonmemControl","title":"NONMEM estimation control — nonmemControl","text":"NONMEM estimation control","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nonmemControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NONMEM estimation control — nonmemControl","text":"","code":"nonmemControl(   est = c(\"focei\", \"imp\", \"its\", \"posthoc\"),   advanOde = c(\"advan13\", \"advan8\", \"advan6\"),   cov = c(\"r,s\", \"r\", \"s\", \"\"),   maxeval = 1e+05,   tol = 6,   atol = 12,   sstol = 6,   ssatol = 12,   sigl = 12,   sigdig = 3,   print = 1,   extension = getOption(\"babelmixr2.nmModelExtension\", \".nmctl\"),   outputExtension = getOption(\"babelmixr2.nmOutputExtension\", \".lst\"),   runCommand = getOption(\"babelmixr2.nonmem\", \"\"),   iniSigDig = 5,   protectZeros = FALSE,   muRef = TRUE,   addProp = c(\"combined2\", \"combined1\"),   rxControl = NULL,   sumProd = FALSE,   optExpression = TRUE,   calcTables = TRUE,   compress = TRUE,   ci = 0.95,   sigdigTable = NULL,   readRounding = FALSE,   readBadOpt = FALSE,   niter = 100L,   isample = 1000L,   iaccept = 0.4,   iscaleMin = 0.1,   iscaleMax = 10,   df = 4,   seed = 14456,   mapiter = 1,   mapinter = 0,   noabort = TRUE,   modelName = NULL,   muRefCovAlg = TRUE,   run = TRUE,   ... )"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nonmemControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NONMEM estimation control — nonmemControl","text":"est NONMEM estimation method advanOde ODE solving method NONMEM cov NONMEM covariance method maxeval NONMEM's maxeval (non posthoc methods) tol NONMEM tolerance ODE solving advan atol NONMEM absolute tolerance ODE solving sstol NONMEM tolerance steady state ODE solving ssatol NONMEM absolute tolerance steady state ODE solving sigl NONMEM sigl estimation option sigdig significant digits NONMEM print print number NONMEM extension NONMEM file extensions outputExtension Extension use NONMEM output listing runCommand Command run NONMEM (typically path \"nmfe75\") function.  See details information. iniSigDig many significant digits printed $THETA $OMEGA estimate zero.  Also controls zero protection numbers protectZeros Add methods protect divide zero muRef Automatically mu-reference control stream addProp, sumProd, optExpression, calcTables, compress, ci, sigdigTable Passed nlmixr2est::foceiControl rxControl Options pass rxode2::rxControl simulations readRounding Try read NONMEM output NONMEM terminated due rounding errors readBadOpt Try read NONMEM output NONMEM terminated due apparent failed optimization niter number iterations NONMEM estimation methods isample Isample argument NONMEM estimation method iaccept Iaccept NONMEM estimation methods iscaleMin parameter IMP NONMEM method (ISCALE_MIN) iscaleMax parameter IMP NONMEM method (ISCALE_MAX) df degrees freedom IMP method seed seed NONMEM methods mapiter number map iterations IMP method mapinter MAPINTER parameter IMP method noabort Add NOABORT option $EST modelName Model name used generate NONMEM output.  NULL try infer model name (x clear).  Otherwise use character outputs. muRefCovAlg controls algebraic expressions can   mu-referenced treated mu-referenced covariates : 1. Creating internal data-variable `nlmixrMuDerCov#`      algebraic mu-referenced expression 2. Change algebraic expression `nlmixrMuDerCov# * mu_cov_theta` 3. Use internal mu-referenced covariate saem 4. optimization completed, replace `model()` old   `model()` expression 5. Remove `nlmixrMuDerCov#` nlmix2 output general, covariates accurate since changes system linear compartment model.  Therefore, default `TRUE`. run NONMEM run (files imported nlmixr2); default TRUE, FALSE simply create NONMEM control stream data file. ... optional genRxControl argument controlling automatic rxControl generation.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nonmemControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NONMEM estimation control — nonmemControl","text":"babelmixr2 control option generating NONMEM control stream reading back babelmixr2/nlmixr2","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nonmemControl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NONMEM estimation control — nonmemControl","text":"runCommand given string, called system() command like: runCommand controlFile outputFile. example, runCommand=\"'/path//nmfe75'\" command line used look like following: '/path//nmfe75' one.cmt.nmctl one.cmt.lst runCommand given function, called FUN(ctl, directory, ui) run NONMEM.  allows run NONMEM way may need, long can write R.  babelmixr2 wait function return proceeding. runCommand NA, nlmixr() stop writing model files without starting NONMEM.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nonmemControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"NONMEM estimation control — nonmemControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/nonmemControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NONMEM estimation control — nonmemControl","text":"","code":"nonmemControl() #> $est #> [1] \"focei\" #>  #> $cov #> [1] \"r,s\" #>  #> $advanOde #> [1] \"advan13\" #>  #> $maxeval #> [1] 1e+05 #>  #> $print #> [1] 1 #>  #> $noabort #> [1] TRUE #>  #> $iniSigDig #> [1] 5 #>  #> $tol #> [1] 6 #>  #> $atol #> [1] 12 #>  #> $sstol #> [1] 6 #>  #> $ssatol #> [1] 12 #>  #> $sigl #> [1] 12 #>  #> $muRef #> [1] TRUE #>  #> $sigdig #> [1] 3 #>  #> $protectZeros #> [1] FALSE #>  #> $runCommand #> [1] \"\" #>  #> $outputExtension #> [1] \".lst\" #>  #> $addProp #> [1] \"combined2\" #>  #> $rxControl #> $scale #> NULL #>  #> $method #> liblsoda  #>        2  #>  #> $atol #> [1] 1e-12 #>  #> $rtol #> [1] 1e-06 #>  #> $maxsteps #> [1] 70000 #>  #> $hmin #> [1] 0 #>  #> $hmax #> [1] NA #>  #> $hini #> [1] 0 #>  #> $maxordn #> [1] 12 #>  #> $maxords #> [1] 5 #>  #> $covsInterpolation #> nocb  #>    2  #>  #> $addCov #> [1] TRUE #>  #> $returnType #> rxSolve  #>       0  #>  #> $sigma #> NULL #>  #> $sigmaDf #> NULL #>  #> $nCoresRV #> [1] 1 #>  #> $sigmaIsChol #> [1] FALSE #>  #> $sigmaSeparation #> [1] \"auto\" #>  #> $sigmaXform #> identity  #>        4  #>  #> $nDisplayProgress #> [1] 10000 #>  #> $amountUnits #> [1] NA #>  #> $timeUnits #> [1] \"hours\" #>  #> $addDosing #> [1] FALSE #>  #> $stateTrim #> [1] Inf #>  #> $updateObject #> [1] FALSE #>  #> $omega #> NULL #>  #> $omegaDf #> NULL #>  #> $omegaIsChol #> [1] FALSE #>  #> $omegaSeparation #> [1] \"auto\" #>  #> $omegaXform #> variance  #>        6  #>  #> $nSub #> [1] 1 #>  #> $thetaMat #> NULL #>  #> $thetaDf #> NULL #>  #> $thetaIsChol #> [1] FALSE #>  #> $nStud #> [1] 1 #>  #> $dfSub #> [1] 0 #>  #> $dfObs #> [1] 0 #>  #> $seed #> NULL #>  #> $nsim #> NULL #>  #> $minSS #> [1] 10 #>  #> $maxSS #> [1] 1000 #>  #> $strictSS #> [1] 1 #>  #> $infSSstep #> [1] 12 #>  #> $istateReset #> [1] TRUE #>  #> $subsetNonmem #> [1] TRUE #>  #> $hmaxSd #> [1] 0 #>  #> $maxAtolRtolFactor #> [1] 0.1 #>  #> $from #> NULL #>  #> $to #> NULL #>  #> $by #> NULL #>  #> $length.out #> NULL #>  #> $iCov #> NULL #>  #> $keep #> NULL #>  #> $keepF #> character(0) #>  #> $drop #> NULL #>  #> $warnDrop #> [1] TRUE #>  #> $omegaLower #> [1] -Inf #>  #> $omegaUpper #> [1] Inf #>  #> $sigmaLower #> [1] -Inf #>  #> $sigmaUpper #> [1] Inf #>  #> $thetaLower #> [1] -Inf #>  #> $thetaUpper #> [1] Inf #>  #> $indLinPhiM #> [1] 0 #>  #> $indLinPhiTol #> [1] 1e-07 #>  #> $indLinMatExpType #> expokit  #>       2  #>  #> $indLinMatExpOrder #> [1] 6 #>  #> $idFactor #> [1] TRUE #>  #> $mxhnil #> [1] 0 #>  #> $hmxi #> [1] 0 #>  #> $warnIdSort #> [1] TRUE #>  #> $ssAtol #> [1] 1e-12 #>  #> $ssRtol #> [1] 1e-06 #>  #> $safeZero #> [1] 0 #>  #> $sumType #> pairwise  #>        1  #>  #> $prodType #> long double  #>           1  #>  #> $sensType #> advan  #>     4  #>  #> $linDiff #>    tlag       f    rate     dur   tlag2      f2   rate2    dur2  #> 1.5e-05 1.5e-05 1.5e-05 1.5e-05 1.5e-05 1.5e-05 1.5e-05 1.5e-05  #>  #> $linDiffCentral #>  tlag     f  rate   dur tlag2    f2 rate2  dur2  #>  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  #>  #> $resample #> NULL #>  #> $resampleID #> [1] TRUE #>  #> $maxwhile #> [1] 100000 #>  #> $cores #> [1] 0 #>  #> $atolSens #> [1] 1e-08 #>  #> $rtolSens #> [1] 1e-06 #>  #> $ssAtolSens #> [1] 1e-08 #>  #> $ssRtolSens #> [1] 1e-06 #>  #> $simVariability #> [1] NA #>  #> $nLlikAlloc #> NULL #>  #> $useStdPow #> [1] 0 #>  #> $naTimeHandle #> ignore  #>      1  #>  #> $addlKeepsCov #> [1] FALSE #>  #> $addlDropSs #> [1] TRUE #>  #> $ssAtDoseTime #> [1] TRUE #>  #> $ss2cancelAllPending #> [1] FALSE #>  #> $naInterpolation #> locf  #>    1  #>  #> $keepInterpolation #> na  #>  2  #>  #> $safeLog #> [1] 1 #>  #> $safePow #> [1] 1 #>  #> $.zeros #> NULL #>  #> attr(,\"class\") #> [1] \"rxControl\" #>  #> $sumProd #> [1] FALSE #>  #> $optExpression #> [1] TRUE #>  #> $calcTables #> [1] TRUE #>  #> $compress #> [1] TRUE #>  #> $ci #> [1] 0.95 #>  #> $sigdigTable #> NULL #>  #> $readRounding #> [1] FALSE #>  #> $readBadOpt #> [1] FALSE #>  #> $genRxControl #> [1] TRUE #>  #> $niter #> [1] 100 #>  #> $isample #> [1] 1000 #>  #> $iaccept #> [1] 0.4 #>  #> $iscaleMin #> [1] 0.1 #>  #> $iscaleMax #> [1] 10 #>  #> $df #> [1] 4 #>  #> $seed #> [1] 14456 #>  #> $mapiter #> [1] 1 #>  #> $modelName #> NULL #>  #> $muRefCovAlg #> [1] TRUE #>  #> $run #> [1] TRUE #>  #> attr(,\"class\") #> [1] \"nonmemControl\""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/pkncaControl.html","id":null,"dir":"Reference","previous_headings":"","what":"PKNCA estimation control — pkncaControl","title":"PKNCA estimation control — pkncaControl","text":"PKNCA estimation control","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/pkncaControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PKNCA estimation control — pkncaControl","text":"","code":"pkncaControl(   concu = NA_character_,   doseu = NA_character_,   timeu = NA_character_,   volumeu = NA_character_,   vpMult = 2,   qMult = 1/2,   vp2Mult = 4,   q2Mult = 1/4,   dvParam = \"cp\",   groups = character(),   sparse = FALSE,   ncaData = NULL,   ncaResults = NULL,   rxControl = rxode2::rxControl() )"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/pkncaControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PKNCA estimation control — pkncaControl","text":"concu, doseu, timeu concentration, dose, time units source data (passed PKNCA::pknca_units_table()). volumeu compartment volume model (NULL, simplified units source data used) vpMult, qMult, vp2Mult, q2Mult Multipliers vc cl provide initial estimates vp, q, vp2, q2 dvParam parameter name model modified concentration unit conversions.  must assigned line , separate residual error model line. groups Grouping columns NCA summaries group (required sparse = TRUE) sparse concentration-time data sparse PK (commonly used small nonclinical species terminal difficult sampling) dense PK (commonly used clinical studies larger nonclinical species)? ncaData Data use calculating NCA parameters.  Typical use subset original data informative NCA. ncaResults Already computed NCA results (PKNCAresults object) bypass automatic calculations.  least following parameters must calculated NCA: tmax, cmax.dn, cl.last rxControl Control options sent rxode2::rxControl()","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/pkncaControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PKNCA estimation control — pkncaControl","text":"list parameters","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Control for a PopED design task — popedControl","title":"Control for a PopED design task — popedControl","text":"Control PopED design task","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control for a PopED design task — popedControl","text":"","code":"popedControl(   stickyRecalcN = 4,   maxOdeRecalc = 5,   odeRecalcFactor = 10^(0.5),   maxn = NULL,   rxControl = NULL,   sigdig = 4,   important = NULL,   unimportant = NULL,   iFIMCalculationType = c(\"reduced\", \"full\", \"weighted\", \"loc\", \"reducedPFIM\", \"fullABC\",     \"largeMat\", \"reducedFIMABC\"),   iApproximationMethod = c(\"fo\", \"foce\", \"focei\", \"foi\"),   iFOCENumInd = 1000,   prior_fim = matrix(0, 0, 1),   d_switch = c(\"d\", \"ed\"),   ofv_calc_type = c(\"lnD\", \"d\", \"a\", \"Ds\", \"inverse\"),   strEDPenaltyFile = \"\",   ofv_fun = NULL,   iEDCalculationType = c(\"mc\", \"laplace\", \"bfgs-laplace\"),   ED_samp_size = 45,   bLHS = c(\"hypercube\", \"random\"),   bUseRandomSearch = TRUE,   bUseStochasticGradient = TRUE,   bUseLineSearch = TRUE,   bUseExchangeAlgorithm = FALSE,   bUseBFGSMinimizer = FALSE,   bUseGrouped_xt = FALSE,   EACriteria = c(\"modified\", \"fedorov\"),   strRunFile = \"\",   poped_version = NULL,   modtit = \"PopED babelmixr2 model\",   output_file = \"PopED_output_summary\",   output_function_file = \"PopED_output_\",   strIterationFileName = \"PopED_current.R\",   user_data = NULL,   ourzero = 1e-05,   dSeed = NULL,   line_opta = NULL,   line_optx = NULL,   bShowGraphs = FALSE,   use_logfile = FALSE,   m1_switch = c(\"central\", \"complex\", \"analytic\", \"ad\"),   m2_switch = c(\"central\", \"complex\", \"analytic\", \"ad\"),   hle_switch = c(\"central\", \"complex\", \"ad\"),   gradff_switch = c(\"central\", \"complex\", \"analytic\", \"ad\"),   gradfg_switch = c(\"central\", \"complex\", \"analytic\", \"ad\"),   grad_all_switch = c(\"central\", \"complex\"),   rsit_output = 5,   sgit_output = 1,   hm1 = 1e-05,   hlf = 1e-05,   hlg = 1e-05,   hm2 = 1e-05,   hgd = 1e-05,   hle = 1e-05,   AbsTol = 1e-06,   RelTol = 1e-06,   iDiffSolverMethod = NULL,   bUseMemorySolver = FALSE,   rsit = 300,   sgit = 150,   intrsit = 250,   intsgit = 50,   maxrsnullit = 50,   convergence_eps = 1e-08,   rslxt = 10,   rsla = 10,   cfaxt = 0.001,   cfaa = 0.001,   bGreedyGroupOpt = FALSE,   EAStepSize = 0.01,   EANumPoints = FALSE,   EAConvergenceCriteria = 1e-20,   bEANoReplicates = FALSE,   BFGSProjectedGradientTol = 1e-04,   BFGSTolerancef = 0.001,   BFGSToleranceg = 0.9,   BFGSTolerancex = 0.1,   ED_diff_it = 30,   ED_diff_percent = 10,   line_search_it = 50,   Doptim_iter = 1,   iCompileOption = c(\"none\", \"full\", \"mcc\", \"mpi\"),   compileOnly = FALSE,   iUseParallelMethod = c(\"mpi\", \"matlab\"),   MCC_Dep = NULL,   strExecuteName = \"calc_fim.exe\",   iNumProcesses = 2,   iNumChunkDesignEvals = -2,   Mat_Out_Pre = \"parallel_output\",   strExtraRunOptions = \"\",   dPollResultTime = 0.1,   strFunctionInputName = \"function_input\",   bParallelRS = FALSE,   bParallelSG = FALSE,   bParallelMFEA = FALSE,   bParallelLS = FALSE,   groupsize = NULL,   time = \"time\",   timeLow = \"low\",   timeHi = \"high\",   id = \"id\",   m = NULL,   x = NULL,   ni = NULL,   maxni = NULL,   minni = NULL,   maxtotni = NULL,   mintotni = NULL,   maxgroupsize = NULL,   mingroupsize = NULL,   maxtotgroupsize = NULL,   mintotgroupsize = NULL,   xt_space = NULL,   a = NULL,   maxa = NULL,   mina = NULL,   a_space = NULL,   x_space = NULL,   use_grouped_xt = FALSE,   grouped_xt = NULL,   use_grouped_a = FALSE,   grouped_a = NULL,   use_grouped_x = FALSE,   grouped_x = NULL,   our_zero = NULL,   auto_pointer = \"\",   user_distribution_pointer = \"\",   minxt = NULL,   maxxt = NULL,   discrete_xt = NULL,   discrete_a = NULL,   fixRes = FALSE,   script = NULL,   overwrite = TRUE,   literalFix = TRUE,   opt_xt = FALSE,   opt_a = FALSE,   opt_x = FALSE,   opt_samps = FALSE,   optTime = TRUE,   ... )"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control for a PopED design task — popedControl","text":"stickyRecalcN number bad ODE solves reducing atol/rtol rest problem. maxOdeRecalc Maximum number times reduce ODE tolerances try resolve system bad ODE solve. odeRecalcFactor ODE recalculation factor ODE solving goes bad, factor rtol/atol reduced maxn Maximum number design points optimization; default declared maximum number design points babelmixr2 dataset (NULL) rxControl `rxode2` ODE solving options fitting, created `rxControl()` sigdig Optimization significant digits. controls: tolerance inner outer optimization 10^-sigdig tolerance ODE solvers  0.5*10^(-sigdig-2); sensitivity equations  steady-state solutions default 0.5*10^(-sigdig-1.5)  (sensitivity changes applicable liblsoda) tolerance boundary check 5 * 10 ^ (-sigdig + 1) important character vector important parameters NULL default.  used Ds-optimality unimportant character vector unimportant parameters NULL default.  used Ds-optimality iFIMCalculationType can either integer named value Fisher Information Matrix type: 0/\"full\" = Full FIM 1/\"reduced\" = Reduced FIM 2/\"weighted\" = weighted models 3/\"loc\" = Loc models 4/\"reducedPFIM\" = reduced FIM derivative SD sigma PFIM 5/\"fullABC\" = FULL FIM parameterized ,B,C matrices & derivative variance 6/\"largeMat\" = Calculate one model switch time, good large matrices 7/\"reducedFIMABC\" = =Reduced FIM parameterized ,B,C matrices & derivative variance iApproximationMethod Approximation method model, 0=FO, 1=FOCE, 2=FOCEI, 3=FOI iFOCENumInd integer; number individuals focei solve prior_fim matrix; prior FIM d_switch integer character option: 0/\"ed\" = ED design 1/\"d\" = D design ofv_calc_type objective calculation type: 1/\"d\" = D-optimality\". Determinant FIM: det(FIM) 2/\"\" =  \"-optimality\". Inverse sum expected parameter variances: 1/trace_matrix(inv(FIM)) 4/\"lnD\" = \"lnD-optimality\". Natural logarithm determinant FIM: log(det(FIM)) 6/\"Ds\" = \"Ds-optimality\". Ratio Determinant FIM Determinant uninteresting rows columns FIM: det(FIM)/det(FIM_u) 7/\"inverse\" = Inverse sum expected parameter RSE: 1/sum(get_rse(FIM,poped.db,use_percent=FALSE)) strEDPenaltyFile Penalty function name path filename, empty string means penalty. User defined criterion can defined way. ofv_fun User defined function used compute objective function. function must poped database object first argument \"...\" argument list.  Can referenced function file name function defined file name file. e.g. \"cost.txt\" function named \"cost\" . iEDCalculationType ED Integral Calculation type: 0/\"mc\" = Monte-Carlo-Integration 1/\"laplace\" = Laplace Approximation 2/\"bfgs-laplace\" = BFGS Laplace Approximation ED_samp_size Sample size E-family sampling bLHS sample distributions E-family calculations. 0=Random Sampling, 1=LatinHyperCube – bUseRandomSearch ******START Optimization algorithm  SPECIFICATION OPTIONS********** Use random search (1=TRUE, 0=FALSE) bUseStochasticGradient Use Stochastic Gradient search (1=TRUE, 0=FALSE) bUseLineSearch Use Line search (1=TRUE, 0=FALSE) bUseExchangeAlgorithm Use Exchange algorithm (1=TRUE, 0=FALSE) bUseBFGSMinimizer Use BFGS Minimizer (1=TRUE, 0=FALSE) bUseGrouped_xt Use grouped time points (1=TRUE, 0=FALSE). EACriteria Exchange Algorithm Criteria: 1/\"modified\" = Modified 2/\"fedorov\"  = Fedorov strRunFile Filename path, function name, run file used instead regular PopED call. poped_version ******START Labeling file names  SPECIFICATION OPTIONS********** current PopED version modtit model title output_file Filename path output file search output_function_file Filename suffix result function file strIterationFileName Filename path storage current optimal design user_data ******START Miscellaneous SPECIFICATION OPTIONS********** User defined data structure , example used send data model ourzero Value interpret zero design dSeed seed number used optimization sampling – integer -1 creates random seed .integer(Sys.time()) NULL. line_opta Vector line search continuous design variables (1=TRUE,0=FALSE) line_optx Vector line search discrete design variables (1=TRUE,0=FALSE) bShowGraphs Use graph output search use_logfile log file used (0=FALSE, 1=TRUE) m1_switch Method used calculate M1: 1/\"central\" = Central difference 0/\"complex\" = Complex difference 20/\"analytic\" = Analytic derivative 30/\"ad\" = Automatic differentiation m2_switch Method used calculate M2: 1/\"central\" = Central difference 0/\"complex\" = Complex difference 20/\"analytic\" = Analytic derivative 30/\"ad\" = Automatic differentiation hle_switch Method used calculate linearization residual error: 1/\"central\" = Central difference 0/\"complex\" = Complex difference 30/\"ad\" = Automatic differentiation gradff_switch Method used calculate gradient model: 1/\"central\" = Central difference 0/\"complex\" = Complex difference 20/\"analytic\" = Analytic derivative 30/\"ad\" = Automatic differentiation gradfg_switch Method used calculate gradient parameter vector g: 1/\"central\" = Central difference 0/\"complex\" = Complex difference 20/\"analytic\" = Analytic derivative 30/\"ad\" = Automatic differentiation grad_all_switch Method used calculate gradients: 1/\"central\" = Central difference 0/\"complex\" = Complex difference rsit_output Number iterations random search screen output sgit_output Number iterations stochastic gradient search screen output hm1 Step length derivative linearized model w.r.t. typical values hlf Step length derivative model w.r.t. g hlg Step length derivative g w.r.t. b hm2 Step length derivative variance w.r.t. typical values hgd Step length derivative OFV w.r.t. time hle Step length derivative model w.r.t. sigma AbsTol absolute tolerance diff equation solver RelTol relative tolerance diff equation solver iDiffSolverMethod diff equation solver method, NULL default. bUseMemorySolver differential equation results stored memory (1) (0) rsit Number Random search iterations sgit Number stochastic gradient iterations intrsit Number Random search iterations discrete optimization. intsgit Number Stochastic Gradient search iterations discrete optimization maxrsnullit Iterations adaptive narrowing random search convergence_eps Stochastic Gradient convergence value, (difference OFV D-optimal, difference gradient ED-optimal) rslxt Random search locality factor sample times rsla Random search locality factor covariates cfaxt Stochastic Gradient search first step factor sample times cfaa Stochastic Gradient search first step factor covariates bGreedyGroupOpt Use greedy algorithm group assignment optimization EAStepSize Exchange Algorithm StepSize EANumPoints Exchange Algorithm NumPoints EAConvergenceCriteria Exchange Algorithm Convergence Limit/Criteria bEANoReplicates Avoid replicate samples using Exchange Algorithm BFGSProjectedGradientTol BFGS Minimizer Convergence Criteria Normalized Projected Gradient Tolerance BFGSTolerancef BFGS Minimizer Line Search Tolerance f BFGSToleranceg BFGS Minimizer Line Search Tolerance g BFGSTolerancex BFGS Minimizer Line Search Tolerance x ED_diff_it Number iterations ED-optimal design calculate convergence criteria ED_diff_percent ED-optimal design convergence criteria percent line_search_it Number grid points line search Doptim_iter Number iterations full Random search full Stochastic Gradient line search used iCompileOption Compile options PopED \"none\"/-1 = compilation \"full/0 3 = Full compilation \"mcc\"/1 4 = using MCC (shared lib) \"mpi\"/2 5 = MPI, using numbers, option 0,1,2 runs PopED option 3,4,5 stops compilation. using characters, option compileOnly determines model compiled (PopED run). compileOnly logical; compile model, run PopED (conjunction iCompileOption) iUseParallelMethod Parallel method use 0/\"matlab\"= Matlab PCT 1/\"mpi\" = MPI MCC_Dep Additional dependencies used MCC compilation (mat-files), several space separated strExecuteName Compilation output executable name iNumProcesses Number processes use running parallel (e.g. 3 = 2 workers, 1 job manager) iNumChunkDesignEvals Number design evaluations evaluated process getting new work job manager Mat_Out_Pre prefix output mat file communicate executable strExtraRunOptions Extra options send e$g. MPI executable batch script, see execute_parallel$m information options dPollResultTime Polling time check parallel execution finished strFunctionInputName file containing popedInput structure used evaluate designs bParallelRS random search going executed parallel bParallelSG stochastic gradient search going executed parallel bParallelMFEA modified exchange algorithm going executed parallel bParallelLS line search going executed parallel groupsize Vector defining size different groups (num individuals group). one number number every group. time string represents time dataset (ie xt) timeLow string represents lower design time (ie minxt) timeHi string represents upper design time (ie maxmt) id id variable m Number groups study.  individual group design. x matrix defining initial discrete values model row group/individual. ni Vector defining number samples group. maxni ******START DESIGN SPACE OPTIONS********** Max number samples per group/individual minni Min number samples per group/individual maxtotni Number defining maximum number samples allowed experiment. mintotni Number defining minimum number samples allowed experiment. maxgroupsize Vector defining max size different groups (max number individuals group) mingroupsize Vector defining min size different groups (min num individuals group) – maxtotgroupsize total maximal groupsize groups mintotgroupsize total minimal groupsize groups xt_space Cell array cell defining discrete variables allowed xt value.  Can also vector values c(1:10) (values allowed xt), list lists list(1:10, 2:23, 4:6) (one value xt row major order just one row xt, rows duplicated). Matrix defining initial continuous covariate values. n_rows=number groups, n_cols=number covariates. number rows one number groups > 1 groups assigned values. maxa Vector defining max value covariate. single value supplied values given max value mina Vector defining min value covariate. single value supplied values given max value a_space Cell array cell defining discrete variables allowed value.  Can also list values list(1:10) (values allowed ), list lists list(1:10, 2:23, 4:6) (one value ). x_space Cell array cell defining discrete variables x value. use_grouped_xt Group sampling times groups group values (TRUE FALSE). grouped_xt Matrix defining grouping sample points. Matching integers mean points matched. Allows finer control use_grouped_xt use_grouped_a Group continuous design variables groups group values (TRUE FALSE). grouped_a Matrix defining grouping continuous design variables. Matching integers mean values matched. Allows finer control use_grouped_a. use_grouped_x Group discrete design variables groups group values (TRUE FALSE). grouped_x Matrix defining grouping discrete design variables. Matching integers mean values matched. Allows finer control use_grouped_x. our_zero Value interpret zero design. auto_pointer Filename path, function name, Autocorrelation function, empty string means autocorrelation user_distribution_pointer Filename path, function name, user defined distributions E-family designs minxt Matrix single value defining minimum value xt sample.  single value supplied xt values given minimum value maxxt Matrix single value defining maximum value xt sample.  single value supplied xt values given maximum value. discrete_xt Cell array cell defining discrete variables allowed xt value.  Can also list values list(1:10) (values allowed xt), list lists list(1:10, 2:23, 4:6) (one value xt). See examples create_design_space. discrete_a Cell array cell defining discrete variables allowed value.  Can also list values list(1:10) (values allowed ), list lists list(1:10, 2:23, 4:6) (one value ). See examples create_design_space. fixRes boolean; Fix residuals specified model script write PopED/rxode2 script can modified fine control.  default NULL. script TRUE, script returned lines written file class babelmixr2popedScript. allows printed script screen. script file name (R extension), script written file. overwrite [logical(1)] TRUE, existing file place allowed readable writable. Default FALSE. literalFix boolean, substitute fixed population values literals re-adjust ui parameter estimates optimization; Default `TRUE`. opt_xt boolean indicate meant optimizing times opt_a boolean indicate meant optimizing covariates opt_x boolean indicate discrete design variables optimized opt_samps boolean indicate sample optimizer used (implemented yet PopED) optTime boolean indicate global time indexer inside babelmixr2 reset times different. default TRUE.  FALSE can get slightly better run times possibly slightly different results.  optTime FALSE global indexer reset every time PopED rxode2 setup problem poped dataset created.  can manually reset popedMultipleEndpointResetTimeIndex() ... parameters PopED control","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control for a PopED design task — popedControl","text":"popedControl object","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Control for a PopED design task — popedControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedGetMultipleEndpointModelingTimes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Multiple Endpoint Modeling Times — popedGetMultipleEndpointModelingTimes","title":"Get Multiple Endpoint Modeling Times — popedGetMultipleEndpointModelingTimes","text":"function takes vector times corresponding vector IDs, groups times IDs, initializes internal C++ global TimeIndexer, used efficiently lookup final output rxode2 solve returns sorted unique times. popedMultipleEndpointIndexDataFrame() function can used visualize internal data structure inside R, show indexes case time ties given ID.  Rather shows one indexs total number indexes data.frame","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedGetMultipleEndpointModelingTimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Multiple Endpoint Modeling Times — popedGetMultipleEndpointModelingTimes","text":"","code":"popedGetMultipleEndpointModelingTimes(times, modelSwitch, sorted = FALSE)  popedMultipleEndpointIndexDataFrame(print = FALSE)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedGetMultipleEndpointModelingTimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Multiple Endpoint Modeling Times — popedGetMultipleEndpointModelingTimes","text":"times numeric vector times. modelSwitch integer vector model switch indicator corresponding times sorted boolean indicating returned times sorted print boolean popedMultipleEndpointIndexDataFrame() TRUE show id/index per time even though may reflect returned data.frame","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedGetMultipleEndpointModelingTimes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Multiple Endpoint Modeling Times — popedGetMultipleEndpointModelingTimes","text":"numeric vector unique times.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedGetMultipleEndpointModelingTimes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Multiple Endpoint Modeling Times — popedGetMultipleEndpointModelingTimes","text":"","code":"# \\donttest{  times <- c(1.1, 1.2, 1.3, 2.1, 2.2, 3.1) modelSwitch <- c(1, 1, 1, 2, 2, 3) sortedTimes <- popedGetMultipleEndpointModelingTimes(times, modelSwitch, TRUE) print(sortedTimes) #> [1] 1.1 1.2 1.3 2.1 2.2 3.1  # now show the output of the data frame representing the model # switch to endpoint index  popedMultipleEndpointIndexDataFrame() #>   time MS:1 N:1 MS:3 N:3 MS:5 N:5 #> 1  1.1    1   1   NA  NA   NA  NA #> 2  1.2    2   1   NA  NA   NA  NA #> 3  1.3    3   1   NA  NA   NA  NA #> 4  2.1   NA  NA    4   1   NA  NA #> 5  2.2   NA  NA    5   1   NA  NA #> 6  3.1   NA  NA   NA  NA    6   1  # now show a more complex example with overlaps etc.  times <- c(1.1, 1.2, 1.3, 0.5, 2.2, 1.1, 0.75,0.75) modelSwitch <- c(1, 1, 1, 2, 2, 2, 3, 3) sortedTimes <- popedGetMultipleEndpointModelingTimes(times, modelSwitch, TRUE) print(sortedTimes) #> [1] 0.50 0.75 1.10 1.20 1.30 2.20  popedMultipleEndpointIndexDataFrame(TRUE) # Print to show individual matching #> modelSwitch: 2 time: 0.500000: 4 #> modelSwitch: 3 time: 0.750000: 7, 8 #> modelSwitch: 2 time: 1.100000: 6 #> modelSwitch: 1 time: 1.100000: 1 #> modelSwitch: 1 time: 1.200000: 2 #> modelSwitch: 1 time: 1.300000: 3 #> modelSwitch: 2 time: 2.200000: 5 #>   time MS:1 N:1 MS:3 N:3 MS:5 N:5 #> 1 0.50   NA  NA    4   1   NA  NA #> 2 0.75   NA  NA   NA  NA    7   2 #> 3 1.10    1   1    6   1   NA  NA #> 4 1.20    2   1   NA  NA   NA  NA #> 5 1.30    3   1   NA  NA   NA  NA #> 6 2.20   NA  NA    5   1   NA  NA  # }"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedMultipleEndpointParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Populates Multiple Endpoint Parameters for internal solving — popedMultipleEndpointParam","title":"Populates Multiple Endpoint Parameters for internal solving — popedMultipleEndpointParam","text":"function populates numeric vector parameters unique times also populates internal C++ global index","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedMultipleEndpointParam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populates Multiple Endpoint Parameters for internal solving — popedMultipleEndpointParam","text":"","code":"popedMultipleEndpointParam(p, times, modelSwitch, maxMT, optTime = TRUE)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedMultipleEndpointParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populates Multiple Endpoint Parameters for internal solving — popedMultipleEndpointParam","text":"p numeric vector parameters times numeric vector times modelSwitch integer vector indicating model switches PopED maxMT integer specifying maximum number time points mtimes model","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedMultipleEndpointParam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Populates Multiple Endpoint Parameters for internal solving — popedMultipleEndpointParam","text":"numeric vector containing parameters followed unique times, maximum number times greater input append maximum observed times input. assumes first parameter id dropped fro output.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedMultipleEndpointParam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Populates Multiple Endpoint Parameters for internal solving — popedMultipleEndpointParam","text":"function first uses input times model switches global time indexer. creates new numeric vector combines input parameters unique times.  number times less maxMT, remaining elements filled maximum time.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedMultipleEndpointParam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Populates Multiple Endpoint Parameters for internal solving — popedMultipleEndpointParam","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedMultipleEndpointParam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Populates Multiple Endpoint Parameters for internal solving — popedMultipleEndpointParam","text":"","code":"# \\donttest{  p <- c(1.0, 2.0, 3.0) times <- c(0.5, 1.5, 2.5) modelSwitch <- c(1, 2, 3) maxMT <- 5 popedMultipleEndpointParam(p, times, modelSwitch, maxMT) #> [1] 2.0 3.0 0.5 1.5 2.5 2.5 2.5  # }"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedMultipleEndpointResetTimeIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset the Global Time Indexer for Multiple Endpoint Modeling — popedMultipleEndpointResetTimeIndex","title":"Reset the Global Time Indexer for Multiple Endpoint Modeling — popedMultipleEndpointResetTimeIndex","text":"clears memory resets global time indexer used multiple endpoint modeling.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedMultipleEndpointResetTimeIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset the Global Time Indexer for Multiple Endpoint Modeling — popedMultipleEndpointResetTimeIndex","text":"","code":"popedMultipleEndpointResetTimeIndex()"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedMultipleEndpointResetTimeIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset the Global Time Indexer for Multiple Endpoint Modeling — popedMultipleEndpointResetTimeIndex","text":"NULL, called side effects","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/popedMultipleEndpointResetTimeIndex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset the Global Time Indexer for Multiple Endpoint Modeling — popedMultipleEndpointResetTimeIndex","text":"","code":"# \\donttest{  popedMultipleEndpointResetTimeIndex() #> NULL  # }"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. monolix2rx mlxtran, monolix2rx nlmixr2est getValidNlmixrCtl, nlmixr2Est, nmObjGetControl, nmObjGetFoceiControl, nmObjHandleControlObject nonmem2rx .nonmem2rx, nmcov, nmext, nminfo, nmtab, nmxml, nonmem2rx rxode2 .minfo, rxModelVars, rxUiGet","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/rxToMonolix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert RxODE syntax to monolix syntax — rxToMonolix","title":"Convert RxODE syntax to monolix syntax — rxToMonolix","text":"Convert RxODE syntax monolix syntax","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/rxToMonolix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert RxODE syntax to monolix syntax — rxToMonolix","text":"","code":"rxToMonolix(x, ui)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/rxToMonolix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert RxODE syntax to monolix syntax — rxToMonolix","text":"x Expression ui rxode2 ui","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/rxToMonolix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert RxODE syntax to monolix syntax — rxToMonolix","text":"Monolix syntax","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/rxToMonolix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert RxODE syntax to monolix syntax — rxToMonolix","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/rxToNonmem.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert RxODE syntax to NONMEM syntax — rxToNonmem","title":"Convert RxODE syntax to NONMEM syntax — rxToNonmem","text":"Convert RxODE syntax NONMEM syntax","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/rxToNonmem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert RxODE syntax to NONMEM syntax — rxToNonmem","text":"","code":"rxToNonmem(x, ui)"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/rxToNonmem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert RxODE syntax to NONMEM syntax — rxToNonmem","text":"x Expression ui rxode2 ui","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/rxToNonmem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert RxODE syntax to NONMEM syntax — rxToNonmem","text":"NONMEM syntax","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/rxToNonmem.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert RxODE syntax to NONMEM syntax — rxToNonmem","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/simplifyUnit.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify units by removing repeated units from the numerator and denominator — simplifyUnit","title":"Simplify units by removing repeated units from the numerator and denominator — simplifyUnit","text":"Simplify units removing repeated units numerator denominator","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/simplifyUnit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify units by removing repeated units from the numerator and denominator — simplifyUnit","text":"","code":"simplifyUnit(numerator = \"\", denominator = \"\")"},{"path":"https://nlmixr2.github.io/babelmixr2/reference/simplifyUnit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify units by removing repeated units from the numerator and denominator — simplifyUnit","text":"numerator numerator units (whole unit specification) denominator denominator units (NULL numerator whole unit specification)","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/simplifyUnit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify units by removing repeated units from the numerator and denominator — simplifyUnit","text":"units specified units numerator denominator cancelled.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/reference/simplifyUnit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplify units by removing repeated units from the numerator and denominator — simplifyUnit","text":"NA \"\" numerator denominator considered unitless.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/babelmixr2/reference/simplifyUnit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplify units by removing repeated units from the numerator and denominator — simplifyUnit","text":"","code":"simplifyUnit(\"kg\", \"kg/mL\") #> [1] \"mL\" # units that don't match exactly are not cancelled simplifyUnit(\"kg\", \"g/mL\") #> [1] \"kg*mL/g\""},{"path":"https://nlmixr2.github.io/babelmixr2/news/index.html","id":"babelmixr2-017","dir":"Changelog","previous_headings":"","what":"babelmixr2 0.1.7","title":"babelmixr2 0.1.7","text":"CRAN release: 2025-05-07 Maintenance fix upcoming PKNCA","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/news/index.html","id":"babelmixr2-016","dir":"Changelog","previous_headings":"","what":"babelmixr2 0.1.6","title":"babelmixr2 0.1.6","text":"CRAN release: 2025-01-20 Use new nlmixr2est covariate selection enforcement babelmixr2 Fix bug NONMEM export isn’t working well (#839) Check loaded rxode2 information compare loaded model information . allows better checking model loaded even robust stability. requires rxode2 > 3.0.2.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/news/index.html","id":"babelmixr2-015","dir":"Changelog","previous_headings":"","what":"babelmixr2 0.1.5","title":"babelmixr2 0.1.5","text":"CRAN release: 2024-11-06 Fix bug PopED error certain dvid values Fix bug /else clauses model cause model predict values correctly. Fix bug shrinkage() calculation works Fix bug can mix 2 different PopED data bases analysis without crashing R. didn’t occur every database clash, frequently occurred interleaved PopED code two different PopED databases, like issue #131. Added new function babelBpopIdx(poped.db, \"par\") get poped index model generated babelmixr2, useful calculating power (example 11).","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/news/index.html","id":"babelmixr2-014","dir":"Changelog","previous_headings":"","what":"babelmixr2 0.1.4","title":"babelmixr2 0.1.4","text":"CRAN release: 2024-09-23 Added experimental PopED integration Removed dependence rxode2parse Imported monolix2rx monolix2rx package Also allow conversion model imported monolix nlmixr2 fit.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/news/index.html","id":"babelmixr2-013","dir":"Changelog","previous_headings":"","what":"babelmixr2 0.1.3","title":"babelmixr2 0.1.3","text":"Changed default NONMEM rounding protection FALSE Added run option monolixControl() nonemControl() case want export modeling files run models.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/news/index.html","id":"babelmixr2-012","dir":"Changelog","previous_headings":"","what":"babelmixr2 0.1.2","title":"babelmixr2 0.1.2","text":"CRAN release: 2023-12-12 Handle algebraic mu expressions PKNCA controller now contains rxControl since used translation options revision load pruned ui model query compartment properties (.e. bioavailability, lag time, etc) writing NONMEM model. fix issues PK block define variables larger calculated variable can used model instead. nonmem2rx different lst file, long nonmem2rx::nminfo(file) works, successful conversion nlmixr2 fit object occur. Fix save parameter history $parHistData accommodate changes focei’s output ($parHist now derived). Changed solving options match new steady state options rxode2 NONMEM implements . Also changed iwres model account rxerr. instead err. updated rxode2 well.","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/news/index.html","id":"babelmixr2-011","dir":"Changelog","previous_headings":"","what":"babelmixr2 0.1.1","title":"babelmixr2 0.1.1","text":"CRAN release: 2023-05-27 Add new method .nlmixr2 convert nonmem2rx methods nlmixr fits Dropped pmxTools favor nonmem2rx conserve methods","code":""},{"path":"https://nlmixr2.github.io/babelmixr2/news/index.html","id":"babelmixr2-010","dir":"Changelog","previous_headings":"","what":"babelmixr2 0.1.0","title":"babelmixr2 0.1.0","text":"CRAN release: 2022-10-28 Babelmixr support “monolix”, “nonmem”, “pknca” methods release. Added NEWS.md file track changes package.","code":""}]
